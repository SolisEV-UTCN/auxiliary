
SolisEV4_2_Auxiliare_CBT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004c50  08004c50  00005c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c80  08004c80  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  08004c80  08004c80  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c80  08004c80  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c80  08004c80  00005c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c84  08004c84  00005c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004c88  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006014  2**0
                  CONTENTS
 10 .bss          00000140  20000014  20000014  00006014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000154  20000154  00006014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df00  00000000  00000000  00006044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000209b  00000000  00000000  00013f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb8  00000000  00000000  00015fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009de  00000000  00000000  00016c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e808  00000000  00000000  00017676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010596  00000000  00000000  00035e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bd89c  00000000  00000000  00046414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00103cb0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000357c  00000000  00000000  00103cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00107270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004c38 	.word	0x08004c38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004c38 	.word	0x08004c38

080001c8 <Update_Auxiliary_System>:
#include "stdio.h"

/*
 * This functions updates the physical Auxiliary system
 */
void Update_Auxiliary_System(Auxiliary *aux_pointer) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	static bool toggle_sign_right = OFF;
	/*
	 * Set all pins with the negated values from auxiliary structure
	 * Outputs are negated -> transistors type P
	 */
	HAL_GPIO_WritePin(GPIOB, BACK_LIGHT_Pin,!aux_pointer->rear_lights);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	f003 0320 	and.w	r3, r3, #32
 80001d8:	b2db      	uxtb	r3, r3
 80001da:	2b00      	cmp	r3, #0
 80001dc:	bf0c      	ite	eq
 80001de:	2301      	moveq	r3, #1
 80001e0:	2300      	movne	r3, #0
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	461a      	mov	r2, r3
 80001e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001ea:	486d      	ldr	r0, [pc, #436]	@ (80003a0 <Update_Auxiliary_System+0x1d8>)
 80001ec:	f002 fc72 	bl	8002ad4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, HORN_Pin, (!aux_pointer->horn));
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	f003 0310 	and.w	r3, r3, #16
 80001f8:	b2db      	uxtb	r3, r3
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	bf0c      	ite	eq
 80001fe:	2301      	moveq	r3, #1
 8000200:	2300      	movne	r3, #0
 8000202:	b2db      	uxtb	r3, r3
 8000204:	461a      	mov	r2, r3
 8000206:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800020a:	4865      	ldr	r0, [pc, #404]	@ (80003a0 <Update_Auxiliary_System+0x1d8>)
 800020c:	f002 fc62 	bl	8002ad4 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, (!aux_pointer->fan));
	HAL_GPIO_WritePin(GPIOA, CAMERA_Pin, (!aux_pointer->camera));
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000218:	b2db      	uxtb	r3, r3
 800021a:	2b00      	cmp	r3, #0
 800021c:	bf0c      	ite	eq
 800021e:	2301      	moveq	r3, #1
 8000220:	2300      	movne	r3, #0
 8000222:	b2db      	uxtb	r3, r3
 8000224:	461a      	mov	r2, r3
 8000226:	2140      	movs	r1, #64	@ 0x40
 8000228:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800022c:	f002 fc52 	bl	8002ad4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, BRAKE_Pin, (!aux_pointer->brake));
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	f003 0308 	and.w	r3, r3, #8
 8000238:	b2db      	uxtb	r3, r3
 800023a:	2b00      	cmp	r3, #0
 800023c:	bf0c      	ite	eq
 800023e:	2301      	moveq	r3, #1
 8000240:	2300      	movne	r3, #0
 8000242:	b2db      	uxtb	r3, r3
 8000244:	461a      	mov	r2, r3
 8000246:	2104      	movs	r1, #4
 8000248:	4855      	ldr	r0, [pc, #340]	@ (80003a0 <Update_Auxiliary_System+0x1d8>)
 800024a:	f002 fc43 	bl	8002ad4 <HAL_GPIO_WritePin>
	 * 	when signaling right, the left one should be off
	 * 	when using hazard signals ("pe avarii"), make sure left & right are synchronized
	 */


 if(aux_pointer->sign_left == ON && aux_pointer->sign_right == ON && toggle_sign_left == toggle_sign_right){
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	781b      	ldrb	r3, [r3, #0]
 8000252:	f003 0301 	and.w	r3, r3, #1
 8000256:	b2db      	uxtb	r3, r3
 8000258:	2b00      	cmp	r3, #0
 800025a:	d011      	beq.n	8000280 <Update_Auxiliary_System+0xb8>
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	f003 0302 	and.w	r3, r3, #2
 8000264:	b2db      	uxtb	r3, r3
 8000266:	2b00      	cmp	r3, #0
 8000268:	d00a      	beq.n	8000280 <Update_Auxiliary_System+0xb8>
 800026a:	4b4e      	ldr	r3, [pc, #312]	@ (80003a4 <Update_Auxiliary_System+0x1dc>)
 800026c:	781a      	ldrb	r2, [r3, #0]
 800026e:	4b4e      	ldr	r3, [pc, #312]	@ (80003a8 <Update_Auxiliary_System+0x1e0>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	429a      	cmp	r2, r3
 8000274:	d104      	bne.n	8000280 <Update_Auxiliary_System+0xb8>
	 sign_left_500ms = sign_right_500ms;
 8000276:	4b4d      	ldr	r3, [pc, #308]	@ (80003ac <Update_Auxiliary_System+0x1e4>)
 8000278:	781a      	ldrb	r2, [r3, #0]
 800027a:	4b4d      	ldr	r3, [pc, #308]	@ (80003b0 <Update_Auxiliary_System+0x1e8>)
 800027c:	701a      	strb	r2, [r3, #0]
 800027e:	e01a      	b.n	80002b6 <Update_Auxiliary_System+0xee>

 }else if(toggle_sign_left == ON && toggle_sign_right == OFF){
 8000280:	4b48      	ldr	r3, [pc, #288]	@ (80003a4 <Update_Auxiliary_System+0x1dc>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b01      	cmp	r3, #1
 8000286:	d109      	bne.n	800029c <Update_Auxiliary_System+0xd4>
 8000288:	4b47      	ldr	r3, [pc, #284]	@ (80003a8 <Update_Auxiliary_System+0x1e0>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d105      	bne.n	800029c <Update_Auxiliary_System+0xd4>
	 aux_pointer->sign_right = OFF;
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	7813      	ldrb	r3, [r2, #0]
 8000294:	f36f 0341 	bfc	r3, #1, #1
 8000298:	7013      	strb	r3, [r2, #0]
 800029a:	e00c      	b.n	80002b6 <Update_Auxiliary_System+0xee>
 } else if(toggle_sign_right == ON && toggle_sign_left == OFF){
 800029c:	4b42      	ldr	r3, [pc, #264]	@ (80003a8 <Update_Auxiliary_System+0x1e0>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d108      	bne.n	80002b6 <Update_Auxiliary_System+0xee>
 80002a4:	4b3f      	ldr	r3, [pc, #252]	@ (80003a4 <Update_Auxiliary_System+0x1dc>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d104      	bne.n	80002b6 <Update_Auxiliary_System+0xee>
	 aux_pointer->sign_left = OFF;
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	7813      	ldrb	r3, [r2, #0]
 80002b0:	f36f 0300 	bfc	r3, #0, #1
 80002b4:	7013      	strb	r3, [r2, #0]
 }

	if (aux_pointer->sign_left == ON) {
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	f003 0301 	and.w	r3, r3, #1
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d01b      	beq.n	80002fc <Update_Auxiliary_System+0x134>
		//count 500ms
		if (++sign_left_500ms == 10) {
 80002c4:	4b3a      	ldr	r3, [pc, #232]	@ (80003b0 <Update_Auxiliary_System+0x1e8>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	3301      	adds	r3, #1
 80002ca:	b2da      	uxtb	r2, r3
 80002cc:	4b38      	ldr	r3, [pc, #224]	@ (80003b0 <Update_Auxiliary_System+0x1e8>)
 80002ce:	701a      	strb	r2, [r3, #0]
 80002d0:	4b37      	ldr	r3, [pc, #220]	@ (80003b0 <Update_Auxiliary_System+0x1e8>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b0a      	cmp	r3, #10
 80002d6:	d126      	bne.n	8000326 <Update_Auxiliary_System+0x15e>
			HAL_GPIO_TogglePin(GPIOB, SIGN_LEFT_Pin);
 80002d8:	2101      	movs	r1, #1
 80002da:	4831      	ldr	r0, [pc, #196]	@ (80003a0 <Update_Auxiliary_System+0x1d8>)
 80002dc:	f002 fc12 	bl	8002b04 <HAL_GPIO_TogglePin>
			//store the current state of sign left
			toggle_sign_left = (!toggle_sign_left);
 80002e0:	4b30      	ldr	r3, [pc, #192]	@ (80003a4 <Update_Auxiliary_System+0x1dc>)
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	bf0c      	ite	eq
 80002e8:	2301      	moveq	r3, #1
 80002ea:	2300      	movne	r3, #0
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b2c      	ldr	r3, [pc, #176]	@ (80003a4 <Update_Auxiliary_System+0x1dc>)
 80002f2:	701a      	strb	r2, [r3, #0]
			//reset counter
			sign_left_500ms = 0;
 80002f4:	4b2e      	ldr	r3, [pc, #184]	@ (80003b0 <Update_Auxiliary_System+0x1e8>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	701a      	strb	r2, [r3, #0]
 80002fa:	e014      	b.n	8000326 <Update_Auxiliary_System+0x15e>
		}
	} else {
		//turn off
		HAL_GPIO_WritePin(GPIOB, SIGN_LEFT_Pin, (!aux_pointer->sign_left));
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	f003 0301 	and.w	r3, r3, #1
 8000304:	b2db      	uxtb	r3, r3
 8000306:	2b00      	cmp	r3, #0
 8000308:	bf0c      	ite	eq
 800030a:	2301      	moveq	r3, #1
 800030c:	2300      	movne	r3, #0
 800030e:	b2db      	uxtb	r3, r3
 8000310:	461a      	mov	r2, r3
 8000312:	2101      	movs	r1, #1
 8000314:	4822      	ldr	r0, [pc, #136]	@ (80003a0 <Update_Auxiliary_System+0x1d8>)
 8000316:	f002 fbdd 	bl	8002ad4 <HAL_GPIO_WritePin>
		toggle_sign_left = OFF;
 800031a:	4b22      	ldr	r3, [pc, #136]	@ (80003a4 <Update_Auxiliary_System+0x1dc>)
 800031c:	2200      	movs	r2, #0
 800031e:	701a      	strb	r2, [r3, #0]
		sign_left_500ms = 9;
 8000320:	4b23      	ldr	r3, [pc, #140]	@ (80003b0 <Update_Auxiliary_System+0x1e8>)
 8000322:	2209      	movs	r2, #9
 8000324:	701a      	strb	r2, [r3, #0]
	}

	if (aux_pointer->sign_right == ON) {
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	f003 0302 	and.w	r3, r3, #2
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d01b      	beq.n	800036c <Update_Auxiliary_System+0x1a4>
		if (++sign_right_500ms == 10) {
 8000334:	4b1d      	ldr	r3, [pc, #116]	@ (80003ac <Update_Auxiliary_System+0x1e4>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	3301      	adds	r3, #1
 800033a:	b2da      	uxtb	r2, r3
 800033c:	4b1b      	ldr	r3, [pc, #108]	@ (80003ac <Update_Auxiliary_System+0x1e4>)
 800033e:	701a      	strb	r2, [r3, #0]
 8000340:	4b1a      	ldr	r3, [pc, #104]	@ (80003ac <Update_Auxiliary_System+0x1e4>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b0a      	cmp	r3, #10
 8000346:	d126      	bne.n	8000396 <Update_Auxiliary_System+0x1ce>
			HAL_GPIO_TogglePin(GPIOB, SIGN_RIGHT_Pin);
 8000348:	2102      	movs	r1, #2
 800034a:	4815      	ldr	r0, [pc, #84]	@ (80003a0 <Update_Auxiliary_System+0x1d8>)
 800034c:	f002 fbda 	bl	8002b04 <HAL_GPIO_TogglePin>
			toggle_sign_right = (!toggle_sign_right);
 8000350:	4b15      	ldr	r3, [pc, #84]	@ (80003a8 <Update_Auxiliary_System+0x1e0>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	bf0c      	ite	eq
 8000358:	2301      	moveq	r3, #1
 800035a:	2300      	movne	r3, #0
 800035c:	b2db      	uxtb	r3, r3
 800035e:	461a      	mov	r2, r3
 8000360:	4b11      	ldr	r3, [pc, #68]	@ (80003a8 <Update_Auxiliary_System+0x1e0>)
 8000362:	701a      	strb	r2, [r3, #0]
			sign_right_500ms = 0;
 8000364:	4b11      	ldr	r3, [pc, #68]	@ (80003ac <Update_Auxiliary_System+0x1e4>)
 8000366:	2200      	movs	r2, #0
 8000368:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, SIGN_RIGHT_Pin, (!aux_pointer->sign_right));
		toggle_sign_right = OFF;
		sign_right_500ms = 9;
	}

}
 800036a:	e014      	b.n	8000396 <Update_Auxiliary_System+0x1ce>
		HAL_GPIO_WritePin(GPIOB, SIGN_RIGHT_Pin, (!aux_pointer->sign_right));
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	f003 0302 	and.w	r3, r3, #2
 8000374:	b2db      	uxtb	r3, r3
 8000376:	2b00      	cmp	r3, #0
 8000378:	bf0c      	ite	eq
 800037a:	2301      	moveq	r3, #1
 800037c:	2300      	movne	r3, #0
 800037e:	b2db      	uxtb	r3, r3
 8000380:	461a      	mov	r2, r3
 8000382:	2102      	movs	r1, #2
 8000384:	4806      	ldr	r0, [pc, #24]	@ (80003a0 <Update_Auxiliary_System+0x1d8>)
 8000386:	f002 fba5 	bl	8002ad4 <HAL_GPIO_WritePin>
		toggle_sign_right = OFF;
 800038a:	4b07      	ldr	r3, [pc, #28]	@ (80003a8 <Update_Auxiliary_System+0x1e0>)
 800038c:	2200      	movs	r2, #0
 800038e:	701a      	strb	r2, [r3, #0]
		sign_right_500ms = 9;
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <Update_Auxiliary_System+0x1e4>)
 8000392:	2209      	movs	r2, #9
 8000394:	701a      	strb	r2, [r3, #0]
}
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	48000400 	.word	0x48000400
 80003a4:	20000030 	.word	0x20000030
 80003a8:	20000031 	.word	0x20000031
 80003ac:	20000032 	.word	0x20000032
 80003b0:	20000033 	.word	0x20000033

080003b4 <Send_Auxiliary_State_CAN>:

void Send_Auxiliary_State_CAN(CAN_HandleTypeDef hcan, uint8_t *Activity_Check) {
 80003b4:	b084      	sub	sp, #16
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b088      	sub	sp, #32
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 80003c0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	// Prepare the CAN header
	txHeader.StdId = AUXILIARY_ID;      // Replace with appropriate CAN ID
 80003c4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80003c8:	60bb      	str	r3, [r7, #8]
	txHeader.ExtId = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60fb      	str	r3, [r7, #12]
	txHeader.IDE = CAN_ID_STD;
 80003ce:	2300      	movs	r3, #0
 80003d0:	613b      	str	r3, [r7, #16]
	txHeader.RTR = CAN_RTR_DATA;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]
	txHeader.DLC = 1;             // Length of data (up to 8 bytes)
 80003d6:	2301      	movs	r3, #1
 80003d8:	61bb      	str	r3, [r7, #24]
	txHeader.TransmitGlobalTime = DISABLE;
 80003da:	2300      	movs	r3, #0
 80003dc:	773b      	strb	r3, [r7, #28]

	// Transmit the CAN message
	HAL_CAN_AddTxMessage(&hcan, &txHeader, Activity_Check, &txMailbox);
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	f107 0108 	add.w	r1, r7, #8
 80003e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80003e6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80003ea:	f001 fc7e 	bl	8001cea <HAL_CAN_AddTxMessage>
}
 80003ee:	bf00      	nop
 80003f0:	3720      	adds	r7, #32
 80003f2:	46bd      	mov	sp, r7
 80003f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003f8:	b004      	add	sp, #16
 80003fa:	4770      	bx	lr

080003fc <Update_Offline_Mode>:

void Update_Offline_Mode(Auxiliary *aux_offline) {
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	aux_offline->brake = HAL_GPIO_ReadPin(GPIOA, BRAKE_OFFLINE_Pin);
 8000404:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000408:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800040c:	f002 fb4a 	bl	8002aa4 <HAL_GPIO_ReadPin>
 8000410:	4603      	mov	r3, r0
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	b2d9      	uxtb	r1, r3
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	7813      	ldrb	r3, [r2, #0]
 800041c:	f361 03c3 	bfi	r3, r1, #3, #1
 8000420:	7013      	strb	r3, [r2, #0]
	aux_offline->camera = HAL_GPIO_ReadPin(GPIOB, CAMERA_OFFLINE_Pin);
 8000422:	2120      	movs	r1, #32
 8000424:	4829      	ldr	r0, [pc, #164]	@ (80004cc <Update_Offline_Mode+0xd0>)
 8000426:	f002 fb3d 	bl	8002aa4 <HAL_GPIO_ReadPin>
 800042a:	4603      	mov	r3, r0
 800042c:	f003 0301 	and.w	r3, r3, #1
 8000430:	b2d9      	uxtb	r1, r3
 8000432:	687a      	ldr	r2, [r7, #4]
 8000434:	7813      	ldrb	r3, [r2, #0]
 8000436:	f361 1386 	bfi	r3, r1, #6, #1
 800043a:	7013      	strb	r3, [r2, #0]
	aux_offline->horn = HAL_GPIO_ReadPin(GPIOB, HORN_OFFLINE_Pin);
 800043c:	2140      	movs	r1, #64	@ 0x40
 800043e:	4823      	ldr	r0, [pc, #140]	@ (80004cc <Update_Offline_Mode+0xd0>)
 8000440:	f002 fb30 	bl	8002aa4 <HAL_GPIO_ReadPin>
 8000444:	4603      	mov	r3, r0
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	b2d9      	uxtb	r1, r3
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	7813      	ldrb	r3, [r2, #0]
 8000450:	f361 1304 	bfi	r3, r1, #4, #1
 8000454:	7013      	strb	r3, [r2, #0]
	aux_offline->sign_left = HAL_GPIO_ReadPin(GPIOB, SIGN_LEFT_OFFLINE_Pin);
 8000456:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800045a:	481c      	ldr	r0, [pc, #112]	@ (80004cc <Update_Offline_Mode+0xd0>)
 800045c:	f002 fb22 	bl	8002aa4 <HAL_GPIO_ReadPin>
 8000460:	4603      	mov	r3, r0
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	b2d9      	uxtb	r1, r3
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	7813      	ldrb	r3, [r2, #0]
 800046c:	f361 0300 	bfi	r3, r1, #0, #1
 8000470:	7013      	strb	r3, [r2, #0]
	aux_offline->sign_right = HAL_GPIO_ReadPin(GPIOB, SIGN_RIGHT_OFFLINE_Pin);
 8000472:	2180      	movs	r1, #128	@ 0x80
 8000474:	4815      	ldr	r0, [pc, #84]	@ (80004cc <Update_Offline_Mode+0xd0>)
 8000476:	f002 fb15 	bl	8002aa4 <HAL_GPIO_ReadPin>
 800047a:	4603      	mov	r3, r0
 800047c:	f003 0301 	and.w	r3, r3, #1
 8000480:	b2d9      	uxtb	r1, r3
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	7813      	ldrb	r3, [r2, #0]
 8000486:	f361 0341 	bfi	r3, r1, #1, #1
 800048a:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOC, FRONT_LIGHT_OFFLINE_Pin)
 800048c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000490:	480f      	ldr	r0, [pc, #60]	@ (80004d0 <Update_Offline_Mode+0xd4>)
 8000492:	f002 fb07 	bl	8002aa4 <HAL_GPIO_ReadPin>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d107      	bne.n	80004ac <Update_Offline_Mode+0xb0>
			|| HAL_GPIO_ReadPin(GPIOC, BACK_LIGHT_OFFLINE_Pin)) {
 800049c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004a0:	480b      	ldr	r0, [pc, #44]	@ (80004d0 <Update_Offline_Mode+0xd4>)
 80004a2:	f002 faff 	bl	8002aa4 <HAL_GPIO_ReadPin>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d005      	beq.n	80004b8 <Update_Offline_Mode+0xbc>
		aux_offline->lights = ON;
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	7813      	ldrb	r3, [r2, #0]
 80004b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004b4:	7013      	strb	r3, [r2, #0]
 80004b6:	e005      	b.n	80004c4 <Update_Offline_Mode+0xc8>
	} else
		aux_offline->lights = OFF;
 80004b8:	687a      	ldr	r2, [r7, #4]
 80004ba:	7813      	ldrb	r3, [r2, #0]
 80004bc:	f36f 13c7 	bfc	r3, #7, #1
 80004c0:	7013      	strb	r3, [r2, #0]
}
 80004c2:	bf00      	nop
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	48000400 	.word	0x48000400
 80004d0:	48000800 	.word	0x48000800

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fc44 	bl	8000d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f826 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f9d0 	bl	8000884 <MX_GPIO_Init>
  MX_ADC4_Init();
 80004e4:	f000 f87e 	bl	80005e4 <MX_ADC4_Init>
  MX_CAN_Init();
 80004e8:	f000 f8da 	bl	80006a0 <MX_CAN_Init>
  MX_TIM2_Init();
 80004ec:	f000 f92c 	bl	8000748 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004f0:	f000 f978 	bl	80007e4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  	HAL_Delay(2000); //waiting for the other system configurations if needed
 80004f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80004f8:	f000 fc9a 	bl	8000e30 <HAL_Delay>

  	HAL_CAN_Start(&hcan);
 80004fc:	4808      	ldr	r0, [pc, #32]	@ (8000520 <main+0x4c>)
 80004fe:	f001 fbb0 	bl	8001c62 <HAL_CAN_Start>
  	HAL_TIM_Base_Start_IT(&htim2); //timer 2 -> connection with dashboard
 8000502:	4808      	ldr	r0, [pc, #32]	@ (8000524 <main+0x50>)
 8000504:	f003 ff30 	bl	8004368 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim3); //timer 3 -> connection with auxiliary systems
 8000508:	4807      	ldr	r0, [pc, #28]	@ (8000528 <main+0x54>)
 800050a:	f003 ff2d 	bl	8004368 <HAL_TIM_Base_Start_IT>

  	HAL_Delay(90);
 800050e:	205a      	movs	r0, #90	@ 0x5a
 8000510:	f000 fc8e 	bl	8000e30 <HAL_Delay>

  	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //waiting message on FIFO0
 8000514:	2102      	movs	r1, #2
 8000516:	4802      	ldr	r0, [pc, #8]	@ (8000520 <main+0x4c>)
 8000518:	f001 fdd9 	bl	80020ce <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <main+0x48>
 8000520:	20000084 	.word	0x20000084
 8000524:	200000ac 	.word	0x200000ac
 8000528:	200000f8 	.word	0x200000f8

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b09e      	sub	sp, #120	@ 0x78
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000536:	2228      	movs	r2, #40	@ 0x28
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f004 fb50 	bl	8004be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000550:	463b      	mov	r3, r7
 8000552:	223c      	movs	r2, #60	@ 0x3c
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f004 fb42 	bl	8004be0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055c:	2301      	movs	r3, #1
 800055e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000560:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000564:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000566:	2301      	movs	r3, #1
 8000568:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056a:	2301      	movs	r3, #1
 800056c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000576:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000578:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800057c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fad8 	bl	8002b38 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800058e:	f000 f9f5 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	230f      	movs	r3, #15
 8000594:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000596:	2302      	movs	r3, #2
 8000598:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800059e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80005ac:	2102      	movs	r1, #2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fb00 	bl	8003bb4 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x92>
  {
    Error_Handler();
 80005ba:	f000 f9df 	bl	800097c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC34;
 80005be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005c2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80005c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ca:	463b      	mov	r3, r7
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 fcc3 	bl	8003f58 <HAL_RCCEx_PeriphCLKConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005d8:	f000 f9d0 	bl	800097c <Error_Handler>
  }
}
 80005dc:	bf00      	nop
 80005de:	3778      	adds	r7, #120	@ 0x78
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
 80005f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80005fa:	4b27      	ldr	r3, [pc, #156]	@ (8000698 <MX_ADC4_Init+0xb4>)
 80005fc:	4a27      	ldr	r2, [pc, #156]	@ (800069c <MX_ADC4_Init+0xb8>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000600:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <MX_ADC4_Init+0xb4>)
 8000602:	2200      	movs	r2, #0
 8000604:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000606:	4b24      	ldr	r3, [pc, #144]	@ (8000698 <MX_ADC4_Init+0xb4>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <MX_ADC4_Init+0xb4>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000612:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <MX_ADC4_Init+0xb4>)
 8000614:	2200      	movs	r2, #0
 8000616:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_ADC4_Init+0xb4>)
 800061a:	2200      	movs	r2, #0
 800061c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000620:	4b1d      	ldr	r3, [pc, #116]	@ (8000698 <MX_ADC4_Init+0xb4>)
 8000622:	2200      	movs	r2, #0
 8000624:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000626:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <MX_ADC4_Init+0xb4>)
 8000628:	2201      	movs	r2, #1
 800062a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062c:	4b1a      	ldr	r3, [pc, #104]	@ (8000698 <MX_ADC4_Init+0xb4>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8000632:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_ADC4_Init+0xb4>)
 8000634:	2201      	movs	r2, #1
 8000636:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000638:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <MX_ADC4_Init+0xb4>)
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000640:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <MX_ADC4_Init+0xb4>)
 8000642:	2204      	movs	r2, #4
 8000644:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <MX_ADC4_Init+0xb4>)
 8000648:	2200      	movs	r2, #0
 800064a:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <MX_ADC4_Init+0xb4>)
 800064e:	2200      	movs	r2, #0
 8000650:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000652:	4811      	ldr	r0, [pc, #68]	@ (8000698 <MX_ADC4_Init+0xb4>)
 8000654:	f000 fc10 	bl	8000e78 <HAL_ADC_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 800065e:	f000 f98d 	bl	800097c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000662:	2304      	movs	r3, #4
 8000664:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000666:	2301      	movs	r3, #1
 8000668:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800067a:	463b      	mov	r3, r7
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	@ (8000698 <MX_ADC4_Init+0xb4>)
 8000680:	f000 fdda 	bl	8001238 <HAL_ADC_ConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 800068a:	f000 f977 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000034 	.word	0x20000034
 800069c:	50000500 	.word	0x50000500

080006a0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80006a6:	4b26      	ldr	r3, [pc, #152]	@ (8000740 <MX_CAN_Init+0xa0>)
 80006a8:	4a26      	ldr	r2, [pc, #152]	@ (8000744 <MX_CAN_Init+0xa4>)
 80006aa:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80006ac:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <MX_CAN_Init+0xa0>)
 80006ae:	2212      	movs	r2, #18
 80006b0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80006b2:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <MX_CAN_Init+0xa0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006b8:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <MX_CAN_Init+0xa0>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 80006be:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <MX_CAN_Init+0xa0>)
 80006c0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006c4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <MX_CAN_Init+0xa0>)
 80006c8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80006cc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80006ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000740 <MX_CAN_Init+0xa0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <MX_CAN_Init+0xa0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80006da:	4b19      	ldr	r3, [pc, #100]	@ (8000740 <MX_CAN_Init+0xa0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80006e0:	4b17      	ldr	r3, [pc, #92]	@ (8000740 <MX_CAN_Init+0xa0>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80006e6:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <MX_CAN_Init+0xa0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80006ec:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <MX_CAN_Init+0xa0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80006f2:	4813      	ldr	r0, [pc, #76]	@ (8000740 <MX_CAN_Init+0xa0>)
 80006f4:	f001 f8f0 	bl	80018d8 <HAL_CAN_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80006fe:	f000 f93d 	bl	800097c <Error_Handler>

	/*
	 * Configure CAN filter such that the MCU accepts
	 * only messages from dashboard
	 */
	filterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000702:	2301      	movs	r3, #1
 8000704:	623b      	str	r3, [r7, #32]
	filterConfig.FilterBank = 10;
 8000706:	230a      	movs	r3, #10
 8000708:	617b      	str	r3, [r7, #20]
	filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = DASHBOARD_ID << 5;
 800070e:	f24e 0320 	movw	r3, #57376	@ 0xe020
 8000712:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = DASHBOARD_ID << 5;
 8000718:	f24e 0320 	movw	r3, #57376	@ 0xe020
 800071c:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000722:	2300      	movs	r3, #0
 8000724:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000726:	2301      	movs	r3, #1
 8000728:	61fb      	str	r3, [r7, #28]
	filterConfig.SlaveStartFilterBank = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 800072e:	463b      	mov	r3, r7
 8000730:	4619      	mov	r1, r3
 8000732:	4803      	ldr	r0, [pc, #12]	@ (8000740 <MX_CAN_Init+0xa0>)
 8000734:	f001 f9cb 	bl	8001ace <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	3728      	adds	r7, #40	@ 0x28
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000084 	.word	0x20000084
 8000744:	40006400 	.word	0x40006400

08000748 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000766:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <MX_TIM2_Init+0x98>)
 8000768:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800076c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 800076e:	4b1c      	ldr	r3, [pc, #112]	@ (80007e0 <MX_TIM2_Init+0x98>)
 8000770:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000774:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <MX_TIM2_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 566;
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_TIM2_Init+0x98>)
 800077e:	f240 2236 	movw	r2, #566	@ 0x236
 8000782:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <MX_TIM2_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_TIM2_Init+0x98>)
 800078c:	2280      	movs	r2, #128	@ 0x80
 800078e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000790:	4813      	ldr	r0, [pc, #76]	@ (80007e0 <MX_TIM2_Init+0x98>)
 8000792:	f003 fd91 	bl	80042b8 <HAL_TIM_Base_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800079c:	f000 f8ee 	bl	800097c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007a6:	f107 0310 	add.w	r3, r7, #16
 80007aa:	4619      	mov	r1, r3
 80007ac:	480c      	ldr	r0, [pc, #48]	@ (80007e0 <MX_TIM2_Init+0x98>)
 80007ae:	f003 ff47 	bl	8004640 <HAL_TIM_ConfigClockSource>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80007b8:	f000 f8e0 	bl	800097c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_TIM2_Init+0x98>)
 80007ca:	f004 f96b 	bl	8004aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80007d4:	f000 f8d2 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000ac 	.word	0x200000ac

080007e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ea:	f107 0310 	add.w	r3, r7, #16
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000802:	4b1e      	ldr	r3, [pc, #120]	@ (800087c <MX_TIM3_Init+0x98>)
 8000804:	4a1e      	ldr	r2, [pc, #120]	@ (8000880 <MX_TIM3_Init+0x9c>)
 8000806:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8000808:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <MX_TIM3_Init+0x98>)
 800080a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800080e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000810:	4b1a      	ldr	r3, [pc, #104]	@ (800087c <MX_TIM3_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 766;
 8000816:	4b19      	ldr	r3, [pc, #100]	@ (800087c <MX_TIM3_Init+0x98>)
 8000818:	f240 22fe 	movw	r2, #766	@ 0x2fe
 800081c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b17      	ldr	r3, [pc, #92]	@ (800087c <MX_TIM3_Init+0x98>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b15      	ldr	r3, [pc, #84]	@ (800087c <MX_TIM3_Init+0x98>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800082a:	4814      	ldr	r0, [pc, #80]	@ (800087c <MX_TIM3_Init+0x98>)
 800082c:	f003 fd44 	bl	80042b8 <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000836:	f000 f8a1 	bl	800097c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	480d      	ldr	r0, [pc, #52]	@ (800087c <MX_TIM3_Init+0x98>)
 8000848:	f003 fefa 	bl	8004640 <HAL_TIM_ConfigClockSource>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000852:	f000 f893 	bl	800097c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	4619      	mov	r1, r3
 8000862:	4806      	ldr	r0, [pc, #24]	@ (800087c <MX_TIM3_Init+0x98>)
 8000864:	f004 f91e 	bl	8004aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800086e:	f000 f885 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000f8 	.word	0x200000f8
 8000880:	40000400 	.word	0x40000400

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089a:	4b36      	ldr	r3, [pc, #216]	@ (8000974 <MX_GPIO_Init+0xf0>)
 800089c:	695b      	ldr	r3, [r3, #20]
 800089e:	4a35      	ldr	r2, [pc, #212]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008a4:	6153      	str	r3, [r2, #20]
 80008a6:	4b33      	ldr	r3, [pc, #204]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b30      	ldr	r3, [pc, #192]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	4a2f      	ldr	r2, [pc, #188]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008bc:	6153      	str	r3, [r2, #20]
 80008be:	4b2d      	ldr	r3, [pc, #180]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	4a29      	ldr	r2, [pc, #164]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008d4:	6153      	str	r3, [r2, #20]
 80008d6:	4b27      	ldr	r3, [pc, #156]	@ (8000974 <MX_GPIO_Init+0xf0>)
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAMERA_Pin|SAFE_STATE_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	21c0      	movs	r1, #192	@ 0xc0
 80008e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ea:	f002 f8f3 	bl	8002ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIGN_LEFT_Pin|SIGN_RIGHT_Pin|BRAKE_Pin|BACK_LIGHT_Pin
 80008ee:	2200      	movs	r2, #0
 80008f0:	f642 4107 	movw	r1, #11271	@ 0x2c07
 80008f4:	4820      	ldr	r0, [pc, #128]	@ (8000978 <MX_GPIO_Init+0xf4>)
 80008f6:	f002 f8ed 	bl	8002ad4 <HAL_GPIO_WritePin>
                          |FRONT_LIGHT_Pin|HORN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CAMERA_Pin SAFE_STATE_Pin */
  GPIO_InitStruct.Pin = CAMERA_Pin|SAFE_STATE_Pin;
 80008fa:	23c0      	movs	r3, #192	@ 0xc0
 80008fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	4619      	mov	r1, r3
 8000910:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000914:	f001 ff4c 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIGN_LEFT_Pin SIGN_RIGHT_Pin BRAKE_Pin BACK_LIGHT_Pin
                           FRONT_LIGHT_Pin HORN_Pin */
  GPIO_InitStruct.Pin = SIGN_LEFT_Pin|SIGN_RIGHT_Pin|BRAKE_Pin|BACK_LIGHT_Pin
 8000918:	f642 4307 	movw	r3, #11271	@ 0x2c07
 800091c:	60fb      	str	r3, [r7, #12]
                          |FRONT_LIGHT_Pin|HORN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	4619      	mov	r1, r3
 8000930:	4811      	ldr	r0, [pc, #68]	@ (8000978 <MX_GPIO_Init+0xf4>)
 8000932:	f001 ff3d 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FRONT_LIGHT_OFFLINE_Pin REVERSE_OFFLINE_Pin CAMERA_OFFLINE_Pin HORN_OFFLINE_Pin
                           SIGN_RIGHT_OFFLINE_Pin FAN_OFFLINE_Pin SIGN_LEFT_OFFLINE_Pin */
  GPIO_InitStruct.Pin = FRONT_LIGHT_OFFLINE_Pin|REVERSE_OFFLINE_Pin|CAMERA_OFFLINE_Pin|HORN_OFFLINE_Pin
 8000936:	f248 33f0 	movw	r3, #33776	@ 0x83f0
 800093a:	60fb      	str	r3, [r7, #12]
                          |SIGN_RIGHT_OFFLINE_Pin|FAN_OFFLINE_Pin|SIGN_LEFT_OFFLINE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	4619      	mov	r1, r3
 800094a:	480b      	ldr	r0, [pc, #44]	@ (8000978 <MX_GPIO_Init+0xf4>)
 800094c:	f001 ff30 	bl	80027b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BACK_LIGHT_OFFLINE_Pin ENABLE_OFFLINE_Pin BRAKE_OFFLINE_Pin */
  GPIO_InitStruct.Pin = BACK_LIGHT_OFFLINE_Pin|ENABLE_OFFLINE_Pin|BRAKE_OFFLINE_Pin;
 8000950:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000954:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	4619      	mov	r1, r3
 8000964:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000968:	f001 ff22 	bl	80027b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800096c:	bf00      	nop
 800096e:	3720      	adds	r7, #32
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40021000 	.word	0x40021000
 8000978:	48000400 	.word	0x48000400

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <Error_Handler+0x8>

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <HAL_MspInit+0x44>)
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	4a0e      	ldr	r2, [pc, #56]	@ (80009cc <HAL_MspInit+0x44>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6193      	str	r3, [r2, #24]
 800099a:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <HAL_MspInit+0x44>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <HAL_MspInit+0x44>)
 80009a8:	69db      	ldr	r3, [r3, #28]
 80009aa:	4a08      	ldr	r2, [pc, #32]	@ (80009cc <HAL_MspInit+0x44>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b0:	61d3      	str	r3, [r2, #28]
 80009b2:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <HAL_MspInit+0x44>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	@ 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC4)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a15      	ldr	r2, [pc, #84]	@ (8000a44 <HAL_ADC_MspInit+0x74>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d124      	bne.n	8000a3c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC4_MspInit 0 */

  /* USER CODE END ADC4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <HAL_ADC_MspInit+0x78>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	4a14      	ldr	r2, [pc, #80]	@ (8000a48 <HAL_ADC_MspInit+0x78>)
 80009f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80009fc:	6153      	str	r3, [r2, #20]
 80009fe:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_ADC_MspInit+0x78>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <HAL_ADC_MspInit+0x78>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000a48 <HAL_ADC_MspInit+0x78>)
 8000a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a14:	6153      	str	r3, [r2, #20]
 8000a16:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <HAL_ADC_MspInit+0x78>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**ADC4 GPIO Configuration
    PB14     ------> ADC4_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000a22:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <HAL_ADC_MspInit+0x7c>)
 8000a38:	f001 feba 	bl	80027b0 <HAL_GPIO_Init>

  /* USER CODE END ADC4_MspInit 1 */

  }

}
 8000a3c:	bf00      	nop
 8000a3e:	3728      	adds	r7, #40	@ 0x28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	50000500 	.word	0x50000500
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	48000400 	.word	0x48000400

08000a50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	@ 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ae0 <HAL_CAN_MspInit+0x90>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d131      	bne.n	8000ad6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <HAL_CAN_MspInit+0x94>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae4 <HAL_CAN_MspInit+0x94>)
 8000a78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a7c:	61d3      	str	r3, [r2, #28]
 8000a7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <HAL_CAN_MspInit+0x94>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <HAL_CAN_MspInit+0x94>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	4a15      	ldr	r2, [pc, #84]	@ (8000ae4 <HAL_CAN_MspInit+0x94>)
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a94:	6153      	str	r3, [r2, #20]
 8000a96:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <HAL_CAN_MspInit+0x94>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000aa2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000ab4:	2309      	movs	r3, #9
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ac2:	f001 fe75 	bl	80027b0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2014      	movs	r0, #20
 8000acc:	f001 fe39 	bl	8002742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000ad0:	2014      	movs	r0, #20
 8000ad2:	f001 fe52 	bl	800277a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	@ 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40006400 	.word	0x40006400
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000af8:	d114      	bne.n	8000b24 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000afa:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <HAL_TIM_Base_MspInit+0x78>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	4a18      	ldr	r2, [pc, #96]	@ (8000b60 <HAL_TIM_Base_MspInit+0x78>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	61d3      	str	r3, [r2, #28]
 8000b06:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <HAL_TIM_Base_MspInit+0x78>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	201c      	movs	r0, #28
 8000b18:	f001 fe13 	bl	8002742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b1c:	201c      	movs	r0, #28
 8000b1e:	f001 fe2c 	bl	800277a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b22:	e018      	b.n	8000b56 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0e      	ldr	r2, [pc, #56]	@ (8000b64 <HAL_TIM_Base_MspInit+0x7c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d113      	bne.n	8000b56 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <HAL_TIM_Base_MspInit+0x78>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <HAL_TIM_Base_MspInit+0x78>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <HAL_TIM_Base_MspInit+0x78>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	201d      	movs	r0, #29
 8000b4c:	f001 fdf9 	bl	8002742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b50:	201d      	movs	r0, #29
 8000b52:	f001 fe12 	bl	800277a <HAL_NVIC_EnableIRQ>
}
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40000400 	.word	0x40000400

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <NMI_Handler+0x4>

08000b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <MemManage_Handler+0x4>

08000b80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbe:	f000 f917 	bl	8000df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[1];

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000bce:	480c      	ldr	r0, [pc, #48]	@ (8000c00 <USB_LP_CAN_RX0_IRQHandler+0x38>)
 8000bd0:	f001 faa3 	bl	800211a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

	//get message from CAN, sent by DASHBOARD
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	1d3a      	adds	r2, r7, #4
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4809      	ldr	r0, [pc, #36]	@ (8000c00 <USB_LP_CAN_RX0_IRQHandler+0x38>)
 8000bdc:	f001 f955 	bl	8001e8a <HAL_CAN_GetRxMessage>

	//update the auxiliaries with the frame from DASHBOARD
	if(aux_offline_switch == OFF){
 8000be0:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <USB_LP_CAN_RX0_IRQHandler+0x3c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d106      	bne.n	8000bf6 <USB_LP_CAN_RX0_IRQHandler+0x2e>
		aux_pointer->state = RxData[0];
 8000be8:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <USB_LP_CAN_RX0_IRQHandler+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	783a      	ldrb	r2, [r7, #0]
 8000bee:	701a      	strb	r2, [r3, #0]
		dashboard_activity = 0;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <USB_LP_CAN_RX0_IRQHandler+0x44>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
	}


  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	3720      	adds	r7, #32
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000084 	.word	0x20000084
 8000c04:	20000149 	.word	0x20000149
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	2000014a 	.word	0x2000014a

08000c10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c14:	481c      	ldr	r0, [pc, #112]	@ (8000c88 <TIM2_IRQHandler+0x78>)
 8000c16:	f003 fc11 	bl	800443c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

	aux_offline_switch = HAL_GPIO_ReadPin(GPIOA, ENABLE_OFFLINE_Pin);
 8000c1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c22:	f001 ff3f 	bl	8002aa4 <HAL_GPIO_ReadPin>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b18      	ldr	r3, [pc, #96]	@ (8000c8c <TIM2_IRQHandler+0x7c>)
 8000c2c:	701a      	strb	r2, [r3, #0]

	if (dashboard_activity <= 100 && aux_offline_switch == OFF) {
 8000c2e:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <TIM2_IRQHandler+0x80>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b64      	cmp	r3, #100	@ 0x64
 8000c34:	d80a      	bhi.n	8000c4c <TIM2_IRQHandler+0x3c>
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <TIM2_IRQHandler+0x7c>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d106      	bne.n	8000c4c <TIM2_IRQHandler+0x3c>
		dashboard_activity++;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	@ (8000c90 <TIM2_IRQHandler+0x80>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	3301      	adds	r3, #1
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <TIM2_IRQHandler+0x80>)
 8000c48:	701a      	strb	r2, [r3, #0]
 8000c4a:	e01b      	b.n	8000c84 <TIM2_IRQHandler+0x74>
	} else if (dashboard_activity > 100 && aux_offline_switch == OFF) {
 8000c4c:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <TIM2_IRQHandler+0x80>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b64      	cmp	r3, #100	@ 0x64
 8000c52:	d908      	bls.n	8000c66 <TIM2_IRQHandler+0x56>
 8000c54:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <TIM2_IRQHandler+0x7c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d104      	bne.n	8000c66 <TIM2_IRQHandler+0x56>
		aux_pointer->state = SAFE_STATE;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c94 <TIM2_IRQHandler+0x84>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e00e      	b.n	8000c84 <TIM2_IRQHandler+0x74>
	} else if (aux_offline_switch == ON) {
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <TIM2_IRQHandler+0x7c>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d10a      	bne.n	8000c84 <TIM2_IRQHandler+0x74>
		Update_Offline_Mode(aux_offline);
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <TIM2_IRQHandler+0x88>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fbc2 	bl	80003fc <Update_Offline_Mode>
		Update_Auxiliary_System(aux_offline);
 8000c78:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <TIM2_IRQHandler+0x88>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff faa3 	bl	80001c8 <Update_Auxiliary_System>
	}

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c82:	e7ff      	b.n	8000c84 <TIM2_IRQHandler+0x74>
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200000ac 	.word	0x200000ac
 8000c8c:	20000149 	.word	0x20000149
 8000c90:	2000014a 	.word	0x2000014a
 8000c94:	20000000 	.word	0x20000000
 8000c98:	20000004 	.word	0x20000004

08000c9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9e:	b089      	sub	sp, #36	@ 0x24
 8000ca0:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ca2:	480e      	ldr	r0, [pc, #56]	@ (8000cdc <TIM3_IRQHandler+0x40>)
 8000ca4:	f003 fbca 	bl	800443c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

	Update_Auxiliary_System(aux_pointer);
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <TIM3_IRQHandler+0x44>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fa8b 	bl	80001c8 <Update_Auxiliary_System>

	//Transmit Activity Check CAN frame
	Send_Auxiliary_State_CAN(hcan, aux_activity);
 8000cb2:	4e0c      	ldr	r6, [pc, #48]	@ (8000ce4 <TIM3_IRQHandler+0x48>)
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <TIM3_IRQHandler+0x4c>)
 8000cb6:	9306      	str	r3, [sp, #24]
 8000cb8:	466d      	mov	r5, sp
 8000cba:	f106 0410 	add.w	r4, r6, #16
 8000cbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000cce:	f7ff fb71 	bl	80003b4 <Send_Auxiliary_State_CAN>

  /* USER CODE END TIM3_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3704      	adds	r7, #4
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000f8 	.word	0x200000f8
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000084 	.word	0x20000084
 8000ce8:	2000014c 	.word	0x2000014c

08000cec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <SystemInit+0x20>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf6:	4a05      	ldr	r2, [pc, #20]	@ (8000d0c <SystemInit+0x20>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d48 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d14:	f7ff ffea 	bl	8000cec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d18:	480c      	ldr	r0, [pc, #48]	@ (8000d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1a:	490d      	ldr	r1, [pc, #52]	@ (8000d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <LoopForever+0xe>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d20:	e002      	b.n	8000d28 <LoopCopyDataInit>

08000d22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d26:	3304      	adds	r3, #4

08000d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d2c:	d3f9      	bcc.n	8000d22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d30:	4c0a      	ldr	r4, [pc, #40]	@ (8000d5c <LoopForever+0x16>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d34:	e001      	b.n	8000d3a <LoopFillZerobss>

08000d36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d38:	3204      	adds	r2, #4

08000d3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d3c:	d3fb      	bcc.n	8000d36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f003 ff57 	bl	8004bf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d42:	f7ff fbc7 	bl	80004d4 <main>

08000d46 <LoopForever>:

LoopForever:
    b LoopForever
 8000d46:	e7fe      	b.n	8000d46 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d48:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d54:	08004c88 	.word	0x08004c88
  ldr r2, =_sbss
 8000d58:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d5c:	20000154 	.word	0x20000154

08000d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC1_2_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d68:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <HAL_Init+0x28>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a07      	ldr	r2, [pc, #28]	@ (8000d8c <HAL_Init+0x28>)
 8000d6e:	f043 0310 	orr.w	r3, r3, #16
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d74:	2003      	movs	r0, #3
 8000d76:	f001 fcd9 	bl	800272c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7a:	200f      	movs	r0, #15
 8000d7c:	f000 f808 	bl	8000d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d80:	f7ff fe02 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40022000 	.word	0x40022000

08000d90 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d98:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <HAL_InitTick+0x54>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_InitTick+0x58>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 fcf1 	bl	8002796 <HAL_SYSTICK_Config>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00e      	b.n	8000ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	d80a      	bhi.n	8000dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	f001 fcb9 	bl	8002742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd0:	4a06      	ldr	r2, [pc, #24]	@ (8000dec <HAL_InitTick+0x5c>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000010 	.word	0x20000010
 8000dec:	2000000c 	.word	0x2000000c

08000df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000010 	.word	0x20000010
 8000e14:	20000150 	.word	0x20000150

08000e18 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e1c:	4b03      	ldr	r3, [pc, #12]	@ (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000150 	.word	0x20000150

08000e30 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e38:	f7ff ffee 	bl	8000e18 <HAL_GetTick>
 8000e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e48:	d005      	beq.n	8000e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e74 <HAL_Delay+0x44>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e56:	bf00      	nop
 8000e58:	f7ff ffde 	bl	8000e18 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d8f7      	bhi.n	8000e58 <HAL_Delay+0x28>
  {
  }
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000010 	.word	0x20000010

08000e78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b09a      	sub	sp, #104	@ 0x68
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d101      	bne.n	8000e98 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e1c9      	b.n	800122c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	691b      	ldr	r3, [r3, #16]
 8000e9c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	f003 0310 	and.w	r3, r3, #16
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d176      	bne.n	8000f98 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d152      	bne.n	8000f58 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff fd7f 	bl	80009d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d13b      	bne.n	8000f58 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 fc93 	bl	800180c <ADC_Disable>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef0:	f003 0310 	and.w	r3, r3, #16
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d12f      	bne.n	8000f58 <HAL_ADC_Init+0xe0>
 8000ef8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d12b      	bne.n	8000f58 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f04:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f08:	f023 0302 	bic.w	r3, r3, #2
 8000f0c:	f043 0202 	orr.w	r2, r3, #2
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000f22:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f32:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f34:	4b86      	ldr	r3, [pc, #536]	@ (8001150 <HAL_ADC_Init+0x2d8>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a86      	ldr	r2, [pc, #536]	@ (8001154 <HAL_ADC_Init+0x2dc>)
 8000f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3e:	0c9a      	lsrs	r2, r3, #18
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f4a:	e002      	b.n	8000f52 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f9      	bne.n	8000f4c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d007      	beq.n	8000f76 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f74:	d110      	bne.n	8000f98 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	f023 0312 	bic.w	r3, r3, #18
 8000f7e:	f043 0210 	orr.w	r2, r3, #16
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	f043 0201 	orr.w	r2, r3, #1
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9c:	f003 0310 	and.w	r3, r3, #16
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f040 8136 	bne.w	8001212 <HAL_ADC_Init+0x39a>
 8000fa6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f040 8131 	bne.w	8001212 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f040 8129 	bne.w	8001212 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000fc8:	f043 0202 	orr.w	r2, r3, #2
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fd8:	d004      	beq.n	8000fe4 <HAL_ADC_Init+0x16c>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a5e      	ldr	r2, [pc, #376]	@ (8001158 <HAL_ADC_Init+0x2e0>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d101      	bne.n	8000fe8 <HAL_ADC_Init+0x170>
 8000fe4:	4b5d      	ldr	r3, [pc, #372]	@ (800115c <HAL_ADC_Init+0x2e4>)
 8000fe6:	e000      	b.n	8000fea <HAL_ADC_Init+0x172>
 8000fe8:	4b5d      	ldr	r3, [pc, #372]	@ (8001160 <HAL_ADC_Init+0x2e8>)
 8000fea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ff4:	d102      	bne.n	8000ffc <HAL_ADC_Init+0x184>
 8000ff6:	4b58      	ldr	r3, [pc, #352]	@ (8001158 <HAL_ADC_Init+0x2e0>)
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	e01a      	b.n	8001032 <HAL_ADC_Init+0x1ba>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a55      	ldr	r2, [pc, #340]	@ (8001158 <HAL_ADC_Init+0x2e0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d103      	bne.n	800100e <HAL_ADC_Init+0x196>
 8001006:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	e011      	b.n	8001032 <HAL_ADC_Init+0x1ba>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a54      	ldr	r2, [pc, #336]	@ (8001164 <HAL_ADC_Init+0x2ec>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d102      	bne.n	800101e <HAL_ADC_Init+0x1a6>
 8001018:	4b53      	ldr	r3, [pc, #332]	@ (8001168 <HAL_ADC_Init+0x2f0>)
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	e009      	b.n	8001032 <HAL_ADC_Init+0x1ba>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a51      	ldr	r2, [pc, #324]	@ (8001168 <HAL_ADC_Init+0x2f0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d102      	bne.n	800102e <HAL_ADC_Init+0x1b6>
 8001028:	4b4e      	ldr	r3, [pc, #312]	@ (8001164 <HAL_ADC_Init+0x2ec>)
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	e001      	b.n	8001032 <HAL_ADC_Init+0x1ba>
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b01      	cmp	r3, #1
 800103e:	d108      	bne.n	8001052 <HAL_ADC_Init+0x1da>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b01      	cmp	r3, #1
 800104c:	d101      	bne.n	8001052 <HAL_ADC_Init+0x1da>
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <HAL_ADC_Init+0x1dc>
 8001052:	2300      	movs	r3, #0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d11c      	bne.n	8001092 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001058:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800105a:	2b00      	cmp	r3, #0
 800105c:	d010      	beq.n	8001080 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	2b01      	cmp	r3, #1
 8001068:	d107      	bne.n	800107a <HAL_ADC_Init+0x202>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b01      	cmp	r3, #1
 8001074:	d101      	bne.n	800107a <HAL_ADC_Init+0x202>
 8001076:	2301      	movs	r3, #1
 8001078:	e000      	b.n	800107c <HAL_ADC_Init+0x204>
 800107a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800107c:	2b00      	cmp	r3, #0
 800107e:	d108      	bne.n	8001092 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001080:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	431a      	orrs	r2, r3
 800108e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001090:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7e5b      	ldrb	r3, [r3, #25]
 8001096:	035b      	lsls	r3, r3, #13
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800109c:	2a01      	cmp	r2, #1
 800109e:	d002      	beq.n	80010a6 <HAL_ADC_Init+0x22e>
 80010a0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010a4:	e000      	b.n	80010a8 <HAL_ADC_Init+0x230>
 80010a6:	2200      	movs	r2, #0
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010b8:	4313      	orrs	r3, r2
 80010ba:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d11b      	bne.n	80010fe <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	7e5b      	ldrb	r3, [r3, #25]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d2:	3b01      	subs	r3, #1
 80010d4:	045a      	lsls	r2, r3, #17
 80010d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80010d8:	4313      	orrs	r3, r2
 80010da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010de:	663b      	str	r3, [r7, #96]	@ 0x60
 80010e0:	e00d      	b.n	80010fe <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80010ea:	f043 0220 	orr.w	r2, r3, #32
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f6:	f043 0201 	orr.w	r2, r3, #1
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001102:	2b01      	cmp	r3, #1
 8001104:	d03a      	beq.n	800117c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a16      	ldr	r2, [pc, #88]	@ (8001164 <HAL_ADC_Init+0x2ec>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d004      	beq.n	800111a <HAL_ADC_Init+0x2a2>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a14      	ldr	r2, [pc, #80]	@ (8001168 <HAL_ADC_Init+0x2f0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d128      	bne.n	800116c <HAL_ADC_Init+0x2f4>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800111e:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001122:	d012      	beq.n	800114a <HAL_ADC_Init+0x2d2>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800112c:	d00a      	beq.n	8001144 <HAL_ADC_Init+0x2cc>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001132:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001136:	d002      	beq.n	800113e <HAL_ADC_Init+0x2c6>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800113c:	e018      	b.n	8001170 <HAL_ADC_Init+0x2f8>
 800113e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001142:	e015      	b.n	8001170 <HAL_ADC_Init+0x2f8>
 8001144:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001148:	e012      	b.n	8001170 <HAL_ADC_Init+0x2f8>
 800114a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800114e:	e00f      	b.n	8001170 <HAL_ADC_Init+0x2f8>
 8001150:	20000008 	.word	0x20000008
 8001154:	431bde83 	.word	0x431bde83
 8001158:	50000100 	.word	0x50000100
 800115c:	50000300 	.word	0x50000300
 8001160:	50000700 	.word	0x50000700
 8001164:	50000400 	.word	0x50000400
 8001168:	50000500 	.word	0x50000500
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001174:	4313      	orrs	r3, r2
 8001176:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001178:	4313      	orrs	r3, r2
 800117a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b00      	cmp	r3, #0
 8001188:	d114      	bne.n	80011b4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001198:	f023 0302 	bic.w	r3, r3, #2
 800119c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7e1b      	ldrb	r3, [r3, #24]
 80011a2:	039a      	lsls	r2, r3, #14
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	4313      	orrs	r3, r2
 80011ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80011b0:	4313      	orrs	r3, r2
 80011b2:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001234 <HAL_ADC_Init+0x3bc>)
 80011bc:	4013      	ands	r3, r2
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80011c4:	430b      	orrs	r3, r1
 80011c6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d10c      	bne.n	80011ea <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f023 010f 	bic.w	r1, r3, #15
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	1e5a      	subs	r2, r3, #1
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	430a      	orrs	r2, r1
 80011e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80011e8:	e007      	b.n	80011fa <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 020f 	bic.w	r2, r2, #15
 80011f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001204:	f023 0303 	bic.w	r3, r3, #3
 8001208:	f043 0201 	orr.w	r2, r3, #1
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001210:	e00a      	b.n	8001228 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	f023 0312 	bic.w	r3, r3, #18
 800121a:	f043 0210 	orr.w	r2, r3, #16
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001222:	2301      	movs	r3, #1
 8001224:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001228:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800122c:	4618      	mov	r0, r3
 800122e:	3768      	adds	r7, #104	@ 0x68
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	fff0c007 	.word	0xfff0c007

08001238 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001238:	b480      	push	{r7}
 800123a:	b09b      	sub	sp, #108	@ 0x6c
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001252:	2b01      	cmp	r3, #1
 8001254:	d101      	bne.n	800125a <HAL_ADC_ConfigChannel+0x22>
 8001256:	2302      	movs	r3, #2
 8001258:	e2c8      	b.n	80017ec <HAL_ADC_ConfigChannel+0x5b4>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2201      	movs	r2, #1
 800125e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	2b00      	cmp	r3, #0
 800126e:	f040 82ac 	bne.w	80017ca <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b04      	cmp	r3, #4
 8001278:	d81c      	bhi.n	80012b4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	461a      	mov	r2, r3
 800128e:	231f      	movs	r3, #31
 8001290:	4093      	lsls	r3, r2
 8001292:	43db      	mvns	r3, r3
 8001294:	4019      	ands	r1, r3
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	6818      	ldr	r0, [r3, #0]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	fa00 f203 	lsl.w	r2, r0, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80012b2:	e063      	b.n	800137c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b09      	cmp	r3, #9
 80012ba:	d81e      	bhi.n	80012fa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	4613      	mov	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4413      	add	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	3b1e      	subs	r3, #30
 80012d0:	221f      	movs	r2, #31
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	4019      	ands	r1, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	6818      	ldr	r0, [r3, #0]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	3b1e      	subs	r3, #30
 80012ec:	fa00 f203 	lsl.w	r2, r0, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80012f8:	e040      	b.n	800137c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b0e      	cmp	r3, #14
 8001300:	d81e      	bhi.n	8001340 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	3b3c      	subs	r3, #60	@ 0x3c
 8001316:	221f      	movs	r2, #31
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	4019      	ands	r1, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	6818      	ldr	r0, [r3, #0]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	4613      	mov	r3, r2
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	4413      	add	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	3b3c      	subs	r3, #60	@ 0x3c
 8001332:	fa00 f203 	lsl.w	r2, r0, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	639a      	str	r2, [r3, #56]	@ 0x38
 800133e:	e01d      	b.n	800137c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	3b5a      	subs	r3, #90	@ 0x5a
 8001354:	221f      	movs	r2, #31
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	4019      	ands	r1, r3
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	3b5a      	subs	r3, #90	@ 0x5a
 8001370:	fa00 f203 	lsl.w	r2, r0, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	430a      	orrs	r2, r1
 800137a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 80e5 	bne.w	8001556 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b09      	cmp	r3, #9
 8001392:	d91c      	bls.n	80013ce <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6999      	ldr	r1, [r3, #24]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	3b1e      	subs	r3, #30
 80013a6:	2207      	movs	r2, #7
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	4019      	ands	r1, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	6898      	ldr	r0, [r3, #8]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	3b1e      	subs	r3, #30
 80013c0:	fa00 f203 	lsl.w	r2, r0, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	619a      	str	r2, [r3, #24]
 80013cc:	e019      	b.n	8001402 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6959      	ldr	r1, [r3, #20]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	2207      	movs	r2, #7
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	4019      	ands	r1, r3
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	6898      	ldr	r0, [r3, #8]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	fa00 f203 	lsl.w	r2, r0, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	695a      	ldr	r2, [r3, #20]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	08db      	lsrs	r3, r3, #3
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	3b01      	subs	r3, #1
 8001420:	2b03      	cmp	r3, #3
 8001422:	d84f      	bhi.n	80014c4 <HAL_ADC_ConfigChannel+0x28c>
 8001424:	a201      	add	r2, pc, #4	@ (adr r2, 800142c <HAL_ADC_ConfigChannel+0x1f4>)
 8001426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142a:	bf00      	nop
 800142c:	0800143d 	.word	0x0800143d
 8001430:	0800145f 	.word	0x0800145f
 8001434:	08001481 	.word	0x08001481
 8001438:	080014a3 	.word	0x080014a3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001442:	4b99      	ldr	r3, [pc, #612]	@ (80016a8 <HAL_ADC_ConfigChannel+0x470>)
 8001444:	4013      	ands	r3, r2
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	0691      	lsls	r1, r2, #26
 800144c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800144e:	430a      	orrs	r2, r1
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800145a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800145c:	e07b      	b.n	8001556 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001464:	4b90      	ldr	r3, [pc, #576]	@ (80016a8 <HAL_ADC_ConfigChannel+0x470>)
 8001466:	4013      	ands	r3, r2
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	0691      	lsls	r1, r2, #26
 800146e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001470:	430a      	orrs	r2, r1
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800147c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800147e:	e06a      	b.n	8001556 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001486:	4b88      	ldr	r3, [pc, #544]	@ (80016a8 <HAL_ADC_ConfigChannel+0x470>)
 8001488:	4013      	ands	r3, r2
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	6812      	ldr	r2, [r2, #0]
 800148e:	0691      	lsls	r1, r2, #26
 8001490:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001492:	430a      	orrs	r2, r1
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800149e:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014a0:	e059      	b.n	8001556 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80014a8:	4b7f      	ldr	r3, [pc, #508]	@ (80016a8 <HAL_ADC_ConfigChannel+0x470>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	0691      	lsls	r1, r2, #26
 80014b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014b4:	430a      	orrs	r2, r1
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80014c0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014c2:	e048      	b.n	8001556 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	069b      	lsls	r3, r3, #26
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d107      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80014e6:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	069b      	lsls	r3, r3, #26
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d107      	bne.n	800150c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800150a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001512:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	069b      	lsls	r3, r3, #26
 800151c:	429a      	cmp	r2, r3
 800151e:	d107      	bne.n	8001530 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800152e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001536:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	069b      	lsls	r3, r3, #26
 8001540:	429a      	cmp	r2, r3
 8001542:	d107      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001552:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001554:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b01      	cmp	r3, #1
 8001562:	d108      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x33e>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x33e>
 8001572:	2301      	movs	r3, #1
 8001574:	e000      	b.n	8001578 <HAL_ADC_ConfigChannel+0x340>
 8001576:	2300      	movs	r3, #0
 8001578:	2b00      	cmp	r3, #0
 800157a:	f040 8131 	bne.w	80017e0 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d00f      	beq.n	80015a6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2201      	movs	r2, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43da      	mvns	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	400a      	ands	r2, r1
 80015a0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80015a4:	e049      	b.n	800163a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2201      	movs	r2, #1
 80015b4:	409a      	lsls	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b09      	cmp	r3, #9
 80015c6:	d91c      	bls.n	8001602 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6999      	ldr	r1, [r3, #24]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	3b1b      	subs	r3, #27
 80015da:	2207      	movs	r2, #7
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	4019      	ands	r1, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	6898      	ldr	r0, [r3, #8]
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	3b1b      	subs	r3, #27
 80015f4:	fa00 f203 	lsl.w	r2, r0, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	619a      	str	r2, [r3, #24]
 8001600:	e01b      	b.n	800163a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6959      	ldr	r1, [r3, #20]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	2207      	movs	r2, #7
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43db      	mvns	r3, r3
 800161c:	4019      	ands	r1, r3
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	6898      	ldr	r0, [r3, #8]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	4613      	mov	r3, r2
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4413      	add	r3, r2
 800162e:	fa00 f203 	lsl.w	r2, r0, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001642:	d004      	beq.n	800164e <HAL_ADC_ConfigChannel+0x416>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a18      	ldr	r2, [pc, #96]	@ (80016ac <HAL_ADC_ConfigChannel+0x474>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d101      	bne.n	8001652 <HAL_ADC_ConfigChannel+0x41a>
 800164e:	4b18      	ldr	r3, [pc, #96]	@ (80016b0 <HAL_ADC_ConfigChannel+0x478>)
 8001650:	e000      	b.n	8001654 <HAL_ADC_ConfigChannel+0x41c>
 8001652:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <HAL_ADC_ConfigChannel+0x47c>)
 8001654:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b10      	cmp	r3, #16
 800165c:	d105      	bne.n	800166a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800165e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001666:	2b00      	cmp	r3, #0
 8001668:	d015      	beq.n	8001696 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800166e:	2b11      	cmp	r3, #17
 8001670:	d105      	bne.n	800167e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00b      	beq.n	8001696 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001682:	2b12      	cmp	r3, #18
 8001684:	f040 80ac 	bne.w	80017e0 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001688:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001690:	2b00      	cmp	r3, #0
 8001692:	f040 80a5 	bne.w	80017e0 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800169e:	d10b      	bne.n	80016b8 <HAL_ADC_ConfigChannel+0x480>
 80016a0:	4b02      	ldr	r3, [pc, #8]	@ (80016ac <HAL_ADC_ConfigChannel+0x474>)
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	e023      	b.n	80016ee <HAL_ADC_ConfigChannel+0x4b6>
 80016a6:	bf00      	nop
 80016a8:	83fff000 	.word	0x83fff000
 80016ac:	50000100 	.word	0x50000100
 80016b0:	50000300 	.word	0x50000300
 80016b4:	50000700 	.word	0x50000700
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a4e      	ldr	r2, [pc, #312]	@ (80017f8 <HAL_ADC_ConfigChannel+0x5c0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d103      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x492>
 80016c2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	e011      	b.n	80016ee <HAL_ADC_ConfigChannel+0x4b6>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a4b      	ldr	r2, [pc, #300]	@ (80017fc <HAL_ADC_ConfigChannel+0x5c4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d102      	bne.n	80016da <HAL_ADC_ConfigChannel+0x4a2>
 80016d4:	4b4a      	ldr	r3, [pc, #296]	@ (8001800 <HAL_ADC_ConfigChannel+0x5c8>)
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	e009      	b.n	80016ee <HAL_ADC_ConfigChannel+0x4b6>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a48      	ldr	r2, [pc, #288]	@ (8001800 <HAL_ADC_ConfigChannel+0x5c8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d102      	bne.n	80016ea <HAL_ADC_ConfigChannel+0x4b2>
 80016e4:	4b45      	ldr	r3, [pc, #276]	@ (80017fc <HAL_ADC_ConfigChannel+0x5c4>)
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	e001      	b.n	80016ee <HAL_ADC_ConfigChannel+0x4b6>
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d108      	bne.n	800170e <HAL_ADC_ConfigChannel+0x4d6>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_ADC_ConfigChannel+0x4d6>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_ADC_ConfigChannel+0x4d8>
 800170e:	2300      	movs	r3, #0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d150      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001714:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001716:	2b00      	cmp	r3, #0
 8001718:	d010      	beq.n	800173c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b01      	cmp	r3, #1
 8001724:	d107      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x4fe>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_ADC_ConfigChannel+0x4fe>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_ADC_ConfigChannel+0x500>
 8001736:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001738:	2b00      	cmp	r3, #0
 800173a:	d13c      	bne.n	80017b6 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b10      	cmp	r3, #16
 8001742:	d11d      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x548>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800174c:	d118      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800174e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001758:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800175a:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <HAL_ADC_ConfigChannel+0x5cc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a2a      	ldr	r2, [pc, #168]	@ (8001808 <HAL_ADC_ConfigChannel+0x5d0>)
 8001760:	fba2 2303 	umull	r2, r3, r2, r3
 8001764:	0c9a      	lsrs	r2, r3, #18
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001770:	e002      	b.n	8001778 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	3b01      	subs	r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f9      	bne.n	8001772 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800177e:	e02e      	b.n	80017de <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b11      	cmp	r3, #17
 8001786:	d10b      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x568>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001790:	d106      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800179a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800179c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800179e:	e01e      	b.n	80017de <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b12      	cmp	r3, #18
 80017a6:	d11a      	bne.n	80017de <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80017a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80017b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017b2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017b4:	e013      	b.n	80017de <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	f043 0220 	orr.w	r2, r3, #32
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80017c8:	e00a      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	f043 0220 	orr.w	r2, r3, #32
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80017dc:	e000      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017de:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80017e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	376c      	adds	r7, #108	@ 0x6c
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	50000100 	.word	0x50000100
 80017fc:	50000400 	.word	0x50000400
 8001800:	50000500 	.word	0x50000500
 8001804:	20000008 	.word	0x20000008
 8001808:	431bde83 	.word	0x431bde83

0800180c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d108      	bne.n	8001838 <ADC_Disable+0x2c>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <ADC_Disable+0x2c>
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <ADC_Disable+0x2e>
 8001838:	2300      	movs	r3, #0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d047      	beq.n	80018ce <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 030d 	and.w	r3, r3, #13
 8001848:	2b01      	cmp	r3, #1
 800184a:	d10f      	bne.n	800186c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0202 	orr.w	r2, r2, #2
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2203      	movs	r2, #3
 8001862:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001864:	f7ff fad8 	bl	8000e18 <HAL_GetTick>
 8001868:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800186a:	e029      	b.n	80018c0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001870:	f043 0210 	orr.w	r2, r3, #16
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187c:	f043 0201 	orr.w	r2, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e023      	b.n	80018d0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001888:	f7ff fac6 	bl	8000e18 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d914      	bls.n	80018c0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d10d      	bne.n	80018c0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a8:	f043 0210 	orr.w	r2, r3, #16
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b4:	f043 0201 	orr.w	r2, r3, #1
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e007      	b.n	80018d0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d0dc      	beq.n	8001888 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0ed      	b.n	8001ac6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff f8aa 	bl	8000a50 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800190c:	f7ff fa84 	bl	8000e18 <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001912:	e012      	b.n	800193a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001914:	f7ff fa80 	bl	8000e18 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b0a      	cmp	r3, #10
 8001920:	d90b      	bls.n	800193a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001926:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2205      	movs	r2, #5
 8001932:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e0c5      	b.n	8001ac6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0e5      	beq.n	8001914 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0202 	bic.w	r2, r2, #2
 8001956:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001958:	f7ff fa5e 	bl	8000e18 <HAL_GetTick>
 800195c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800195e:	e012      	b.n	8001986 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001960:	f7ff fa5a 	bl	8000e18 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b0a      	cmp	r3, #10
 800196c:	d90b      	bls.n	8001986 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2205      	movs	r2, #5
 800197e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e09f      	b.n	8001ac6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1e5      	bne.n	8001960 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7e1b      	ldrb	r3, [r3, #24]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d108      	bne.n	80019ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e007      	b.n	80019be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7e5b      	ldrb	r3, [r3, #25]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d108      	bne.n	80019d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	e007      	b.n	80019e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7e9b      	ldrb	r3, [r3, #26]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d108      	bne.n	8001a02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0220 	orr.w	r2, r2, #32
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e007      	b.n	8001a12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f022 0220 	bic.w	r2, r2, #32
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7edb      	ldrb	r3, [r3, #27]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d108      	bne.n	8001a2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0210 	bic.w	r2, r2, #16
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	e007      	b.n	8001a3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0210 	orr.w	r2, r2, #16
 8001a3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7f1b      	ldrb	r3, [r3, #28]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d108      	bne.n	8001a56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0208 	orr.w	r2, r2, #8
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e007      	b.n	8001a66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0208 	bic.w	r2, r2, #8
 8001a64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	7f5b      	ldrb	r3, [r3, #29]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d108      	bne.n	8001a80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0204 	orr.w	r2, r2, #4
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	e007      	b.n	8001a90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0204 	bic.w	r2, r2, #4
 8001a8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	ea42 0103 	orr.w	r1, r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	1e5a      	subs	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b087      	sub	sp, #28
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ae6:	7cfb      	ldrb	r3, [r7, #19]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d003      	beq.n	8001af4 <HAL_CAN_ConfigFilter+0x26>
 8001aec:	7cfb      	ldrb	r3, [r7, #19]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	f040 80aa 	bne.w	8001c48 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001afa:	f043 0201 	orr.w	r2, r3, #1
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	401a      	ands	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d123      	bne.n	8001b76 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	401a      	ands	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b50:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3248      	adds	r2, #72	@ 0x48
 8001b56:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b6a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b6c:	6979      	ldr	r1, [r7, #20]
 8001b6e:	3348      	adds	r3, #72	@ 0x48
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d122      	bne.n	8001bc4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	431a      	orrs	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b9e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	3248      	adds	r2, #72	@ 0x48
 8001ba4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bb8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001bba:	6979      	ldr	r1, [r7, #20]
 8001bbc:	3348      	adds	r3, #72	@ 0x48
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d109      	bne.n	8001be0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001bde:	e007      	b.n	8001bf0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	431a      	orrs	r2, r3
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d109      	bne.n	8001c0c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	401a      	ands	r2, r3
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001c0a:	e007      	b.n	8001c1c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	431a      	orrs	r2, r3
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d107      	bne.n	8001c34 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c3a:	f023 0201 	bic.w	r2, r3, #1
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e006      	b.n	8001c56 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
  }
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	371c      	adds	r7, #28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b084      	sub	sp, #16
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d12e      	bne.n	8001cd4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0201 	bic.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c8e:	f7ff f8c3 	bl	8000e18 <HAL_GetTick>
 8001c92:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c94:	e012      	b.n	8001cbc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c96:	f7ff f8bf 	bl	8000e18 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b0a      	cmp	r3, #10
 8001ca2:	d90b      	bls.n	8001cbc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2205      	movs	r2, #5
 8001cb4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e012      	b.n	8001ce2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1e5      	bne.n	8001c96 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e006      	b.n	8001ce2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
  }
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b089      	sub	sp, #36	@ 0x24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cfe:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d08:	7ffb      	ldrb	r3, [r7, #31]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d003      	beq.n	8001d16 <HAL_CAN_AddTxMessage+0x2c>
 8001d0e:	7ffb      	ldrb	r3, [r7, #31]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	f040 80ad 	bne.w	8001e70 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10a      	bne.n	8001d36 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d105      	bne.n	8001d36 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8095 	beq.w	8001e60 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	0e1b      	lsrs	r3, r3, #24
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d40:	2201      	movs	r2, #1
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	409a      	lsls	r2, r3
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10d      	bne.n	8001d6e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d5c:	68f9      	ldr	r1, [r7, #12]
 8001d5e:	6809      	ldr	r1, [r1, #0]
 8001d60:	431a      	orrs	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	3318      	adds	r3, #24
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	440b      	add	r3, r1
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	e00f      	b.n	8001d8e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d78:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d7e:	68f9      	ldr	r1, [r7, #12]
 8001d80:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d82:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3318      	adds	r3, #24
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	440b      	add	r3, r1
 8001d8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	691a      	ldr	r2, [r3, #16]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3318      	adds	r3, #24
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	440b      	add	r3, r1
 8001d9e:	3304      	adds	r3, #4
 8001da0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	7d1b      	ldrb	r3, [r3, #20]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d111      	bne.n	8001dce <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3318      	adds	r3, #24
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	4413      	add	r3, r2
 8001db6:	3304      	adds	r3, #4
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	6811      	ldr	r1, [r2, #0]
 8001dbe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	3318      	adds	r3, #24
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	440b      	add	r3, r1
 8001dca:	3304      	adds	r3, #4
 8001dcc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3307      	adds	r3, #7
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	061a      	lsls	r2, r3, #24
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3306      	adds	r3, #6
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	041b      	lsls	r3, r3, #16
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3305      	adds	r3, #5
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	4313      	orrs	r3, r2
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	3204      	adds	r2, #4
 8001dee:	7812      	ldrb	r2, [r2, #0]
 8001df0:	4610      	mov	r0, r2
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	6811      	ldr	r1, [r2, #0]
 8001df6:	ea43 0200 	orr.w	r2, r3, r0
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	440b      	add	r3, r1
 8001e00:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001e04:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3303      	adds	r3, #3
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	061a      	lsls	r2, r3, #24
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3302      	adds	r3, #2
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	041b      	lsls	r3, r3, #16
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	4313      	orrs	r3, r2
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	7812      	ldrb	r2, [r2, #0]
 8001e26:	4610      	mov	r0, r2
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	6811      	ldr	r1, [r2, #0]
 8001e2c:	ea43 0200 	orr.w	r2, r3, r0
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	440b      	add	r3, r1
 8001e36:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001e3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	3318      	adds	r3, #24
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	4413      	add	r3, r2
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	6811      	ldr	r1, [r2, #0]
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3318      	adds	r3, #24
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	440b      	add	r3, r1
 8001e5a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	e00e      	b.n	8001e7e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e64:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e006      	b.n	8001e7e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
  }
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3724      	adds	r7, #36	@ 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b087      	sub	sp, #28
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e9e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ea0:	7dfb      	ldrb	r3, [r7, #23]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d003      	beq.n	8001eae <HAL_CAN_GetRxMessage+0x24>
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	f040 8103 	bne.w	80020b4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d10e      	bne.n	8001ed2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d116      	bne.n	8001ef0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0f7      	b.n	80020c2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d107      	bne.n	8001ef0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0e8      	b.n	80020c2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	331b      	adds	r3, #27
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	4413      	add	r3, r2
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0204 	and.w	r2, r3, #4
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10c      	bne.n	8001f28 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	331b      	adds	r3, #27
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	4413      	add	r3, r2
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	0d5b      	lsrs	r3, r3, #21
 8001f1e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e00b      	b.n	8001f40 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	331b      	adds	r3, #27
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	4413      	add	r3, r2
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	08db      	lsrs	r3, r3, #3
 8001f38:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	331b      	adds	r3, #27
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4413      	add	r3, r2
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0202 	and.w	r2, r3, #2
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	331b      	adds	r3, #27
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	4413      	add	r3, r2
 8001f62:	3304      	adds	r3, #4
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2208      	movs	r2, #8
 8001f72:	611a      	str	r2, [r3, #16]
 8001f74:	e00b      	b.n	8001f8e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	331b      	adds	r3, #27
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	4413      	add	r3, r2
 8001f82:	3304      	adds	r3, #4
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 020f 	and.w	r2, r3, #15
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	331b      	adds	r3, #27
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	4413      	add	r3, r2
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	331b      	adds	r3, #27
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	0c1b      	lsrs	r3, r3, #16
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	4413      	add	r3, r2
 8001fde:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	0a1a      	lsrs	r2, r3, #8
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	0c1a      	lsrs	r2, r3, #16
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	3302      	adds	r3, #2
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	4413      	add	r3, r2
 8002012:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0e1a      	lsrs	r2, r3, #24
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	3303      	adds	r3, #3
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	4413      	add	r3, r2
 800202c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	3304      	adds	r3, #4
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	4413      	add	r3, r2
 8002044:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	0a1a      	lsrs	r2, r3, #8
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	3305      	adds	r3, #5
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	4413      	add	r3, r2
 800205e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	0c1a      	lsrs	r2, r3, #16
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	3306      	adds	r3, #6
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	4413      	add	r3, r2
 8002078:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	0e1a      	lsrs	r2, r3, #24
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	3307      	adds	r3, #7
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d108      	bne.n	80020a0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0220 	orr.w	r2, r2, #32
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	e007      	b.n	80020b0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691a      	ldr	r2, [r3, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f042 0220 	orr.w	r2, r2, #32
 80020ae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e006      	b.n	80020c2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
  }
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	371c      	adds	r7, #28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b085      	sub	sp, #20
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d002      	beq.n	80020ec <HAL_CAN_ActivateNotification+0x1e>
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d109      	bne.n	8002100 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6959      	ldr	r1, [r3, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	e006      	b.n	800210e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002104:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
  }
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b08a      	sub	sp, #40	@ 0x28
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d07c      	beq.n	800225a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d023      	beq.n	80021b2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2201      	movs	r2, #1
 8002170:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f983 	bl	8002488 <HAL_CAN_TxMailbox0CompleteCallback>
 8002182:	e016      	b.n	80021b2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b00      	cmp	r3, #0
 800218c:	d004      	beq.n	8002198 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002190:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
 8002196:	e00c      	b.n	80021b2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d004      	beq.n	80021ac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021aa:	e002      	b.n	80021b2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f989 	bl	80024c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d024      	beq.n	8002206 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f963 	bl	800249c <HAL_CAN_TxMailbox1CompleteCallback>
 80021d6:	e016      	b.n	8002206 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d004      	beq.n	80021ec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ea:	e00c      	b.n	8002206 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d004      	beq.n	8002200 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80021fe:	e002      	b.n	8002206 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f969 	bl	80024d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d024      	beq.n	800225a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002218:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f943 	bl	80024b0 <HAL_CAN_TxMailbox2CompleteCallback>
 800222a:	e016      	b.n	800225a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d004      	beq.n	8002240 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
 800223e:	e00c      	b.n	800225a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24
 8002252:	e002      	b.n	800225a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f949 	bl	80024ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00c      	beq.n	800227e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f003 0310 	and.w	r3, r3, #16
 800226a:	2b00      	cmp	r3, #0
 800226c:	d007      	beq.n	800227e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800226e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002270:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2210      	movs	r2, #16
 800227c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00b      	beq.n	80022a0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2208      	movs	r2, #8
 8002298:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f93a 	bl	8002514 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f921 	bl	8002500 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00c      	beq.n	80022e2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d007      	beq.n	80022e2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2210      	movs	r2, #16
 80022e0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	f003 0320 	and.w	r3, r3, #32
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00b      	beq.n	8002304 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d006      	beq.n	8002304 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2208      	movs	r2, #8
 80022fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f91c 	bl	800253c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	d009      	beq.n	8002322 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f003 0303 	and.w	r3, r3, #3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f903 	bl	8002528 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d00b      	beq.n	8002344 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0310 	and.w	r3, r3, #16
 8002332:	2b00      	cmp	r3, #0
 8002334:	d006      	beq.n	8002344 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2210      	movs	r2, #16
 800233c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f906 	bl	8002550 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2208      	movs	r2, #8
 800235e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f8ff 	bl	8002564 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d07b      	beq.n	8002468 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b00      	cmp	r3, #0
 8002378:	d072      	beq.n	8002460 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ac:	f043 0302 	orr.w	r3, r3, #2
 80023b0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d043      	beq.n	8002460 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d03e      	beq.n	8002460 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023e8:	2b60      	cmp	r3, #96	@ 0x60
 80023ea:	d02b      	beq.n	8002444 <HAL_CAN_IRQHandler+0x32a>
 80023ec:	2b60      	cmp	r3, #96	@ 0x60
 80023ee:	d82e      	bhi.n	800244e <HAL_CAN_IRQHandler+0x334>
 80023f0:	2b50      	cmp	r3, #80	@ 0x50
 80023f2:	d022      	beq.n	800243a <HAL_CAN_IRQHandler+0x320>
 80023f4:	2b50      	cmp	r3, #80	@ 0x50
 80023f6:	d82a      	bhi.n	800244e <HAL_CAN_IRQHandler+0x334>
 80023f8:	2b40      	cmp	r3, #64	@ 0x40
 80023fa:	d019      	beq.n	8002430 <HAL_CAN_IRQHandler+0x316>
 80023fc:	2b40      	cmp	r3, #64	@ 0x40
 80023fe:	d826      	bhi.n	800244e <HAL_CAN_IRQHandler+0x334>
 8002400:	2b30      	cmp	r3, #48	@ 0x30
 8002402:	d010      	beq.n	8002426 <HAL_CAN_IRQHandler+0x30c>
 8002404:	2b30      	cmp	r3, #48	@ 0x30
 8002406:	d822      	bhi.n	800244e <HAL_CAN_IRQHandler+0x334>
 8002408:	2b10      	cmp	r3, #16
 800240a:	d002      	beq.n	8002412 <HAL_CAN_IRQHandler+0x2f8>
 800240c:	2b20      	cmp	r3, #32
 800240e:	d005      	beq.n	800241c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002410:	e01d      	b.n	800244e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	f043 0308 	orr.w	r3, r3, #8
 8002418:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800241a:	e019      	b.n	8002450 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	f043 0310 	orr.w	r3, r3, #16
 8002422:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002424:	e014      	b.n	8002450 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	f043 0320 	orr.w	r3, r3, #32
 800242c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800242e:	e00f      	b.n	8002450 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002438:	e00a      	b.n	8002450 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002442:	e005      	b.n	8002450 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002446:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800244a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800244c:	e000      	b.n	8002450 <HAL_CAN_IRQHandler+0x336>
            break;
 800244e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699a      	ldr	r2, [r3, #24]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800245e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2204      	movs	r2, #4
 8002466:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246a:	2b00      	cmp	r3, #0
 800246c:	d008      	beq.n	8002480 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f87c 	bl	8002578 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002480:	bf00      	nop
 8002482:	3728      	adds	r7, #40	@ 0x28
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800259c:	4b0c      	ldr	r3, [pc, #48]	@ (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025a8:	4013      	ands	r3, r2
 80025aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025be:	4a04      	ldr	r2, [pc, #16]	@ (80025d0 <__NVIC_SetPriorityGrouping+0x44>)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	60d3      	str	r3, [r2, #12]
}
 80025c4:	bf00      	nop
 80025c6:	3714      	adds	r7, #20
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d8:	4b04      	ldr	r3, [pc, #16]	@ (80025ec <__NVIC_GetPriorityGrouping+0x18>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	0a1b      	lsrs	r3, r3, #8
 80025de:	f003 0307 	and.w	r3, r3, #7
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	db0b      	blt.n	800261a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002602:	79fb      	ldrb	r3, [r7, #7]
 8002604:	f003 021f 	and.w	r2, r3, #31
 8002608:	4907      	ldr	r1, [pc, #28]	@ (8002628 <__NVIC_EnableIRQ+0x38>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	2001      	movs	r0, #1
 8002612:	fa00 f202 	lsl.w	r2, r0, r2
 8002616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	e000e100 	.word	0xe000e100

0800262c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	6039      	str	r1, [r7, #0]
 8002636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	2b00      	cmp	r3, #0
 800263e:	db0a      	blt.n	8002656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	b2da      	uxtb	r2, r3
 8002644:	490c      	ldr	r1, [pc, #48]	@ (8002678 <__NVIC_SetPriority+0x4c>)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	0112      	lsls	r2, r2, #4
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	440b      	add	r3, r1
 8002650:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002654:	e00a      	b.n	800266c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4908      	ldr	r1, [pc, #32]	@ (800267c <__NVIC_SetPriority+0x50>)
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	3b04      	subs	r3, #4
 8002664:	0112      	lsls	r2, r2, #4
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	440b      	add	r3, r1
 800266a:	761a      	strb	r2, [r3, #24]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000e100 	.word	0xe000e100
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002680:	b480      	push	{r7}
 8002682:	b089      	sub	sp, #36	@ 0x24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f1c3 0307 	rsb	r3, r3, #7
 800269a:	2b04      	cmp	r3, #4
 800269c:	bf28      	it	cs
 800269e:	2304      	movcs	r3, #4
 80026a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3304      	adds	r3, #4
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d902      	bls.n	80026b0 <NVIC_EncodePriority+0x30>
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3b03      	subs	r3, #3
 80026ae:	e000      	b.n	80026b2 <NVIC_EncodePriority+0x32>
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	f04f 32ff 	mov.w	r2, #4294967295
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43da      	mvns	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	401a      	ands	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	43d9      	mvns	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d8:	4313      	orrs	r3, r2
         );
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3724      	adds	r7, #36	@ 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026f8:	d301      	bcc.n	80026fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00f      	b.n	800271e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002728 <SysTick_Config+0x40>)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002706:	210f      	movs	r1, #15
 8002708:	f04f 30ff 	mov.w	r0, #4294967295
 800270c:	f7ff ff8e 	bl	800262c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002710:	4b05      	ldr	r3, [pc, #20]	@ (8002728 <SysTick_Config+0x40>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002716:	4b04      	ldr	r3, [pc, #16]	@ (8002728 <SysTick_Config+0x40>)
 8002718:	2207      	movs	r2, #7
 800271a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	e000e010 	.word	0xe000e010

0800272c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ff29 	bl	800258c <__NVIC_SetPriorityGrouping>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b086      	sub	sp, #24
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002754:	f7ff ff3e 	bl	80025d4 <__NVIC_GetPriorityGrouping>
 8002758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	6978      	ldr	r0, [r7, #20]
 8002760:	f7ff ff8e 	bl	8002680 <NVIC_EncodePriority>
 8002764:	4602      	mov	r2, r0
 8002766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800276a:	4611      	mov	r1, r2
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff5d 	bl	800262c <__NVIC_SetPriority>
}
 8002772:	bf00      	nop
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff31 	bl	80025f0 <__NVIC_EnableIRQ>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b082      	sub	sp, #8
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff ffa2 	bl	80026e8 <SysTick_Config>
 80027a4:	4603      	mov	r3, r0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027be:	e154      	b.n	8002a6a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	2101      	movs	r1, #1
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	fa01 f303 	lsl.w	r3, r1, r3
 80027cc:	4013      	ands	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 8146 	beq.w	8002a64 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d005      	beq.n	80027f0 <HAL_GPIO_Init+0x40>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d130      	bne.n	8002852 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002826:	2201      	movs	r2, #1
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4013      	ands	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	091b      	lsrs	r3, r3, #4
 800283c:	f003 0201 	and.w	r2, r3, #1
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b03      	cmp	r3, #3
 800285c:	d017      	beq.n	800288e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	2203      	movs	r2, #3
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d123      	bne.n	80028e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	08da      	lsrs	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3208      	adds	r2, #8
 80028a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	220f      	movs	r2, #15
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	43db      	mvns	r3, r3
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	08da      	lsrs	r2, r3, #3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3208      	adds	r2, #8
 80028dc:	6939      	ldr	r1, [r7, #16]
 80028de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	2203      	movs	r2, #3
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 0203 	and.w	r2, r3, #3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 80a0 	beq.w	8002a64 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002924:	4b58      	ldr	r3, [pc, #352]	@ (8002a88 <HAL_GPIO_Init+0x2d8>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	4a57      	ldr	r2, [pc, #348]	@ (8002a88 <HAL_GPIO_Init+0x2d8>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6193      	str	r3, [r2, #24]
 8002930:	4b55      	ldr	r3, [pc, #340]	@ (8002a88 <HAL_GPIO_Init+0x2d8>)
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800293c:	4a53      	ldr	r2, [pc, #332]	@ (8002a8c <HAL_GPIO_Init+0x2dc>)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	089b      	lsrs	r3, r3, #2
 8002942:	3302      	adds	r3, #2
 8002944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	220f      	movs	r2, #15
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002966:	d019      	beq.n	800299c <HAL_GPIO_Init+0x1ec>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a49      	ldr	r2, [pc, #292]	@ (8002a90 <HAL_GPIO_Init+0x2e0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d013      	beq.n	8002998 <HAL_GPIO_Init+0x1e8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a48      	ldr	r2, [pc, #288]	@ (8002a94 <HAL_GPIO_Init+0x2e4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d00d      	beq.n	8002994 <HAL_GPIO_Init+0x1e4>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a47      	ldr	r2, [pc, #284]	@ (8002a98 <HAL_GPIO_Init+0x2e8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d007      	beq.n	8002990 <HAL_GPIO_Init+0x1e0>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a46      	ldr	r2, [pc, #280]	@ (8002a9c <HAL_GPIO_Init+0x2ec>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d101      	bne.n	800298c <HAL_GPIO_Init+0x1dc>
 8002988:	2304      	movs	r3, #4
 800298a:	e008      	b.n	800299e <HAL_GPIO_Init+0x1ee>
 800298c:	2305      	movs	r3, #5
 800298e:	e006      	b.n	800299e <HAL_GPIO_Init+0x1ee>
 8002990:	2303      	movs	r3, #3
 8002992:	e004      	b.n	800299e <HAL_GPIO_Init+0x1ee>
 8002994:	2302      	movs	r3, #2
 8002996:	e002      	b.n	800299e <HAL_GPIO_Init+0x1ee>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <HAL_GPIO_Init+0x1ee>
 800299c:	2300      	movs	r3, #0
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	f002 0203 	and.w	r2, r2, #3
 80029a4:	0092      	lsls	r2, r2, #2
 80029a6:	4093      	lsls	r3, r2
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029ae:	4937      	ldr	r1, [pc, #220]	@ (8002a8c <HAL_GPIO_Init+0x2dc>)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	089b      	lsrs	r3, r3, #2
 80029b4:	3302      	adds	r3, #2
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029bc:	4b38      	ldr	r3, [pc, #224]	@ (8002aa0 <HAL_GPIO_Init+0x2f0>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029e0:	4a2f      	ldr	r2, [pc, #188]	@ (8002aa0 <HAL_GPIO_Init+0x2f0>)
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e6:	4b2e      	ldr	r3, [pc, #184]	@ (8002aa0 <HAL_GPIO_Init+0x2f0>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4013      	ands	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a0a:	4a25      	ldr	r2, [pc, #148]	@ (8002aa0 <HAL_GPIO_Init+0x2f0>)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a10:	4b23      	ldr	r3, [pc, #140]	@ (8002aa0 <HAL_GPIO_Init+0x2f0>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a34:	4a1a      	ldr	r2, [pc, #104]	@ (8002aa0 <HAL_GPIO_Init+0x2f0>)
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a3a:	4b19      	ldr	r3, [pc, #100]	@ (8002aa0 <HAL_GPIO_Init+0x2f0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a5e:	4a10      	ldr	r2, [pc, #64]	@ (8002aa0 <HAL_GPIO_Init+0x2f0>)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	3301      	adds	r3, #1
 8002a68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f47f aea3 	bne.w	80027c0 <HAL_GPIO_Init+0x10>
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	bf00      	nop
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40010000 	.word	0x40010000
 8002a90:	48000400 	.word	0x48000400
 8002a94:	48000800 	.word	0x48000800
 8002a98:	48000c00 	.word	0x48000c00
 8002a9c:	48001000 	.word	0x48001000
 8002aa0:	40010400 	.word	0x40010400

08002aa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	887b      	ldrh	r3, [r7, #2]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	e001      	b.n	8002ac6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae4:	787b      	ldrb	r3, [r7, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aea:	887a      	ldrh	r2, [r7, #2]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002af0:	e002      	b.n	8002af8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002af2:	887a      	ldrh	r2, [r7, #2]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b16:	887a      	ldrh	r2, [r7, #2]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	041a      	lsls	r2, r3, #16
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	43d9      	mvns	r1, r3
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	400b      	ands	r3, r1
 8002b26:	431a      	orrs	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	619a      	str	r2, [r3, #24]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b48:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f001 b823 	b.w	8003ba4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 817d 	beq.w	8002e6e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b74:	4bbc      	ldr	r3, [pc, #752]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d00c      	beq.n	8002b9a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b80:	4bb9      	ldr	r3, [pc, #740]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 030c 	and.w	r3, r3, #12
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d15c      	bne.n	8002c46 <HAL_RCC_OscConfig+0x10e>
 8002b8c:	4bb6      	ldr	r3, [pc, #728]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b98:	d155      	bne.n	8002c46 <HAL_RCC_OscConfig+0x10e>
 8002b9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b9e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002ba6:	fa93 f3a3 	rbit	r3, r3
 8002baa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	095b      	lsrs	r3, r3, #5
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d102      	bne.n	8002bcc <HAL_RCC_OscConfig+0x94>
 8002bc6:	4ba8      	ldr	r3, [pc, #672]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	e015      	b.n	8002bf8 <HAL_RCC_OscConfig+0xc0>
 8002bcc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002bd0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002bd8:	fa93 f3a3 	rbit	r3, r3
 8002bdc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002be0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002be4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002be8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002bf4:	4b9c      	ldr	r3, [pc, #624]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bfc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002c00:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002c04:	fa92 f2a2 	rbit	r2, r2
 8002c08:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002c0c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002c10:	fab2 f282 	clz	r2, r2
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	f042 0220 	orr.w	r2, r2, #32
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	f002 021f 	and.w	r2, r2, #31
 8002c20:	2101      	movs	r1, #1
 8002c22:	fa01 f202 	lsl.w	r2, r1, r2
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 811f 	beq.w	8002e6c <HAL_RCC_OscConfig+0x334>
 8002c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 8116 	bne.w	8002e6c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f000 bfaf 	b.w	8003ba4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c56:	d106      	bne.n	8002c66 <HAL_RCC_OscConfig+0x12e>
 8002c58:	4b83      	ldr	r3, [pc, #524]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a82      	ldr	r2, [pc, #520]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	e036      	b.n	8002cd4 <HAL_RCC_OscConfig+0x19c>
 8002c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0x158>
 8002c76:	4b7c      	ldr	r3, [pc, #496]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a7b      	ldr	r2, [pc, #492]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4b79      	ldr	r3, [pc, #484]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a78      	ldr	r2, [pc, #480]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002c88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e021      	b.n	8002cd4 <HAL_RCC_OscConfig+0x19c>
 8002c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x184>
 8002ca2:	4b71      	ldr	r3, [pc, #452]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a70      	ldr	r2, [pc, #448]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	4b6e      	ldr	r3, [pc, #440]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a6d      	ldr	r2, [pc, #436]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e00b      	b.n	8002cd4 <HAL_RCC_OscConfig+0x19c>
 8002cbc:	4b6a      	ldr	r3, [pc, #424]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a69      	ldr	r2, [pc, #420]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b67      	ldr	r3, [pc, #412]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a66      	ldr	r2, [pc, #408]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cd2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cd4:	4b64      	ldr	r3, [pc, #400]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd8:	f023 020f 	bic.w	r2, r3, #15
 8002cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	495f      	ldr	r1, [pc, #380]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d059      	beq.n	8002db2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fe f88b 	bl	8000e18 <HAL_GetTick>
 8002d02:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d08:	f7fe f886 	bl	8000e18 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b64      	cmp	r3, #100	@ 0x64
 8002d16:	d902      	bls.n	8002d1e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	f000 bf43 	b.w	8003ba4 <HAL_RCC_OscConfig+0x106c>
 8002d1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d22:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d26:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002d32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	095b      	lsrs	r3, r3, #5
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d102      	bne.n	8002d50 <HAL_RCC_OscConfig+0x218>
 8002d4a:	4b47      	ldr	r3, [pc, #284]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	e015      	b.n	8002d7c <HAL_RCC_OscConfig+0x244>
 8002d50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d54:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002d64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d68:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002d6c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002d78:	4b3b      	ldr	r3, [pc, #236]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d80:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002d84:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002d88:	fa92 f2a2 	rbit	r2, r2
 8002d8c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002d90:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002d94:	fab2 f282 	clz	r2, r2
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	f042 0220 	orr.w	r2, r2, #32
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	f002 021f 	and.w	r2, r2, #31
 8002da4:	2101      	movs	r1, #1
 8002da6:	fa01 f202 	lsl.w	r2, r1, r2
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ab      	beq.n	8002d08 <HAL_RCC_OscConfig+0x1d0>
 8002db0:	e05d      	b.n	8002e6e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fe f831 	bl	8000e18 <HAL_GetTick>
 8002db6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fe f82c 	bl	8000e18 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b64      	cmp	r3, #100	@ 0x64
 8002dca:	d902      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	f000 bee9 	b.w	8003ba4 <HAL_RCC_OscConfig+0x106c>
 8002dd2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dd6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002de6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d102      	bne.n	8002e04 <HAL_RCC_OscConfig+0x2cc>
 8002dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	e015      	b.n	8002e30 <HAL_RCC_OscConfig+0x2f8>
 8002e04:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e08:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002e18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e1c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002e20:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002e24:	fa93 f3a3 	rbit	r3, r3
 8002e28:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e68 <HAL_RCC_OscConfig+0x330>)
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e34:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002e38:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002e3c:	fa92 f2a2 	rbit	r2, r2
 8002e40:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002e44:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002e48:	fab2 f282 	clz	r2, r2
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	f042 0220 	orr.w	r2, r2, #32
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	f002 021f 	and.w	r2, r2, #31
 8002e58:	2101      	movs	r1, #1
 8002e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1ab      	bne.n	8002dbc <HAL_RCC_OscConfig+0x284>
 8002e64:	e003      	b.n	8002e6e <HAL_RCC_OscConfig+0x336>
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 817d 	beq.w	800317e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e84:	4ba6      	ldr	r3, [pc, #664]	@ (8003120 <HAL_RCC_OscConfig+0x5e8>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 030c 	and.w	r3, r3, #12
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00b      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e90:	4ba3      	ldr	r3, [pc, #652]	@ (8003120 <HAL_RCC_OscConfig+0x5e8>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d172      	bne.n	8002f82 <HAL_RCC_OscConfig+0x44a>
 8002e9c:	4ba0      	ldr	r3, [pc, #640]	@ (8003120 <HAL_RCC_OscConfig+0x5e8>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d16c      	bne.n	8002f82 <HAL_RCC_OscConfig+0x44a>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002eba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d102      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x3a0>
 8002ed2:	4b93      	ldr	r3, [pc, #588]	@ (8003120 <HAL_RCC_OscConfig+0x5e8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	e013      	b.n	8002f00 <HAL_RCC_OscConfig+0x3c8>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002eea:	2302      	movs	r3, #2
 8002eec:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002ef0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002efc:	4b88      	ldr	r3, [pc, #544]	@ (8003120 <HAL_RCC_OscConfig+0x5e8>)
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	2202      	movs	r2, #2
 8002f02:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002f06:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002f0a:	fa92 f2a2 	rbit	r2, r2
 8002f0e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002f12:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002f16:	fab2 f282 	clz	r2, r2
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	f042 0220 	orr.w	r2, r2, #32
 8002f20:	b2d2      	uxtb	r2, r2
 8002f22:	f002 021f 	and.w	r2, r2, #31
 8002f26:	2101      	movs	r1, #1
 8002f28:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00a      	beq.n	8002f48 <HAL_RCC_OscConfig+0x410>
 8002f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d002      	beq.n	8002f48 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f000 be2e 	b.w	8003ba4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f48:	4b75      	ldr	r3, [pc, #468]	@ (8003120 <HAL_RCC_OscConfig+0x5e8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	21f8      	movs	r1, #248	@ 0xf8
 8002f5e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002f66:	fa91 f1a1 	rbit	r1, r1
 8002f6a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002f6e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002f72:	fab1 f181 	clz	r1, r1
 8002f76:	b2c9      	uxtb	r1, r1
 8002f78:	408b      	lsls	r3, r1
 8002f7a:	4969      	ldr	r1, [pc, #420]	@ (8003120 <HAL_RCC_OscConfig+0x5e8>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f80:	e0fd      	b.n	800317e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8088 	beq.w	80030a4 <HAL_RCC_OscConfig+0x56c>
 8002f94:	2301      	movs	r3, #1
 8002f96:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002f9e:	fa93 f3a3 	rbit	r3, r3
 8002fa2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002fa6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002fb4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	461a      	mov	r2, r3
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fd ff2a 	bl	8000e18 <HAL_GetTick>
 8002fc4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fca:	f7fd ff25 	bl	8000e18 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d902      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	f000 bde2 	b.w	8003ba4 <HAL_RCC_OscConfig+0x106c>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002ff2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d102      	bne.n	8003010 <HAL_RCC_OscConfig+0x4d8>
 800300a:	4b45      	ldr	r3, [pc, #276]	@ (8003120 <HAL_RCC_OscConfig+0x5e8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	e013      	b.n	8003038 <HAL_RCC_OscConfig+0x500>
 8003010:	2302      	movs	r3, #2
 8003012:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003022:	2302      	movs	r3, #2
 8003024:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003028:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003034:	4b3a      	ldr	r3, [pc, #232]	@ (8003120 <HAL_RCC_OscConfig+0x5e8>)
 8003036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003038:	2202      	movs	r2, #2
 800303a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800303e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003042:	fa92 f2a2 	rbit	r2, r2
 8003046:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800304a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800304e:	fab2 f282 	clz	r2, r2
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	f042 0220 	orr.w	r2, r2, #32
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	f002 021f 	and.w	r2, r2, #31
 800305e:	2101      	movs	r1, #1
 8003060:	fa01 f202 	lsl.w	r2, r1, r2
 8003064:	4013      	ands	r3, r2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0af      	beq.n	8002fca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306a:	4b2d      	ldr	r3, [pc, #180]	@ (8003120 <HAL_RCC_OscConfig+0x5e8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003076:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	21f8      	movs	r1, #248	@ 0xf8
 8003080:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003084:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003088:	fa91 f1a1 	rbit	r1, r1
 800308c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003090:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003094:	fab1 f181 	clz	r1, r1
 8003098:	b2c9      	uxtb	r1, r1
 800309a:	408b      	lsls	r3, r1
 800309c:	4920      	ldr	r1, [pc, #128]	@ (8003120 <HAL_RCC_OscConfig+0x5e8>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]
 80030a2:	e06c      	b.n	800317e <HAL_RCC_OscConfig+0x646>
 80030a4:	2301      	movs	r3, #1
 80030a6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80030ae:	fa93 f3a3 	rbit	r3, r3
 80030b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80030b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ba:	fab3 f383 	clz	r3, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	461a      	mov	r2, r3
 80030cc:	2300      	movs	r3, #0
 80030ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fd fea2 	bl	8000e18 <HAL_GetTick>
 80030d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d8:	e00a      	b.n	80030f0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030da:	f7fd fe9d 	bl	8000e18 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d902      	bls.n	80030f0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	f000 bd5a 	b.w	8003ba4 <HAL_RCC_OscConfig+0x106c>
 80030f0:	2302      	movs	r3, #2
 80030f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80030fa:	fa93 f3a3 	rbit	r3, r3
 80030fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003102:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f043 0301 	orr.w	r3, r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b01      	cmp	r3, #1
 8003118:	d104      	bne.n	8003124 <HAL_RCC_OscConfig+0x5ec>
 800311a:	4b01      	ldr	r3, [pc, #4]	@ (8003120 <HAL_RCC_OscConfig+0x5e8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	e015      	b.n	800314c <HAL_RCC_OscConfig+0x614>
 8003120:	40021000 	.word	0x40021000
 8003124:	2302      	movs	r3, #2
 8003126:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003136:	2302      	movs	r3, #2
 8003138:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800313c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003148:	4bc8      	ldr	r3, [pc, #800]	@ (800346c <HAL_RCC_OscConfig+0x934>)
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	2202      	movs	r2, #2
 800314e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003152:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003156:	fa92 f2a2 	rbit	r2, r2
 800315a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800315e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003162:	fab2 f282 	clz	r2, r2
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	f042 0220 	orr.w	r2, r2, #32
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	f002 021f 	and.w	r2, r2, #31
 8003172:	2101      	movs	r1, #1
 8003174:	fa01 f202 	lsl.w	r2, r1, r2
 8003178:	4013      	ands	r3, r2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1ad      	bne.n	80030da <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800317e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003182:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8110 	beq.w	80033b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003194:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003198:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d079      	beq.n	8003298 <HAL_RCC_OscConfig+0x760>
 80031a4:	2301      	movs	r3, #1
 80031a6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80031ae:	fa93 f3a3 	rbit	r3, r3
 80031b2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80031b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	4bab      	ldr	r3, [pc, #684]	@ (8003470 <HAL_RCC_OscConfig+0x938>)
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	461a      	mov	r2, r3
 80031ca:	2301      	movs	r3, #1
 80031cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ce:	f7fd fe23 	bl	8000e18 <HAL_GetTick>
 80031d2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d6:	e00a      	b.n	80031ee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d8:	f7fd fe1e 	bl	8000e18 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d902      	bls.n	80031ee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	f000 bcdb 	b.w	8003ba4 <HAL_RCC_OscConfig+0x106c>
 80031ee:	2302      	movs	r3, #2
 80031f0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003200:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003204:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003208:	2202      	movs	r2, #2
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003210:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	fa93 f2a3 	rbit	r2, r3
 800321a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800322c:	2202      	movs	r2, #2
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	fa93 f2a3 	rbit	r2, r3
 800323e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003242:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003246:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003248:	4b88      	ldr	r3, [pc, #544]	@ (800346c <HAL_RCC_OscConfig+0x934>)
 800324a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800324c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003250:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003254:	2102      	movs	r1, #2
 8003256:	6019      	str	r1, [r3, #0]
 8003258:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800325c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	fa93 f1a3 	rbit	r1, r3
 8003266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800326e:	6019      	str	r1, [r3, #0]
  return result;
 8003270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003274:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	fab3 f383 	clz	r3, r3
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f003 031f 	and.w	r3, r3, #31
 800328a:	2101      	movs	r1, #1
 800328c:	fa01 f303 	lsl.w	r3, r1, r3
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0a0      	beq.n	80031d8 <HAL_RCC_OscConfig+0x6a0>
 8003296:	e08d      	b.n	80033b4 <HAL_RCC_OscConfig+0x87c>
 8003298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800329c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80032a0:	2201      	movs	r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	fa93 f2a3 	rbit	r2, r3
 80032b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80032ba:	601a      	str	r2, [r3, #0]
  return result;
 80032bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80032c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b68      	ldr	r3, [pc, #416]	@ (8003470 <HAL_RCC_OscConfig+0x938>)
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	461a      	mov	r2, r3
 80032d6:	2300      	movs	r3, #0
 80032d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032da:	f7fd fd9d 	bl	8000e18 <HAL_GetTick>
 80032de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e4:	f7fd fd98 	bl	8000e18 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d902      	bls.n	80032fa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	f000 bc55 	b.w	8003ba4 <HAL_RCC_OscConfig+0x106c>
 80032fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fe:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003302:	2202      	movs	r2, #2
 8003304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	fa93 f2a3 	rbit	r2, r3
 8003314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003318:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003322:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003326:	2202      	movs	r2, #2
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	fa93 f2a3 	rbit	r2, r3
 8003338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003346:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800334a:	2202      	movs	r2, #2
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003352:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	fa93 f2a3 	rbit	r2, r3
 800335c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003360:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003364:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003366:	4b41      	ldr	r3, [pc, #260]	@ (800346c <HAL_RCC_OscConfig+0x934>)
 8003368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800336a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800336e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003372:	2102      	movs	r1, #2
 8003374:	6019      	str	r1, [r3, #0]
 8003376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	fa93 f1a3 	rbit	r1, r3
 8003384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003388:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800338c:	6019      	str	r1, [r3, #0]
  return result;
 800338e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003392:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	fab3 f383 	clz	r3, r3
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	2101      	movs	r1, #1
 80033aa:	fa01 f303 	lsl.w	r3, r1, r3
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d197      	bne.n	80032e4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 81a1 	beq.w	800370c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ca:	2300      	movs	r3, #0
 80033cc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033d0:	4b26      	ldr	r3, [pc, #152]	@ (800346c <HAL_RCC_OscConfig+0x934>)
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d116      	bne.n	800340a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033dc:	4b23      	ldr	r3, [pc, #140]	@ (800346c <HAL_RCC_OscConfig+0x934>)
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	4a22      	ldr	r2, [pc, #136]	@ (800346c <HAL_RCC_OscConfig+0x934>)
 80033e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033e6:	61d3      	str	r3, [r2, #28]
 80033e8:	4b20      	ldr	r3, [pc, #128]	@ (800346c <HAL_RCC_OscConfig+0x934>)
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80033f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fe:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003402:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003404:	2301      	movs	r3, #1
 8003406:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340a:	4b1a      	ldr	r3, [pc, #104]	@ (8003474 <HAL_RCC_OscConfig+0x93c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d11a      	bne.n	800344c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003416:	4b17      	ldr	r3, [pc, #92]	@ (8003474 <HAL_RCC_OscConfig+0x93c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a16      	ldr	r2, [pc, #88]	@ (8003474 <HAL_RCC_OscConfig+0x93c>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003420:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003422:	f7fd fcf9 	bl	8000e18 <HAL_GetTick>
 8003426:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342a:	e009      	b.n	8003440 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342c:	f7fd fcf4 	bl	8000e18 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b64      	cmp	r3, #100	@ 0x64
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e3b1      	b.n	8003ba4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	4b0c      	ldr	r3, [pc, #48]	@ (8003474 <HAL_RCC_OscConfig+0x93c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ef      	beq.n	800342c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003450:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d10d      	bne.n	8003478 <HAL_RCC_OscConfig+0x940>
 800345c:	4b03      	ldr	r3, [pc, #12]	@ (800346c <HAL_RCC_OscConfig+0x934>)
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	4a02      	ldr	r2, [pc, #8]	@ (800346c <HAL_RCC_OscConfig+0x934>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	6213      	str	r3, [r2, #32]
 8003468:	e03c      	b.n	80034e4 <HAL_RCC_OscConfig+0x9ac>
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000
 8003470:	10908120 	.word	0x10908120
 8003474:	40007000 	.word	0x40007000
 8003478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10c      	bne.n	80034a2 <HAL_RCC_OscConfig+0x96a>
 8003488:	4bc1      	ldr	r3, [pc, #772]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	4ac0      	ldr	r2, [pc, #768]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 800348e:	f023 0301 	bic.w	r3, r3, #1
 8003492:	6213      	str	r3, [r2, #32]
 8003494:	4bbe      	ldr	r3, [pc, #760]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	4abd      	ldr	r2, [pc, #756]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 800349a:	f023 0304 	bic.w	r3, r3, #4
 800349e:	6213      	str	r3, [r2, #32]
 80034a0:	e020      	b.n	80034e4 <HAL_RCC_OscConfig+0x9ac>
 80034a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	d10c      	bne.n	80034cc <HAL_RCC_OscConfig+0x994>
 80034b2:	4bb7      	ldr	r3, [pc, #732]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	4ab6      	ldr	r2, [pc, #728]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 80034b8:	f043 0304 	orr.w	r3, r3, #4
 80034bc:	6213      	str	r3, [r2, #32]
 80034be:	4bb4      	ldr	r3, [pc, #720]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4ab3      	ldr	r2, [pc, #716]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6213      	str	r3, [r2, #32]
 80034ca:	e00b      	b.n	80034e4 <HAL_RCC_OscConfig+0x9ac>
 80034cc:	4bb0      	ldr	r3, [pc, #704]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4aaf      	ldr	r2, [pc, #700]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 80034d2:	f023 0301 	bic.w	r3, r3, #1
 80034d6:	6213      	str	r3, [r2, #32]
 80034d8:	4bad      	ldr	r3, [pc, #692]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4aac      	ldr	r2, [pc, #688]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 80034de:	f023 0304 	bic.w	r3, r3, #4
 80034e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8081 	beq.w	80035f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f6:	f7fd fc8f 	bl	8000e18 <HAL_GetTick>
 80034fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fe:	e00b      	b.n	8003518 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003500:	f7fd fc8a 	bl	8000e18 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003510:	4293      	cmp	r3, r2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e345      	b.n	8003ba4 <HAL_RCC_OscConfig+0x106c>
 8003518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003520:	2202      	movs	r2, #2
 8003522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003528:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	fa93 f2a3 	rbit	r2, r3
 8003532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003536:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003540:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003544:	2202      	movs	r2, #2
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	fa93 f2a3 	rbit	r2, r3
 8003556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800355a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800355e:	601a      	str	r2, [r3, #0]
  return result;
 8003560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003564:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003568:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800356a:	fab3 f383 	clz	r3, r3
 800356e:	b2db      	uxtb	r3, r3
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f043 0302 	orr.w	r3, r3, #2
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d102      	bne.n	8003584 <HAL_RCC_OscConfig+0xa4c>
 800357e:	4b84      	ldr	r3, [pc, #528]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	e013      	b.n	80035ac <HAL_RCC_OscConfig+0xa74>
 8003584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003588:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800358c:	2202      	movs	r2, #2
 800358e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003594:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	fa93 f2a3 	rbit	r2, r3
 800359e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	4b79      	ldr	r3, [pc, #484]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035b0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80035b4:	2102      	movs	r1, #2
 80035b6:	6011      	str	r1, [r2, #0]
 80035b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	fa92 f1a2 	rbit	r1, r2
 80035c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035ca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80035ce:	6011      	str	r1, [r2, #0]
  return result;
 80035d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80035d4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	fab2 f282 	clz	r2, r2
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	f002 021f 	and.w	r2, r2, #31
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f202 	lsl.w	r2, r1, r2
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d084      	beq.n	8003500 <HAL_RCC_OscConfig+0x9c8>
 80035f6:	e07f      	b.n	80036f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f8:	f7fd fc0e 	bl	8000e18 <HAL_GetTick>
 80035fc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003600:	e00b      	b.n	800361a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fd fc09 	bl	8000e18 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003612:	4293      	cmp	r3, r2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e2c4      	b.n	8003ba4 <HAL_RCC_OscConfig+0x106c>
 800361a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800361e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003622:	2202      	movs	r2, #2
 8003624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800362a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	fa93 f2a3 	rbit	r2, r3
 8003634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003638:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003642:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003646:	2202      	movs	r2, #2
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	fa93 f2a3 	rbit	r2, r3
 8003658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800365c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003660:	601a      	str	r2, [r3, #0]
  return result;
 8003662:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003666:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800366a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800366c:	fab3 f383 	clz	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	b2db      	uxtb	r3, r3
 8003676:	f043 0302 	orr.w	r3, r3, #2
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d102      	bne.n	8003686 <HAL_RCC_OscConfig+0xb4e>
 8003680:	4b43      	ldr	r3, [pc, #268]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	e013      	b.n	80036ae <HAL_RCC_OscConfig+0xb76>
 8003686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800368e:	2202      	movs	r2, #2
 8003690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003696:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	fa93 f2a3 	rbit	r2, r3
 80036a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	4b39      	ldr	r3, [pc, #228]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 80036ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036b2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80036b6:	2102      	movs	r1, #2
 80036b8:	6011      	str	r1, [r2, #0]
 80036ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036be:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	fa92 f1a2 	rbit	r1, r2
 80036c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036cc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80036d0:	6011      	str	r1, [r2, #0]
  return result;
 80036d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036d6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	fab2 f282 	clz	r2, r2
 80036e0:	b2d2      	uxtb	r2, r2
 80036e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	f002 021f 	and.w	r2, r2, #31
 80036ec:	2101      	movs	r1, #1
 80036ee:	fa01 f202 	lsl.w	r2, r1, r2
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d184      	bne.n	8003602 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003700:	4b23      	ldr	r3, [pc, #140]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	4a22      	ldr	r2, [pc, #136]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 8003706:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800370a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800370c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003710:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 8242 	beq.w	8003ba2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800371e:	4b1c      	ldr	r3, [pc, #112]	@ (8003790 <HAL_RCC_OscConfig+0xc58>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 030c 	and.w	r3, r3, #12
 8003726:	2b08      	cmp	r3, #8
 8003728:	f000 8213 	beq.w	8003b52 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800372c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003730:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	2b02      	cmp	r3, #2
 800373a:	f040 8162 	bne.w	8003a02 <HAL_RCC_OscConfig+0xeca>
 800373e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003742:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003746:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800374a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003750:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	fa93 f2a3 	rbit	r2, r3
 800375a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800375e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003762:	601a      	str	r2, [r3, #0]
  return result;
 8003764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003768:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800376c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003778:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	461a      	mov	r2, r3
 8003780:	2300      	movs	r3, #0
 8003782:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fd fb48 	bl	8000e18 <HAL_GetTick>
 8003788:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800378c:	e00c      	b.n	80037a8 <HAL_RCC_OscConfig+0xc70>
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003794:	f7fd fb40 	bl	8000e18 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e1fd      	b.n	8003ba4 <HAL_RCC_OscConfig+0x106c>
 80037a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80037b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ba:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	fa93 f2a3 	rbit	r2, r3
 80037c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80037cc:	601a      	str	r2, [r3, #0]
  return result;
 80037ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80037d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d8:	fab3 f383 	clz	r3, r3
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d102      	bne.n	80037f2 <HAL_RCC_OscConfig+0xcba>
 80037ec:	4bb0      	ldr	r3, [pc, #704]	@ (8003ab0 <HAL_RCC_OscConfig+0xf78>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	e027      	b.n	8003842 <HAL_RCC_OscConfig+0xd0a>
 80037f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80037fa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003804:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	fa93 f2a3 	rbit	r2, r3
 800380e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003812:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800381c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003820:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	fa93 f2a3 	rbit	r2, r3
 8003834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003838:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	4b9c      	ldr	r3, [pc, #624]	@ (8003ab0 <HAL_RCC_OscConfig+0xf78>)
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003842:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003846:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800384a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800384e:	6011      	str	r1, [r2, #0]
 8003850:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003854:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003858:	6812      	ldr	r2, [r2, #0]
 800385a:	fa92 f1a2 	rbit	r1, r2
 800385e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003862:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003866:	6011      	str	r1, [r2, #0]
  return result;
 8003868:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800386c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	fab2 f282 	clz	r2, r2
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	f042 0220 	orr.w	r2, r2, #32
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	f002 021f 	and.w	r2, r2, #31
 8003882:	2101      	movs	r1, #1
 8003884:	fa01 f202 	lsl.w	r2, r1, r2
 8003888:	4013      	ands	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d182      	bne.n	8003794 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800388e:	4b88      	ldr	r3, [pc, #544]	@ (8003ab0 <HAL_RCC_OscConfig+0xf78>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800389a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80038a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	430b      	orrs	r3, r1
 80038b0:	497f      	ldr	r1, [pc, #508]	@ (8003ab0 <HAL_RCC_OscConfig+0xf78>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	604b      	str	r3, [r1, #4]
 80038b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ba:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80038be:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	fa93 f2a3 	rbit	r2, r3
 80038d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038da:	601a      	str	r2, [r3, #0]
  return result;
 80038dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80038e4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e6:	fab3 f383 	clz	r3, r3
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80038f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	461a      	mov	r2, r3
 80038f8:	2301      	movs	r3, #1
 80038fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fd fa8c 	bl	8000e18 <HAL_GetTick>
 8003900:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003904:	e009      	b.n	800391a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003906:	f7fd fa87 	bl	8000e18 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e144      	b.n	8003ba4 <HAL_RCC_OscConfig+0x106c>
 800391a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800391e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003922:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003926:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	fa93 f2a3 	rbit	r2, r3
 8003936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800393e:	601a      	str	r2, [r3, #0]
  return result;
 8003940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003944:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003948:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800394a:	fab3 f383 	clz	r3, r3
 800394e:	b2db      	uxtb	r3, r3
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b01      	cmp	r3, #1
 800395c:	d102      	bne.n	8003964 <HAL_RCC_OscConfig+0xe2c>
 800395e:	4b54      	ldr	r3, [pc, #336]	@ (8003ab0 <HAL_RCC_OscConfig+0xf78>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	e027      	b.n	80039b4 <HAL_RCC_OscConfig+0xe7c>
 8003964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003968:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800396c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003976:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	fa93 f2a3 	rbit	r2, r3
 8003980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003984:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003992:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800399c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	fa93 f2a3 	rbit	r2, r3
 80039a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039aa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	4b3f      	ldr	r3, [pc, #252]	@ (8003ab0 <HAL_RCC_OscConfig+0xf78>)
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039b8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80039bc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80039c0:	6011      	str	r1, [r2, #0]
 80039c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039c6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	fa92 f1a2 	rbit	r1, r2
 80039d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039d4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039d8:	6011      	str	r1, [r2, #0]
  return result;
 80039da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80039de:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	fab2 f282 	clz	r2, r2
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	f042 0220 	orr.w	r2, r2, #32
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	f002 021f 	and.w	r2, r2, #31
 80039f4:	2101      	movs	r1, #1
 80039f6:	fa01 f202 	lsl.w	r2, r1, r2
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d082      	beq.n	8003906 <HAL_RCC_OscConfig+0xdce>
 8003a00:	e0cf      	b.n	8003ba2 <HAL_RCC_OscConfig+0x106a>
 8003a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a06:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003a0a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a14:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	fa93 f2a3 	rbit	r2, r3
 8003a1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a22:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a26:	601a      	str	r2, [r3, #0]
  return result;
 8003a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a2c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a32:	fab3 f383 	clz	r3, r3
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a3c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	461a      	mov	r2, r3
 8003a44:	2300      	movs	r3, #0
 8003a46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7fd f9e6 	bl	8000e18 <HAL_GetTick>
 8003a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a50:	e009      	b.n	8003a66 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a52:	f7fd f9e1 	bl	8000e18 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e09e      	b.n	8003ba4 <HAL_RCC_OscConfig+0x106c>
 8003a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a6a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a78:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	fa93 f2a3 	rbit	r2, r3
 8003a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a86:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a8a:	601a      	str	r2, [r3, #0]
  return result;
 8003a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a90:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003a94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a96:	fab3 f383 	clz	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d104      	bne.n	8003ab4 <HAL_RCC_OscConfig+0xf7c>
 8003aaa:	4b01      	ldr	r3, [pc, #4]	@ (8003ab0 <HAL_RCC_OscConfig+0xf78>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	e029      	b.n	8003b04 <HAL_RCC_OscConfig+0xfcc>
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003abc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	fa93 f2a3 	rbit	r2, r3
 8003ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ade:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003ae2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aec:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	fa93 f2a3 	rbit	r2, r3
 8003af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003afa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	4b2b      	ldr	r3, [pc, #172]	@ (8003bb0 <HAL_RCC_OscConfig+0x1078>)
 8003b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b08:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003b0c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b10:	6011      	str	r1, [r2, #0]
 8003b12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b16:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	fa92 f1a2 	rbit	r1, r2
 8003b20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b24:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b28:	6011      	str	r1, [r2, #0]
  return result;
 8003b2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b2e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	fab2 f282 	clz	r2, r2
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	f042 0220 	orr.w	r2, r2, #32
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	f002 021f 	and.w	r2, r2, #31
 8003b44:	2101      	movs	r1, #1
 8003b46:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d180      	bne.n	8003a52 <HAL_RCC_OscConfig+0xf1a>
 8003b50:	e027      	b.n	8003ba2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e01e      	b.n	8003ba4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b66:	4b12      	ldr	r3, [pc, #72]	@ (8003bb0 <HAL_RCC_OscConfig+0x1078>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003b72:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d10b      	bne.n	8003b9e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003b86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003b8a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d001      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40021000 	.word	0x40021000

08003bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b09e      	sub	sp, #120	@ 0x78
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e162      	b.n	8003e92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b90      	ldr	r3, [pc, #576]	@ (8003e10 <HAL_RCC_ClockConfig+0x25c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d910      	bls.n	8003bfc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b8d      	ldr	r3, [pc, #564]	@ (8003e10 <HAL_RCC_ClockConfig+0x25c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f023 0207 	bic.w	r2, r3, #7
 8003be2:	498b      	ldr	r1, [pc, #556]	@ (8003e10 <HAL_RCC_ClockConfig+0x25c>)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bea:	4b89      	ldr	r3, [pc, #548]	@ (8003e10 <HAL_RCC_ClockConfig+0x25c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e14a      	b.n	8003e92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c08:	4b82      	ldr	r3, [pc, #520]	@ (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	497f      	ldr	r1, [pc, #508]	@ (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 80dc 	beq.w	8003de0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d13c      	bne.n	8003caa <HAL_RCC_ClockConfig+0xf6>
 8003c30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c34:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c38:	fa93 f3a3 	rbit	r3, r3
 8003c3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003c3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c40:	fab3 f383 	clz	r3, r3
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d102      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xa6>
 8003c54:	4b6f      	ldr	r3, [pc, #444]	@ (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	e00f      	b.n	8003c7a <HAL_RCC_ClockConfig+0xc6>
 8003c5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c5e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003c6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c70:	fa93 f3a3 	rbit	r3, r3
 8003c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c76:	4b67      	ldr	r3, [pc, #412]	@ (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003c7e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c82:	fa92 f2a2 	rbit	r2, r2
 8003c86:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003c88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c8a:	fab2 f282 	clz	r2, r2
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	f042 0220 	orr.w	r2, r2, #32
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	f002 021f 	and.w	r2, r2, #31
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d17b      	bne.n	8003d9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e0f3      	b.n	8003e92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d13c      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x178>
 8003cb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cb6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003cc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc2:	fab3 f383 	clz	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d102      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x128>
 8003cd6:	4b4f      	ldr	r3, [pc, #316]	@ (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	e00f      	b.n	8003cfc <HAL_RCC_ClockConfig+0x148>
 8003cdc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ce4:	fa93 f3a3 	rbit	r3, r3
 8003ce8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cee:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cf8:	4b46      	ldr	r3, [pc, #280]	@ (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d00:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003d02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d04:	fa92 f2a2 	rbit	r2, r2
 8003d08:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003d0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d0c:	fab2 f282 	clz	r2, r2
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	f042 0220 	orr.w	r2, r2, #32
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	f002 021f 	and.w	r2, r2, #31
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d13a      	bne.n	8003d9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0b2      	b.n	8003e92 <HAL_RCC_ClockConfig+0x2de>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d32:	fa93 f3a3 	rbit	r3, r3
 8003d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3a:	fab3 f383 	clz	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d102      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x1a0>
 8003d4e:	4b31      	ldr	r3, [pc, #196]	@ (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	e00d      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1bc>
 8003d54:	2302      	movs	r3, #2
 8003d56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5a:	fa93 f3a3 	rbit	r3, r3
 8003d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d60:	2302      	movs	r3, #2
 8003d62:	623b      	str	r3, [r7, #32]
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	fa93 f3a3 	rbit	r3, r3
 8003d6a:	61fb      	str	r3, [r7, #28]
 8003d6c:	4b29      	ldr	r3, [pc, #164]	@ (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d70:	2202      	movs	r2, #2
 8003d72:	61ba      	str	r2, [r7, #24]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	fa92 f2a2 	rbit	r2, r2
 8003d7a:	617a      	str	r2, [r7, #20]
  return result;
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	fab2 f282 	clz	r2, r2
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	f042 0220 	orr.w	r2, r2, #32
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	f002 021f 	and.w	r2, r2, #31
 8003d8e:	2101      	movs	r1, #1
 8003d90:	fa01 f202 	lsl.w	r2, r1, r2
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e079      	b.n	8003e92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f023 0203 	bic.w	r2, r3, #3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	491a      	ldr	r1, [pc, #104]	@ (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db0:	f7fd f832 	bl	8000e18 <HAL_GetTick>
 8003db4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003db6:	e00a      	b.n	8003dce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db8:	f7fd f82e 	bl	8000e18 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e061      	b.n	8003e92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dce:	4b11      	ldr	r3, [pc, #68]	@ (8003e14 <HAL_RCC_ClockConfig+0x260>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f003 020c 	and.w	r2, r3, #12
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d1eb      	bne.n	8003db8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e10 <HAL_RCC_ClockConfig+0x25c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d214      	bcs.n	8003e18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dee:	4b08      	ldr	r3, [pc, #32]	@ (8003e10 <HAL_RCC_ClockConfig+0x25c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f023 0207 	bic.w	r2, r3, #7
 8003df6:	4906      	ldr	r1, [pc, #24]	@ (8003e10 <HAL_RCC_ClockConfig+0x25c>)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfe:	4b04      	ldr	r3, [pc, #16]	@ (8003e10 <HAL_RCC_ClockConfig+0x25c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d005      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e040      	b.n	8003e92 <HAL_RCC_ClockConfig+0x2de>
 8003e10:	40022000 	.word	0x40022000
 8003e14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e24:	4b1d      	ldr	r3, [pc, #116]	@ (8003e9c <HAL_RCC_ClockConfig+0x2e8>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	491a      	ldr	r1, [pc, #104]	@ (8003e9c <HAL_RCC_ClockConfig+0x2e8>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e42:	4b16      	ldr	r3, [pc, #88]	@ (8003e9c <HAL_RCC_ClockConfig+0x2e8>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4912      	ldr	r1, [pc, #72]	@ (8003e9c <HAL_RCC_ClockConfig+0x2e8>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e56:	f000 f829 	bl	8003eac <HAL_RCC_GetSysClockFreq>
 8003e5a:	4601      	mov	r1, r0
 8003e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e9c <HAL_RCC_ClockConfig+0x2e8>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e64:	22f0      	movs	r2, #240	@ 0xf0
 8003e66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	fa92 f2a2 	rbit	r2, r2
 8003e6e:	60fa      	str	r2, [r7, #12]
  return result;
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	fab2 f282 	clz	r2, r2
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	40d3      	lsrs	r3, r2
 8003e7a:	4a09      	ldr	r2, [pc, #36]	@ (8003ea0 <HAL_RCC_ClockConfig+0x2ec>)
 8003e7c:	5cd3      	ldrb	r3, [r2, r3]
 8003e7e:	fa21 f303 	lsr.w	r3, r1, r3
 8003e82:	4a08      	ldr	r2, [pc, #32]	@ (8003ea4 <HAL_RCC_ClockConfig+0x2f0>)
 8003e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003e86:	4b08      	ldr	r3, [pc, #32]	@ (8003ea8 <HAL_RCC_ClockConfig+0x2f4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fc ff80 	bl	8000d90 <HAL_InitTick>
  
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3778      	adds	r7, #120	@ 0x78
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	08004c50 	.word	0x08004c50
 8003ea4:	20000008 	.word	0x20000008
 8003ea8:	2000000c 	.word	0x2000000c

08003eac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f003 030c 	and.w	r3, r3, #12
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d002      	beq.n	8003edc <HAL_RCC_GetSysClockFreq+0x30>
 8003ed6:	2b08      	cmp	r3, #8
 8003ed8:	d003      	beq.n	8003ee2 <HAL_RCC_GetSysClockFreq+0x36>
 8003eda:	e026      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003edc:	4b19      	ldr	r3, [pc, #100]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ede:	613b      	str	r3, [r7, #16]
      break;
 8003ee0:	e026      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	0c9b      	lsrs	r3, r3, #18
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	4a17      	ldr	r2, [pc, #92]	@ (8003f48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003eec:	5cd3      	ldrb	r3, [r2, r3]
 8003eee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003ef0:	4b13      	ldr	r3, [pc, #76]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	4a14      	ldr	r2, [pc, #80]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003efa:	5cd3      	ldrb	r3, [r2, r3]
 8003efc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f08:	4a0e      	ldr	r2, [pc, #56]	@ (8003f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	fb02 f303 	mul.w	r3, r2, r3
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	e004      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	613b      	str	r3, [r7, #16]
      break;
 8003f28:	e002      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003f2c:	613b      	str	r3, [r7, #16]
      break;
 8003f2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f30:	693b      	ldr	r3, [r7, #16]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	371c      	adds	r7, #28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40021000 	.word	0x40021000
 8003f44:	00f42400 	.word	0x00f42400
 8003f48:	08004c60 	.word	0x08004c60
 8003f4c:	08004c70 	.word	0x08004c70
 8003f50:	003d0900 	.word	0x003d0900
 8003f54:	007a1200 	.word	0x007a1200

08003f58 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b092      	sub	sp, #72	@ 0x48
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80d4 	beq.w	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7c:	4b4e      	ldr	r3, [pc, #312]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10e      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f88:	4b4b      	ldr	r3, [pc, #300]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	4a4a      	ldr	r2, [pc, #296]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f92:	61d3      	str	r3, [r2, #28]
 8003f94:	4b48      	ldr	r3, [pc, #288]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa6:	4b45      	ldr	r3, [pc, #276]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d118      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb2:	4b42      	ldr	r3, [pc, #264]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a41      	ldr	r2, [pc, #260]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fbc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fbe:	f7fc ff2b 	bl	8000e18 <HAL_GetTick>
 8003fc2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc6:	f7fc ff27 	bl	8000e18 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b64      	cmp	r3, #100	@ 0x64
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e169      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd8:	4b38      	ldr	r3, [pc, #224]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fe4:	4b34      	ldr	r3, [pc, #208]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 8084 	beq.w	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ffe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004000:	429a      	cmp	r2, r3
 8004002:	d07c      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004004:	4b2c      	ldr	r3, [pc, #176]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800400c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800400e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004012:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800401c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800401e:	fab3 f383 	clz	r3, r3
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	4b26      	ldr	r3, [pc, #152]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	461a      	mov	r2, r3
 800402e:	2301      	movs	r3, #1
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004036:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403a:	fa93 f3a3 	rbit	r3, r3
 800403e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004042:	fab3 f383 	clz	r3, r3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	4b1d      	ldr	r3, [pc, #116]	@ (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	461a      	mov	r2, r3
 8004052:	2300      	movs	r3, #0
 8004054:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004056:	4a18      	ldr	r2, [pc, #96]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800405a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800405c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d04b      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004066:	f7fc fed7 	bl	8000e18 <HAL_GetTick>
 800406a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406c:	e00a      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406e:	f7fc fed3 	bl	8000e18 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800407c:	4293      	cmp	r3, r2
 800407e:	d901      	bls.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e113      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004084:	2302      	movs	r3, #2
 8004086:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800408a:	fa93 f3a3 	rbit	r3, r3
 800408e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004090:	2302      	movs	r3, #2
 8004092:	623b      	str	r3, [r7, #32]
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	fa93 f3a3 	rbit	r3, r3
 800409a:	61fb      	str	r3, [r7, #28]
  return result;
 800409c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800409e:	fab3 f383 	clz	r3, r3
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	f043 0302 	orr.w	r3, r3, #2
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d108      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80040b2:	4b01      	ldr	r3, [pc, #4]	@ (80040b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	e00d      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80040b8:	40021000 	.word	0x40021000
 80040bc:	40007000 	.word	0x40007000
 80040c0:	10908100 	.word	0x10908100
 80040c4:	2302      	movs	r3, #2
 80040c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	fa93 f3a3 	rbit	r3, r3
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	4b78      	ldr	r3, [pc, #480]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	2202      	movs	r2, #2
 80040d6:	613a      	str	r2, [r7, #16]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	fa92 f2a2 	rbit	r2, r2
 80040de:	60fa      	str	r2, [r7, #12]
  return result;
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	fab2 f282 	clz	r2, r2
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	f002 021f 	and.w	r2, r2, #31
 80040f2:	2101      	movs	r1, #1
 80040f4:	fa01 f202 	lsl.w	r2, r1, r2
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0b7      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80040fe:	4b6d      	ldr	r3, [pc, #436]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	496a      	ldr	r1, [pc, #424]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800410c:	4313      	orrs	r3, r2
 800410e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004110:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004114:	2b01      	cmp	r3, #1
 8004116:	d105      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004118:	4b66      	ldr	r3, [pc, #408]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	4a65      	ldr	r2, [pc, #404]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800411e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004122:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004130:	4b60      	ldr	r3, [pc, #384]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004134:	f023 0203 	bic.w	r2, r3, #3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	495d      	ldr	r1, [pc, #372]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800413e:	4313      	orrs	r3, r2
 8004140:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d008      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800414e:	4b59      	ldr	r3, [pc, #356]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004152:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	4956      	ldr	r1, [pc, #344]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800415c:	4313      	orrs	r3, r2
 800415e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d008      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800416c:	4b51      	ldr	r3, [pc, #324]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800416e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004170:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	494e      	ldr	r1, [pc, #312]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800417a:	4313      	orrs	r3, r2
 800417c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800418a:	4b4a      	ldr	r3, [pc, #296]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800418c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418e:	f023 0210 	bic.w	r2, r3, #16
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	4947      	ldr	r1, [pc, #284]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004198:	4313      	orrs	r3, r2
 800419a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80041a8:	4b42      	ldr	r3, [pc, #264]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b4:	493f      	ldr	r1, [pc, #252]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041c6:	4b3b      	ldr	r3, [pc, #236]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ca:	f023 0220 	bic.w	r2, r3, #32
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	4938      	ldr	r1, [pc, #224]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041e4:	4b33      	ldr	r3, [pc, #204]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	4930      	ldr	r1, [pc, #192]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0310 	and.w	r3, r3, #16
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d008      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004202:	4b2c      	ldr	r3, [pc, #176]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004206:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	4929      	ldr	r1, [pc, #164]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004210:	4313      	orrs	r3, r2
 8004212:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004220:	4b24      	ldr	r3, [pc, #144]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422c:	4921      	ldr	r1, [pc, #132]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800422e:	4313      	orrs	r3, r2
 8004230:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800423e:	4b1d      	ldr	r3, [pc, #116]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004242:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424a:	491a      	ldr	r1, [pc, #104]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800424c:	4313      	orrs	r3, r2
 800424e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800425c:	4b15      	ldr	r3, [pc, #84]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800425e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004260:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004268:	4912      	ldr	r1, [pc, #72]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800426a:	4313      	orrs	r3, r2
 800426c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800427a:	4b0e      	ldr	r3, [pc, #56]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004286:	490b      	ldr	r1, [pc, #44]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004288:	4313      	orrs	r3, r2
 800428a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004298:	4b06      	ldr	r3, [pc, #24]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800429a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a4:	4903      	ldr	r1, [pc, #12]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3748      	adds	r7, #72	@ 0x48
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40021000 	.word	0x40021000

080042b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e049      	b.n	800435e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d106      	bne.n	80042e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fc fc02 	bl	8000ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	4619      	mov	r1, r3
 80042f6:	4610      	mov	r0, r2
 80042f8:	f000 fa9e 	bl	8004838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b01      	cmp	r3, #1
 800437a:	d001      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e04a      	b.n	8004416 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a21      	ldr	r2, [pc, #132]	@ (8004424 <HAL_TIM_Base_Start_IT+0xbc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d018      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043aa:	d013      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004428 <HAL_TIM_Base_Start_IT+0xc0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00e      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1c      	ldr	r2, [pc, #112]	@ (800442c <HAL_TIM_Base_Start_IT+0xc4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d009      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004430 <HAL_TIM_Base_Start_IT+0xc8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d004      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x6c>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a19      	ldr	r2, [pc, #100]	@ (8004434 <HAL_TIM_Base_Start_IT+0xcc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d115      	bne.n	8004400 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	4b17      	ldr	r3, [pc, #92]	@ (8004438 <HAL_TIM_Base_Start_IT+0xd0>)
 80043dc:	4013      	ands	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b06      	cmp	r3, #6
 80043e4:	d015      	beq.n	8004412 <HAL_TIM_Base_Start_IT+0xaa>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043ec:	d011      	beq.n	8004412 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0201 	orr.w	r2, r2, #1
 80043fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043fe:	e008      	b.n	8004412 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	e000      	b.n	8004414 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004412:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40012c00 	.word	0x40012c00
 8004428:	40000400 	.word	0x40000400
 800442c:	40000800 	.word	0x40000800
 8004430:	40013400 	.word	0x40013400
 8004434:	40014000 	.word	0x40014000
 8004438:	00010007 	.word	0x00010007

0800443c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d020      	beq.n	80044a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01b      	beq.n	80044a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0202 	mvn.w	r2, #2
 8004470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f9b7 	bl	80047fa <HAL_TIM_IC_CaptureCallback>
 800448c:	e005      	b.n	800449a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f9a9 	bl	80047e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f9ba 	bl	800480e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d020      	beq.n	80044ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01b      	beq.n	80044ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0204 	mvn.w	r2, #4
 80044bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2202      	movs	r2, #2
 80044c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f991 	bl	80047fa <HAL_TIM_IC_CaptureCallback>
 80044d8:	e005      	b.n	80044e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f983 	bl	80047e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f994 	bl	800480e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d020      	beq.n	8004538 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01b      	beq.n	8004538 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f06f 0208 	mvn.w	r2, #8
 8004508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2204      	movs	r2, #4
 800450e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f96b 	bl	80047fa <HAL_TIM_IC_CaptureCallback>
 8004524:	e005      	b.n	8004532 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f95d 	bl	80047e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f96e 	bl	800480e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	d020      	beq.n	8004584 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01b      	beq.n	8004584 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0210 	mvn.w	r2, #16
 8004554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2208      	movs	r2, #8
 800455a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f945 	bl	80047fa <HAL_TIM_IC_CaptureCallback>
 8004570:	e005      	b.n	800457e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f937 	bl	80047e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f948 	bl	800480e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00c      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0201 	mvn.w	r2, #1
 80045a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f915 	bl	80047d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00c      	beq.n	80045cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d007      	beq.n	80045cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 faf6 	bl	8004bb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00c      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d007      	beq.n	80045f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80045e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 faee 	bl	8004bcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00c      	beq.n	8004614 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	d007      	beq.n	8004614 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800460c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f907 	bl	8004822 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00c      	beq.n	8004638 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f003 0320 	and.w	r3, r3, #32
 8004624:	2b00      	cmp	r3, #0
 8004626:	d007      	beq.n	8004638 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0220 	mvn.w	r2, #32
 8004630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fab6 	bl	8004ba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004638:	bf00      	nop
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_TIM_ConfigClockSource+0x1c>
 8004658:	2302      	movs	r3, #2
 800465a:	e0b6      	b.n	80047ca <HAL_TIM_ConfigClockSource+0x18a>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800467a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800467e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004698:	d03e      	beq.n	8004718 <HAL_TIM_ConfigClockSource+0xd8>
 800469a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800469e:	f200 8087 	bhi.w	80047b0 <HAL_TIM_ConfigClockSource+0x170>
 80046a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046a6:	f000 8086 	beq.w	80047b6 <HAL_TIM_ConfigClockSource+0x176>
 80046aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ae:	d87f      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x170>
 80046b0:	2b70      	cmp	r3, #112	@ 0x70
 80046b2:	d01a      	beq.n	80046ea <HAL_TIM_ConfigClockSource+0xaa>
 80046b4:	2b70      	cmp	r3, #112	@ 0x70
 80046b6:	d87b      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x170>
 80046b8:	2b60      	cmp	r3, #96	@ 0x60
 80046ba:	d050      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x11e>
 80046bc:	2b60      	cmp	r3, #96	@ 0x60
 80046be:	d877      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x170>
 80046c0:	2b50      	cmp	r3, #80	@ 0x50
 80046c2:	d03c      	beq.n	800473e <HAL_TIM_ConfigClockSource+0xfe>
 80046c4:	2b50      	cmp	r3, #80	@ 0x50
 80046c6:	d873      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x170>
 80046c8:	2b40      	cmp	r3, #64	@ 0x40
 80046ca:	d058      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x13e>
 80046cc:	2b40      	cmp	r3, #64	@ 0x40
 80046ce:	d86f      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x170>
 80046d0:	2b30      	cmp	r3, #48	@ 0x30
 80046d2:	d064      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15e>
 80046d4:	2b30      	cmp	r3, #48	@ 0x30
 80046d6:	d86b      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x170>
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d060      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15e>
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d867      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x170>
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d05c      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15e>
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d05a      	beq.n	800479e <HAL_TIM_ConfigClockSource+0x15e>
 80046e8:	e062      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046fa:	f000 f9b3 	bl	8004a64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800470c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	609a      	str	r2, [r3, #8]
      break;
 8004716:	e04f      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004728:	f000 f99c 	bl	8004a64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800473a:	609a      	str	r2, [r3, #8]
      break;
 800473c:	e03c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800474a:	461a      	mov	r2, r3
 800474c:	f000 f910 	bl	8004970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2150      	movs	r1, #80	@ 0x50
 8004756:	4618      	mov	r0, r3
 8004758:	f000 f969 	bl	8004a2e <TIM_ITRx_SetConfig>
      break;
 800475c:	e02c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800476a:	461a      	mov	r2, r3
 800476c:	f000 f92f 	bl	80049ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2160      	movs	r1, #96	@ 0x60
 8004776:	4618      	mov	r0, r3
 8004778:	f000 f959 	bl	8004a2e <TIM_ITRx_SetConfig>
      break;
 800477c:	e01c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800478a:	461a      	mov	r2, r3
 800478c:	f000 f8f0 	bl	8004970 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2140      	movs	r1, #64	@ 0x40
 8004796:	4618      	mov	r0, r3
 8004798:	f000 f949 	bl	8004a2e <TIM_ITRx_SetConfig>
      break;
 800479c:	e00c      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4619      	mov	r1, r3
 80047a8:	4610      	mov	r0, r2
 80047aa:	f000 f940 	bl	8004a2e <TIM_ITRx_SetConfig>
      break;
 80047ae:	e003      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	73fb      	strb	r3, [r7, #15]
      break;
 80047b4:	e000      	b.n	80047b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80047b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a42      	ldr	r2, [pc, #264]	@ (8004954 <TIM_Base_SetConfig+0x11c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00f      	beq.n	8004870 <TIM_Base_SetConfig+0x38>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004856:	d00b      	beq.n	8004870 <TIM_Base_SetConfig+0x38>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a3f      	ldr	r2, [pc, #252]	@ (8004958 <TIM_Base_SetConfig+0x120>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d007      	beq.n	8004870 <TIM_Base_SetConfig+0x38>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a3e      	ldr	r2, [pc, #248]	@ (800495c <TIM_Base_SetConfig+0x124>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d003      	beq.n	8004870 <TIM_Base_SetConfig+0x38>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a3d      	ldr	r2, [pc, #244]	@ (8004960 <TIM_Base_SetConfig+0x128>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d108      	bne.n	8004882 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a33      	ldr	r2, [pc, #204]	@ (8004954 <TIM_Base_SetConfig+0x11c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01b      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004890:	d017      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a30      	ldr	r2, [pc, #192]	@ (8004958 <TIM_Base_SetConfig+0x120>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a2f      	ldr	r2, [pc, #188]	@ (800495c <TIM_Base_SetConfig+0x124>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00f      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004960 <TIM_Base_SetConfig+0x128>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00b      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004964 <TIM_Base_SetConfig+0x12c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d007      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004968 <TIM_Base_SetConfig+0x130>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d003      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a2b      	ldr	r2, [pc, #172]	@ (800496c <TIM_Base_SetConfig+0x134>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d108      	bne.n	80048d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a16      	ldr	r2, [pc, #88]	@ (8004954 <TIM_Base_SetConfig+0x11c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00f      	beq.n	8004920 <TIM_Base_SetConfig+0xe8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a17      	ldr	r2, [pc, #92]	@ (8004960 <TIM_Base_SetConfig+0x128>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d00b      	beq.n	8004920 <TIM_Base_SetConfig+0xe8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a16      	ldr	r2, [pc, #88]	@ (8004964 <TIM_Base_SetConfig+0x12c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d007      	beq.n	8004920 <TIM_Base_SetConfig+0xe8>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a15      	ldr	r2, [pc, #84]	@ (8004968 <TIM_Base_SetConfig+0x130>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d003      	beq.n	8004920 <TIM_Base_SetConfig+0xe8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a14      	ldr	r2, [pc, #80]	@ (800496c <TIM_Base_SetConfig+0x134>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d103      	bne.n	8004928 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b01      	cmp	r3, #1
 8004938:	d105      	bne.n	8004946 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f023 0201 	bic.w	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	611a      	str	r2, [r3, #16]
  }
}
 8004946:	bf00      	nop
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40012c00 	.word	0x40012c00
 8004958:	40000400 	.word	0x40000400
 800495c:	40000800 	.word	0x40000800
 8004960:	40013400 	.word	0x40013400
 8004964:	40014000 	.word	0x40014000
 8004968:	40014400 	.word	0x40014400
 800496c:	40014800 	.word	0x40014800

08004970 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	f023 0201 	bic.w	r2, r3, #1
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800499a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f023 030a 	bic.w	r3, r3, #10
 80049ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	621a      	str	r2, [r3, #32]
}
 80049c2:	bf00      	nop
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b087      	sub	sp, #28
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	f023 0210 	bic.w	r2, r3, #16
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	031b      	lsls	r3, r3, #12
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004a0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	011b      	lsls	r3, r3, #4
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	621a      	str	r2, [r3, #32]
}
 8004a22:	bf00      	nop
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b085      	sub	sp, #20
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f043 0307 	orr.w	r3, r3, #7
 8004a50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	609a      	str	r2, [r3, #8]
}
 8004a58:	bf00      	nop
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	021a      	lsls	r2, r3, #8
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	609a      	str	r2, [r3, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e063      	b.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d004      	beq.n	8004af0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a2a      	ldr	r2, [pc, #168]	@ (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d108      	bne.n	8004b02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004af6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a1b      	ldr	r2, [pc, #108]	@ (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d018      	beq.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b2e:	d013      	beq.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a18      	ldr	r2, [pc, #96]	@ (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00e      	beq.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a17      	ldr	r2, [pc, #92]	@ (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d009      	beq.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a12      	ldr	r2, [pc, #72]	@ (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d004      	beq.n	8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a13      	ldr	r2, [pc, #76]	@ (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d10c      	bne.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40013400 	.word	0x40013400
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800
 8004ba0:	40014000 	.word	0x40014000

08004ba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <memset>:
 8004be0:	4402      	add	r2, r0
 8004be2:	4603      	mov	r3, r0
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d100      	bne.n	8004bea <memset+0xa>
 8004be8:	4770      	bx	lr
 8004bea:	f803 1b01 	strb.w	r1, [r3], #1
 8004bee:	e7f9      	b.n	8004be4 <memset+0x4>

08004bf0 <__libc_init_array>:
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	4d0d      	ldr	r5, [pc, #52]	@ (8004c28 <__libc_init_array+0x38>)
 8004bf4:	4c0d      	ldr	r4, [pc, #52]	@ (8004c2c <__libc_init_array+0x3c>)
 8004bf6:	1b64      	subs	r4, r4, r5
 8004bf8:	10a4      	asrs	r4, r4, #2
 8004bfa:	2600      	movs	r6, #0
 8004bfc:	42a6      	cmp	r6, r4
 8004bfe:	d109      	bne.n	8004c14 <__libc_init_array+0x24>
 8004c00:	4d0b      	ldr	r5, [pc, #44]	@ (8004c30 <__libc_init_array+0x40>)
 8004c02:	4c0c      	ldr	r4, [pc, #48]	@ (8004c34 <__libc_init_array+0x44>)
 8004c04:	f000 f818 	bl	8004c38 <_init>
 8004c08:	1b64      	subs	r4, r4, r5
 8004c0a:	10a4      	asrs	r4, r4, #2
 8004c0c:	2600      	movs	r6, #0
 8004c0e:	42a6      	cmp	r6, r4
 8004c10:	d105      	bne.n	8004c1e <__libc_init_array+0x2e>
 8004c12:	bd70      	pop	{r4, r5, r6, pc}
 8004c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c18:	4798      	blx	r3
 8004c1a:	3601      	adds	r6, #1
 8004c1c:	e7ee      	b.n	8004bfc <__libc_init_array+0xc>
 8004c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c22:	4798      	blx	r3
 8004c24:	3601      	adds	r6, #1
 8004c26:	e7f2      	b.n	8004c0e <__libc_init_array+0x1e>
 8004c28:	08004c80 	.word	0x08004c80
 8004c2c:	08004c80 	.word	0x08004c80
 8004c30:	08004c80 	.word	0x08004c80
 8004c34:	08004c84 	.word	0x08004c84

08004c38 <_init>:
 8004c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3a:	bf00      	nop
 8004c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3e:	bc08      	pop	{r3}
 8004c40:	469e      	mov	lr, r3
 8004c42:	4770      	bx	lr

08004c44 <_fini>:
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	bf00      	nop
 8004c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4a:	bc08      	pop	{r3}
 8004c4c:	469e      	mov	lr, r3
 8004c4e:	4770      	bx	lr
