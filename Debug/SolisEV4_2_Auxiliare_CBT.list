
SolisEV4_2_Auxiliare_CBT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006a54  08006a54  00007a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b40  08006b40  00008074  2**0
                  CONTENTS
  4 .ARM          00000008  08006b40  08006b40  00007b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b48  08006b48  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b48  08006b48  00007b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b4c  08006b4c  00007b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08006b50  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008074  2**0
                  CONTENTS
 10 .bss          000002b4  20000074  20000074  00008074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000328  20000328  00008074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f2c1  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000238c  00000000  00000000  00017365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  000196f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a72  00000000  00000000  0001a480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f7f9  00000000  00000000  0001aef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121d2  00000000  00000000  0003a6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfa76  00000000  00000000  0004c8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010c333  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000041d4  00000000  00000000  0010c378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  0011054c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a3c 	.word	0x08006a3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006a3c 	.word	0x08006a3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <Update_Auxiliary_System>:
/*
 * This functions updates the physical Auxiliary system
 */
void Update_Auxiliary_System(Auxiliary *aux_pointer, bool toggle_sign_left,
		bool toggle_sign_right, uint8_t sign_left_500ms,
		uint8_t sign_right_500ms) {
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	b0cb      	sub	sp, #300	@ 0x12c
 8000274:	af06      	add	r7, sp, #24
 8000276:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800027a:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 800027e:	6020      	str	r0, [r4, #0]
 8000280:	460c      	mov	r4, r1
 8000282:	4610      	mov	r0, r2
 8000284:	4619      	mov	r1, r3
 8000286:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800028a:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800028e:	4622      	mov	r2, r4
 8000290:	701a      	strb	r2, [r3, #0]
 8000292:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000296:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 800029a:	4602      	mov	r2, r0
 800029c:	701a      	strb	r2, [r3, #0]
 800029e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80002a2:	f2a3 1307 	subw	r3, r3, #263	@ 0x107
 80002a6:	460a      	mov	r2, r1
 80002a8:	701a      	strb	r2, [r3, #0]
	            "Hazard Lights: %s\n"
	            "Horn: %s\n"
	            "Sign Left: %s\n"
	            "Sign Right: %s\n"
	            "Lights: %s\n",
	            aux_pointer->brake ? "ON" : "OFF",
 80002aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80002ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80002ba:	b2db      	uxtb	r3, r3
	    sprintf(buffer,
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d002      	beq.n	80002c6 <Update_Auxiliary_System+0x56>
 80002c0:	4ba1      	ldr	r3, [pc, #644]	@ (8000548 <Update_Auxiliary_System+0x2d8>)
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	e001      	b.n	80002ca <Update_Auxiliary_System+0x5a>
 80002c6:	4ba1      	ldr	r3, [pc, #644]	@ (800054c <Update_Auxiliary_System+0x2dc>)
 80002c8:	607b      	str	r3, [r7, #4]
	            		aux_pointer->camera ? "ON" : "OFF",
 80002ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80002ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80002da:	b2db      	uxtb	r3, r3
	    sprintf(buffer,
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d002      	beq.n	80002e6 <Update_Auxiliary_System+0x76>
 80002e0:	4b99      	ldr	r3, [pc, #612]	@ (8000548 <Update_Auxiliary_System+0x2d8>)
 80002e2:	603b      	str	r3, [r7, #0]
 80002e4:	e001      	b.n	80002ea <Update_Auxiliary_System+0x7a>
 80002e6:	4b99      	ldr	r3, [pc, #612]	@ (800054c <Update_Auxiliary_System+0x2dc>)
 80002e8:	603b      	str	r3, [r7, #0]
	            				aux_pointer->fan ? "ON" : "OFF",
 80002ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80002ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	f003 0320 	and.w	r3, r3, #32
 80002fa:	b2db      	uxtb	r3, r3
	    sprintf(buffer,
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <Update_Auxiliary_System+0x94>
 8000300:	4b91      	ldr	r3, [pc, #580]	@ (8000548 <Update_Auxiliary_System+0x2d8>)
 8000302:	e000      	b.n	8000306 <Update_Auxiliary_System+0x96>
 8000304:	4b91      	ldr	r3, [pc, #580]	@ (800054c <Update_Auxiliary_System+0x2dc>)
	            						aux_pointer->hazard_lights ? "ON" : "OFF",
 8000306:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800030a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800030e:	6812      	ldr	r2, [r2, #0]
 8000310:	7812      	ldrb	r2, [r2, #0]
 8000312:	f002 0204 	and.w	r2, r2, #4
 8000316:	b2d2      	uxtb	r2, r2
	    sprintf(buffer,
 8000318:	2a00      	cmp	r2, #0
 800031a:	d001      	beq.n	8000320 <Update_Auxiliary_System+0xb0>
 800031c:	4a8a      	ldr	r2, [pc, #552]	@ (8000548 <Update_Auxiliary_System+0x2d8>)
 800031e:	e000      	b.n	8000322 <Update_Auxiliary_System+0xb2>
 8000320:	4a8a      	ldr	r2, [pc, #552]	@ (800054c <Update_Auxiliary_System+0x2dc>)
	            		aux_pointer->horn ? "ON" : "OFF",
 8000322:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000326:	f5a1 7182 	sub.w	r1, r1, #260	@ 0x104
 800032a:	6809      	ldr	r1, [r1, #0]
 800032c:	7809      	ldrb	r1, [r1, #0]
 800032e:	f001 0110 	and.w	r1, r1, #16
 8000332:	b2c9      	uxtb	r1, r1
	    sprintf(buffer,
 8000334:	2900      	cmp	r1, #0
 8000336:	d001      	beq.n	800033c <Update_Auxiliary_System+0xcc>
 8000338:	4983      	ldr	r1, [pc, #524]	@ (8000548 <Update_Auxiliary_System+0x2d8>)
 800033a:	e000      	b.n	800033e <Update_Auxiliary_System+0xce>
 800033c:	4983      	ldr	r1, [pc, #524]	@ (800054c <Update_Auxiliary_System+0x2dc>)
	            				aux_pointer->sign_left ? "ON" : "OFF",
 800033e:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000342:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8000346:	6800      	ldr	r0, [r0, #0]
 8000348:	7800      	ldrb	r0, [r0, #0]
 800034a:	f000 0001 	and.w	r0, r0, #1
 800034e:	b2c0      	uxtb	r0, r0
	    sprintf(buffer,
 8000350:	2800      	cmp	r0, #0
 8000352:	d001      	beq.n	8000358 <Update_Auxiliary_System+0xe8>
 8000354:	487c      	ldr	r0, [pc, #496]	@ (8000548 <Update_Auxiliary_System+0x2d8>)
 8000356:	e000      	b.n	800035a <Update_Auxiliary_System+0xea>
 8000358:	487c      	ldr	r0, [pc, #496]	@ (800054c <Update_Auxiliary_System+0x2dc>)
	            						aux_pointer->sign_right ? "ON" : "OFF",
 800035a:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 800035e:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 8000362:	6824      	ldr	r4, [r4, #0]
 8000364:	7824      	ldrb	r4, [r4, #0]
 8000366:	f004 0402 	and.w	r4, r4, #2
 800036a:	b2e4      	uxtb	r4, r4
	    sprintf(buffer,
 800036c:	2c00      	cmp	r4, #0
 800036e:	d001      	beq.n	8000374 <Update_Auxiliary_System+0x104>
 8000370:	4c75      	ldr	r4, [pc, #468]	@ (8000548 <Update_Auxiliary_System+0x2d8>)
 8000372:	e000      	b.n	8000376 <Update_Auxiliary_System+0x106>
 8000374:	4c75      	ldr	r4, [pc, #468]	@ (800054c <Update_Auxiliary_System+0x2dc>)
	            		aux_pointer->lights ? "ON" : "OFF");
 8000376:	f507 7588 	add.w	r5, r7, #272	@ 0x110
 800037a:	f5a5 7582 	sub.w	r5, r5, #260	@ 0x104
 800037e:	682d      	ldr	r5, [r5, #0]
 8000380:	782d      	ldrb	r5, [r5, #0]
 8000382:	f005 0508 	and.w	r5, r5, #8
 8000386:	b2ed      	uxtb	r5, r5
	    sprintf(buffer,
 8000388:	2d00      	cmp	r5, #0
 800038a:	d001      	beq.n	8000390 <Update_Auxiliary_System+0x120>
 800038c:	4d6e      	ldr	r5, [pc, #440]	@ (8000548 <Update_Auxiliary_System+0x2d8>)
 800038e:	e000      	b.n	8000392 <Update_Auxiliary_System+0x122>
 8000390:	4d6e      	ldr	r5, [pc, #440]	@ (800054c <Update_Auxiliary_System+0x2dc>)
 8000392:	f107 0610 	add.w	r6, r7, #16
 8000396:	9505      	str	r5, [sp, #20]
 8000398:	9404      	str	r4, [sp, #16]
 800039a:	9003      	str	r0, [sp, #12]
 800039c:	9102      	str	r1, [sp, #8]
 800039e:	9201      	str	r2, [sp, #4]
 80003a0:	9300      	str	r3, [sp, #0]
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	687a      	ldr	r2, [r7, #4]
 80003a6:	496a      	ldr	r1, [pc, #424]	@ (8000550 <Update_Auxiliary_System+0x2e0>)
 80003a8:	4630      	mov	r0, r6
 80003aa:	f005 fb15 	bl	80059d8 <siprintf>

	    // Send the buffer to a debug output (e.g., UART, serial monitor, or console)
	    printf("%s", buffer); // Replace with your HAL_UART_Transmit if printf isn't available
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	4619      	mov	r1, r3
 80003b4:	4867      	ldr	r0, [pc, #412]	@ (8000554 <Update_Auxiliary_System+0x2e4>)
 80003b6:	f005 fafd 	bl	80059b4 <iprintf>
	/*
	 * Set all pins with the negated values from auxiliary structure
	 * Outputs are negated -> transistors type P
	 */
	HAL_GPIO_WritePin(GPIOB, BACK_LIGHT_Pin | FRONT_LIGHT_Pin,
			(!aux_pointer->lights));
 80003ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80003be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	781b      	ldrb	r3, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, BACK_LIGHT_Pin | FRONT_LIGHT_Pin,
 80003c6:	f003 0308 	and.w	r3, r3, #8
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	bf0c      	ite	eq
 80003d0:	2301      	moveq	r3, #1
 80003d2:	2300      	movne	r3, #0
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	461a      	mov	r2, r3
 80003d8:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80003dc:	485e      	ldr	r0, [pc, #376]	@ (8000558 <Update_Auxiliary_System+0x2e8>)
 80003de:	f003 f9a1 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, HORN_Pin, (!aux_pointer->horn));
 80003e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80003e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	f003 0310 	and.w	r3, r3, #16
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	bf0c      	ite	eq
 80003f8:	2301      	moveq	r3, #1
 80003fa:	2300      	movne	r3, #0
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	461a      	mov	r2, r3
 8000400:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000404:	4854      	ldr	r0, [pc, #336]	@ (8000558 <Update_Auxiliary_System+0x2e8>)
 8000406:	f003 f98d 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, (!aux_pointer->fan));
 800040a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800040e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	f003 0320 	and.w	r3, r3, #32
 800041a:	b2db      	uxtb	r3, r3
 800041c:	2b00      	cmp	r3, #0
 800041e:	bf0c      	ite	eq
 8000420:	2301      	moveq	r3, #1
 8000422:	2300      	movne	r3, #0
 8000424:	b2db      	uxtb	r3, r3
 8000426:	461a      	mov	r2, r3
 8000428:	2180      	movs	r1, #128	@ 0x80
 800042a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800042e:	f003 f979 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, CAMERA_Pin, (!aux_pointer->camera));
 8000432:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000436:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000442:	b2db      	uxtb	r3, r3
 8000444:	2b00      	cmp	r3, #0
 8000446:	bf0c      	ite	eq
 8000448:	2301      	moveq	r3, #1
 800044a:	2300      	movne	r3, #0
 800044c:	b2db      	uxtb	r3, r3
 800044e:	461a      	mov	r2, r3
 8000450:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000454:	4840      	ldr	r0, [pc, #256]	@ (8000558 <Update_Auxiliary_System+0x2e8>)
 8000456:	f003 f965 	bl	8003724 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, BRAKE_Pin, (!aux_pointer->brake));
 800045a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800045e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	b25b      	sxtb	r3, r3
 8000468:	43db      	mvns	r3, r3
 800046a:	b2db      	uxtb	r3, r3
 800046c:	09db      	lsrs	r3, r3, #7
 800046e:	b2db      	uxtb	r3, r3
 8000470:	461a      	mov	r2, r3
 8000472:	2104      	movs	r1, #4
 8000474:	4838      	ldr	r0, [pc, #224]	@ (8000558 <Update_Auxiliary_System+0x2e8>)
 8000476:	f003 f955 	bl	8003724 <HAL_GPIO_WritePin>
	 * 	when signaling right, the left one should be off
	 * 	when using hazard signals ("pe avarii"), make sure left & right are synchronized
	 */

	//hazard lights
	if (aux_pointer->hazard_lights == ON
 800047a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800047e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	f003 0304 	and.w	r3, r3, #4
 800048a:	b2db      	uxtb	r3, r3
 800048c:	2b00      	cmp	r3, #0
 800048e:	d024      	beq.n	80004da <Update_Auxiliary_System+0x26a>
			&& toggle_sign_left == toggle_sign_right) {
 8000490:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000494:	f2a3 1205 	subw	r2, r3, #261	@ 0x105
 8000498:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800049c:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 80004a0:	7812      	ldrb	r2, [r2, #0]
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d118      	bne.n	80004da <Update_Auxiliary_System+0x26a>
		//synchronization mechanism
		sign_left_500ms = sign_right_500ms;
 80004a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004ac:	f2a3 1307 	subw	r3, r3, #263	@ 0x107
 80004b0:	f897 2128 	ldrb.w	r2, [r7, #296]	@ 0x128
 80004b4:	701a      	strb	r2, [r3, #0]
		//set both to be turned on
		aux_pointer->sign_left = ON;
 80004b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	7813      	ldrb	r3, [r2, #0]
 80004c2:	f043 0301 	orr.w	r3, r3, #1
 80004c6:	7013      	strb	r3, [r2, #0]
		aux_pointer->sign_right = ON;
 80004c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	7813      	ldrb	r3, [r2, #0]
 80004d4:	f043 0302 	orr.w	r3, r3, #2
 80004d8:	7013      	strb	r3, [r2, #0]
	}

	if (aux_pointer->sign_left == ON) {
 80004da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d035      	beq.n	800055c <Update_Auxiliary_System+0x2ec>
		//count 500ms
		if (++sign_left_500ms == 10) {
 80004f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004f4:	f2a3 1307 	subw	r3, r3, #263	@ 0x107
 80004f8:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80004fc:	f2a2 1207 	subw	r2, r2, #263	@ 0x107
 8000500:	7812      	ldrb	r2, [r2, #0]
 8000502:	3201      	adds	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
 8000506:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800050a:	f2a3 1307 	subw	r3, r3, #263	@ 0x107
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b0a      	cmp	r3, #10
 8000512:	d142      	bne.n	800059a <Update_Auxiliary_System+0x32a>
			HAL_GPIO_TogglePin(GPIOB, SIGN_LEFT_Pin);
 8000514:	2101      	movs	r1, #1
 8000516:	4810      	ldr	r0, [pc, #64]	@ (8000558 <Update_Auxiliary_System+0x2e8>)
 8000518:	f003 f91c 	bl	8003754 <HAL_GPIO_TogglePin>
			//store the current state of sign left
			toggle_sign_left = (!toggle_sign_left);
 800051c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000520:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	bf0c      	ite	eq
 800052a:	2301      	moveq	r3, #1
 800052c:	2300      	movne	r3, #0
 800052e:	b2da      	uxtb	r2, r3
 8000530:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000534:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 8000538:	701a      	strb	r2, [r3, #0]
			//reset counter
			sign_left_500ms = 0;
 800053a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800053e:	f2a3 1307 	subw	r3, r3, #263	@ 0x107
 8000542:	2200      	movs	r2, #0
 8000544:	701a      	strb	r2, [r3, #0]
 8000546:	e028      	b.n	800059a <Update_Auxiliary_System+0x32a>
 8000548:	08006a54 	.word	0x08006a54
 800054c:	08006a58 	.word	0x08006a58
 8000550:	08006a5c 	.word	0x08006a5c
 8000554:	08006ad8 	.word	0x08006ad8
 8000558:	48000400 	.word	0x48000400
		}
	} else {
		//turn off
		HAL_GPIO_WritePin(GPIOB, SIGN_LEFT_Pin, (!aux_pointer->sign_left));
 800055c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000560:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	f003 0301 	and.w	r3, r3, #1
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b00      	cmp	r3, #0
 8000570:	bf0c      	ite	eq
 8000572:	2301      	moveq	r3, #1
 8000574:	2300      	movne	r3, #0
 8000576:	b2db      	uxtb	r3, r3
 8000578:	461a      	mov	r2, r3
 800057a:	2101      	movs	r1, #1
 800057c:	482d      	ldr	r0, [pc, #180]	@ (8000634 <Update_Auxiliary_System+0x3c4>)
 800057e:	f003 f8d1 	bl	8003724 <HAL_GPIO_WritePin>
		toggle_sign_left = OFF;
 8000582:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000586:	f2a3 1305 	subw	r3, r3, #261	@ 0x105
 800058a:	2200      	movs	r2, #0
 800058c:	701a      	strb	r2, [r3, #0]
		sign_left_500ms = 0;
 800058e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000592:	f2a3 1307 	subw	r3, r3, #263	@ 0x107
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
	}

	if (aux_pointer->sign_right == ON) {
 800059a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800059e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	f003 0302 	and.w	r3, r3, #2
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d01f      	beq.n	80005f0 <Update_Auxiliary_System+0x380>
		if (++sign_right_500ms == 10) {
 80005b0:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 80005b4:	3301      	adds	r3, #1
 80005b6:	f887 3128 	strb.w	r3, [r7, #296]	@ 0x128
 80005ba:	f897 3128 	ldrb.w	r3, [r7, #296]	@ 0x128
 80005be:	2b0a      	cmp	r3, #10
 80005c0:	d132      	bne.n	8000628 <Update_Auxiliary_System+0x3b8>
			HAL_GPIO_TogglePin(GPIOB, SIGN_RIGHT_Pin);
 80005c2:	2102      	movs	r1, #2
 80005c4:	481b      	ldr	r0, [pc, #108]	@ (8000634 <Update_Auxiliary_System+0x3c4>)
 80005c6:	f003 f8c5 	bl	8003754 <HAL_GPIO_TogglePin>
			toggle_sign_right = (!toggle_sign_right);
 80005ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005ce:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	bf0c      	ite	eq
 80005d8:	2301      	moveq	r3, #1
 80005da:	2300      	movne	r3, #0
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005e2:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 80005e6:	701a      	strb	r2, [r3, #0]
			sign_right_500ms = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	f887 3128 	strb.w	r3, [r7, #296]	@ 0x128
		HAL_GPIO_WritePin(GPIOB, SIGN_RIGHT_Pin, (!aux_pointer->sign_right));
		toggle_sign_right = OFF;
		sign_right_500ms = 0;
	}

}
 80005ee:	e01b      	b.n	8000628 <Update_Auxiliary_System+0x3b8>
		HAL_GPIO_WritePin(GPIOB, SIGN_RIGHT_Pin, (!aux_pointer->sign_right));
 80005f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80005f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	f003 0302 	and.w	r3, r3, #2
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	bf0c      	ite	eq
 8000606:	2301      	moveq	r3, #1
 8000608:	2300      	movne	r3, #0
 800060a:	b2db      	uxtb	r3, r3
 800060c:	461a      	mov	r2, r3
 800060e:	2102      	movs	r1, #2
 8000610:	4808      	ldr	r0, [pc, #32]	@ (8000634 <Update_Auxiliary_System+0x3c4>)
 8000612:	f003 f887 	bl	8003724 <HAL_GPIO_WritePin>
		toggle_sign_right = OFF;
 8000616:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800061a:	f5a3 7383 	sub.w	r3, r3, #262	@ 0x106
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
		sign_right_500ms = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	f887 3128 	strb.w	r3, [r7, #296]	@ 0x128
}
 8000628:	bf00      	nop
 800062a:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800062e:	46bd      	mov	sp, r7
 8000630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000632:	bf00      	nop
 8000634:	48000400 	.word	0x48000400

08000638 <Send_Auxiliary_State_CAN>:

void Send_Auxiliary_State_CAN(CAN_HandleTypeDef hcan, uint8_t *Activity_Check) {
 8000638:	b084      	sub	sp, #16
 800063a:	b580      	push	{r7, lr}
 800063c:	b088      	sub	sp, #32
 800063e:	af00      	add	r7, sp, #0
 8000640:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 8000644:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	CAN_TxHeaderTypeDef txHeader;
	uint32_t txMailbox;

	// Prepare the CAN header
	txHeader.StdId = 0x123;        // Replace with appropriate CAN ID
 8000648:	f240 1323 	movw	r3, #291	@ 0x123
 800064c:	60bb      	str	r3, [r7, #8]
	txHeader.ExtId = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
	txHeader.IDE = CAN_ID_STD;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
	txHeader.RTR = CAN_RTR_DATA;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
	txHeader.DLC = 8;             // Length of data (up to 8 bytes)
 800065a:	2308      	movs	r3, #8
 800065c:	61bb      	str	r3, [r7, #24]
	txHeader.TransmitGlobalTime = DISABLE;
 800065e:	2300      	movs	r3, #0
 8000660:	773b      	strb	r3, [r7, #28]

	// Transmit the CAN message
	if (HAL_CAN_AddTxMessage(&hcan, &txHeader, Activity_Check, &txMailbox)
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	f107 0108 	add.w	r1, r7, #8
 8000668:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800066a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800066e:	f002 f964 	bl	800293a <HAL_CAN_AddTxMessage>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <Send_Auxiliary_State_CAN+0x44>
			!= HAL_OK) {
		// Handle transmission error
		Error_Handler();
 8000678:	f000 fb50 	bl	8000d1c <Error_Handler>
	}
}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000686:	b004      	add	sp, #16
 8000688:	4770      	bx	lr
	...

0800068c <Get_ADC_Value>:
 * to the ADC measured value.
 */

void Get_ADC_Value(ADC_HandleTypeDef hadc4, Auxiliary *aux_pointer,
		bool toggle_sign_left, bool toggle_sign_right, uint32_t adc_value,
		uint8_t *activity_check) {
 800068c:	b084      	sub	sp, #16
 800068e:	b580      	push	{r7, lr}
 8000690:	b084      	sub	sp, #16
 8000692:	af00      	add	r7, sp, #0
 8000694:	f107 0c18 	add.w	ip, r7, #24
 8000698:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
			.Sign_Left_Current = 0, .Hazard_Current = 0, .Horn_Current = 0,
			.HeadLights_Current = 0, .Fan_Current = 0, .Camera_Current = 0,
			.Brake_Current = 0, };

	static uint8_t tolerance = 100; // Units
	uint32_t total_current = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	uint8_t error_mask = 0x01;
 80006a0:	2301      	movs	r3, #1
 80006a2:	72fb      	strb	r3, [r7, #11]

	// ADC Conversion
	HAL_ADC_Start(&hadc4);
 80006a4:	f107 0018 	add.w	r0, r7, #24
 80006a8:	f001 f878 	bl	800179c <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc4, HAL_MAX_DELAY) == HAL_OK) {
 80006ac:	f04f 31ff 	mov.w	r1, #4294967295
 80006b0:	f107 0018 	add.w	r0, r7, #24
 80006b4:	f001 f9be 	bl	8001a34 <HAL_ADC_PollForConversion>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d104      	bne.n	80006c8 <Get_ADC_Value+0x3c>
		adc_value = HAL_ADC_GetValue(&hadc4);
 80006be:	f107 0018 	add.w	r0, r7, #24
 80006c2:	f001 fab9 	bl	8001c38 <HAL_ADC_GetValue>
 80006c6:	6778      	str	r0, [r7, #116]	@ 0x74
	}
	HAL_ADC_Stop(&hadc4);
 80006c8:	f107 0018 	add.w	r0, r7, #24
 80006cc:	f001 f97c 	bl	80019c8 <HAL_ADC_Stop>

	// Calculate Total Current
	for (int i = 0; i < 8; i++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	e014      	b.n	8000700 <Get_ADC_Value+0x74>
		if (aux_pointer->state & error_mask) {
 80006d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	7afb      	ldrb	r3, [r7, #11]
 80006dc:	4013      	ands	r3, r2
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d007      	beq.n	80006f4 <Get_ADC_Value+0x68>
			total_current += *(((uint32_t*) &Auxiliary_Error_Mapping) + i);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4a16      	ldr	r2, [pc, #88]	@ (8000744 <Get_ADC_Value+0xb8>)
 80006ea:	4413      	add	r3, r2
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	4413      	add	r3, r2
 80006f2:	60fb      	str	r3, [r7, #12]
		}
		error_mask <<= 1;
 80006f4:	7afb      	ldrb	r3, [r7, #11]
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < 8; i++) {
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	3301      	adds	r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b07      	cmp	r3, #7
 8000704:	dde7      	ble.n	80006d6 <Get_ADC_Value+0x4a>
	}

	// Compare ADC value with calculated total current
	if ((total_current - tolerance) <= adc_value
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <Get_ADC_Value+0xbc>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	461a      	mov	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	1a9b      	subs	r3, r3, r2
 8000710:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000712:	429a      	cmp	r2, r3
 8000714:	d30b      	bcc.n	800072e <Get_ADC_Value+0xa2>
			&& adc_value <= (total_current + tolerance)) {
 8000716:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <Get_ADC_Value+0xbc>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	461a      	mov	r2, r3
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4413      	add	r3, r2
 8000720:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000722:	429a      	cmp	r2, r3
 8000724:	d803      	bhi.n	800072e <Get_ADC_Value+0xa2>
		activity_check[0] = AUXILIARY_WORKS;
 8000726:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000728:	22ff      	movs	r2, #255	@ 0xff
 800072a:	701a      	strb	r2, [r3, #0]
 800072c:	e003      	b.n	8000736 <Get_ADC_Value+0xaa>
	} else {
		activity_check[0] = AUXILIARY_ERROR;
 800072e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
	}
}
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000740:	b004      	add	sp, #16
 8000742:	4770      	bx	lr
 8000744:	20000090 	.word	0x20000090
 8000748:	20000000 	.word	0x20000000

0800074c <Update_Offline_Mode>:

void Update_Offline_Mode(Auxiliary *aux_offline) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	aux_offline->brake = HAL_GPIO_ReadPin(GPIOA, BRAKE_OFFLINE_Pin);
 8000754:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000758:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800075c:	f002 ffca 	bl	80036f4 <HAL_GPIO_ReadPin>
 8000760:	4603      	mov	r3, r0
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	b2d9      	uxtb	r1, r3
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	7813      	ldrb	r3, [r2, #0]
 800076c:	f361 13c7 	bfi	r3, r1, #7, #1
 8000770:	7013      	strb	r3, [r2, #0]
	aux_offline->camera = HAL_GPIO_ReadPin(GPIOB, CAMERA_OFFLINE_Pin);
 8000772:	2120      	movs	r1, #32
 8000774:	483d      	ldr	r0, [pc, #244]	@ (800086c <Update_Offline_Mode+0x120>)
 8000776:	f002 ffbd 	bl	80036f4 <HAL_GPIO_ReadPin>
 800077a:	4603      	mov	r3, r0
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	b2d9      	uxtb	r1, r3
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	7813      	ldrb	r3, [r2, #0]
 8000786:	f361 1386 	bfi	r3, r1, #6, #1
 800078a:	7013      	strb	r3, [r2, #0]
	aux_offline->fan = HAL_GPIO_ReadPin(GPIOB, FAN_OFFLINE_Pin);
 800078c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000790:	4836      	ldr	r0, [pc, #216]	@ (800086c <Update_Offline_Mode+0x120>)
 8000792:	f002 ffaf 	bl	80036f4 <HAL_GPIO_ReadPin>
 8000796:	4603      	mov	r3, r0
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	b2d9      	uxtb	r1, r3
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	7813      	ldrb	r3, [r2, #0]
 80007a2:	f361 1345 	bfi	r3, r1, #5, #1
 80007a6:	7013      	strb	r3, [r2, #0]
	aux_offline->horn = HAL_GPIO_ReadPin(GPIOB, HORN_OFFLINE_Pin);
 80007a8:	2140      	movs	r1, #64	@ 0x40
 80007aa:	4830      	ldr	r0, [pc, #192]	@ (800086c <Update_Offline_Mode+0x120>)
 80007ac:	f002 ffa2 	bl	80036f4 <HAL_GPIO_ReadPin>
 80007b0:	4603      	mov	r3, r0
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	b2d9      	uxtb	r1, r3
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	7813      	ldrb	r3, [r2, #0]
 80007bc:	f361 1304 	bfi	r3, r1, #4, #1
 80007c0:	7013      	strb	r3, [r2, #0]
	aux_offline->sign_left = HAL_GPIO_ReadPin(GPIOB, SIGN_LEFT_OFFLINE_Pin);
 80007c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007c6:	4829      	ldr	r0, [pc, #164]	@ (800086c <Update_Offline_Mode+0x120>)
 80007c8:	f002 ff94 	bl	80036f4 <HAL_GPIO_ReadPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	b2d9      	uxtb	r1, r3
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	7813      	ldrb	r3, [r2, #0]
 80007d8:	f361 0300 	bfi	r3, r1, #0, #1
 80007dc:	7013      	strb	r3, [r2, #0]
	aux_offline->sign_right = HAL_GPIO_ReadPin(GPIOB, SIGN_RIGHT_OFFLINE_Pin);
 80007de:	2180      	movs	r1, #128	@ 0x80
 80007e0:	4822      	ldr	r0, [pc, #136]	@ (800086c <Update_Offline_Mode+0x120>)
 80007e2:	f002 ff87 	bl	80036f4 <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	b2d9      	uxtb	r1, r3
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	7813      	ldrb	r3, [r2, #0]
 80007f2:	f361 0341 	bfi	r3, r1, #1, #1
 80007f6:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOB, SIGN_LEFT_OFFLINE_Pin)
 80007f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007fc:	481b      	ldr	r0, [pc, #108]	@ (800086c <Update_Offline_Mode+0x120>)
 80007fe:	f002 ff79 	bl	80036f4 <HAL_GPIO_ReadPin>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d00c      	beq.n	8000822 <Update_Offline_Mode+0xd6>
				&& HAL_GPIO_ReadPin(GPIOB, SIGN_RIGHT_OFFLINE_Pin)) {
 8000808:	2180      	movs	r1, #128	@ 0x80
 800080a:	4818      	ldr	r0, [pc, #96]	@ (800086c <Update_Offline_Mode+0x120>)
 800080c:	f002 ff72 	bl	80036f4 <HAL_GPIO_ReadPin>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d005      	beq.n	8000822 <Update_Offline_Mode+0xd6>
			aux_offline->hazard_lights = ON;
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	7813      	ldrb	r3, [r2, #0]
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	7013      	strb	r3, [r2, #0]
 8000820:	e004      	b.n	800082c <Update_Offline_Mode+0xe0>
		} else
			aux_offline->hazard_lights = OFF;
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	7813      	ldrb	r3, [r2, #0]
 8000826:	f36f 0382 	bfc	r3, #2, #1
 800082a:	7013      	strb	r3, [r2, #0]

	if (HAL_GPIO_ReadPin(GPIOC, FRONT_LIGHT_OFFLINE_Pin)
 800082c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000830:	480f      	ldr	r0, [pc, #60]	@ (8000870 <Update_Offline_Mode+0x124>)
 8000832:	f002 ff5f 	bl	80036f4 <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d107      	bne.n	800084c <Update_Offline_Mode+0x100>
			|| HAL_GPIO_ReadPin(GPIOC, BACK_LIGHT_OFFLINE_Pin)) {
 800083c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000840:	480b      	ldr	r0, [pc, #44]	@ (8000870 <Update_Offline_Mode+0x124>)
 8000842:	f002 ff57 	bl	80036f4 <HAL_GPIO_ReadPin>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d005      	beq.n	8000858 <Update_Offline_Mode+0x10c>
		aux_offline->lights = ON;
 800084c:	687a      	ldr	r2, [r7, #4]
 800084e:	7813      	ldrb	r3, [r2, #0]
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	7013      	strb	r3, [r2, #0]
 8000856:	e005      	b.n	8000864 <Update_Offline_Mode+0x118>
	} else
		aux_offline->lights = OFF;
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	7813      	ldrb	r3, [r2, #0]
 800085c:	f36f 03c3 	bfc	r3, #3, #1
 8000860:	7013      	strb	r3, [r2, #0]
}
 8000862:	bf00      	nop
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	48000400 	.word	0x48000400
 8000870:	48000800 	.word	0x48000800

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000878:	f000 fd26 	bl	80012c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087c:	f000 f826 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000880:	f000 f9d0 	bl	8000c24 <MX_GPIO_Init>
  MX_ADC4_Init();
 8000884:	f000 f87e 	bl	8000984 <MX_ADC4_Init>
  MX_CAN_Init();
 8000888:	f000 f8da 	bl	8000a40 <MX_CAN_Init>
  MX_TIM2_Init();
 800088c:	f000 f92c 	bl	8000ae8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000890:	f000 f978 	bl	8000b84 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(2000); //waiting for the other system configurations if needed
 8000894:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000898:	f000 fd7c 	bl	8001394 <HAL_Delay>

  	HAL_CAN_Start(&hcan);
 800089c:	4808      	ldr	r0, [pc, #32]	@ (80008c0 <main+0x4c>)
 800089e:	f002 f808 	bl	80028b2 <HAL_CAN_Start>
  	HAL_TIM_Base_Start_IT(&htim2); //timer 2 -> connection with dashboard
 80008a2:	4808      	ldr	r0, [pc, #32]	@ (80008c4 <main+0x50>)
 80008a4:	f004 fb88 	bl	8004fb8 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim3); //timer 3 -> connection with auxiliary systems
 80008a8:	4807      	ldr	r0, [pc, #28]	@ (80008c8 <main+0x54>)
 80008aa:	f004 fb85 	bl	8004fb8 <HAL_TIM_Base_Start_IT>

  	HAL_Delay(100);
 80008ae:	2064      	movs	r0, #100	@ 0x64
 80008b0:	f000 fd70 	bl	8001394 <HAL_Delay>

  	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //waiting message on FIFO0
 80008b4:	2102      	movs	r1, #2
 80008b6:	4802      	ldr	r0, [pc, #8]	@ (80008c0 <main+0x4c>)
 80008b8:	f002 fa31 	bl	8002d1e <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <main+0x48>
 80008c0:	20000100 	.word	0x20000100
 80008c4:	20000128 	.word	0x20000128
 80008c8:	20000174 	.word	0x20000174

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b09e      	sub	sp, #120	@ 0x78
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80008d6:	2228      	movs	r2, #40	@ 0x28
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f005 f8df 	bl	8005a9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f0:	463b      	mov	r3, r7
 80008f2:	223c      	movs	r2, #60	@ 0x3c
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f005 f8d1 	bl	8005a9e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008fc:	2301      	movs	r3, #1
 80008fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000900:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000904:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000906:	2301      	movs	r3, #1
 8000908:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090a:	2301      	movs	r3, #1
 800090c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090e:	2302      	movs	r3, #2
 8000910:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000912:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000916:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000918:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800091c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000922:	4618      	mov	r0, r3
 8000924:	f002 ff30 	bl	8003788 <HAL_RCC_OscConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800092e:	f000 f9f5 	bl	8000d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	230f      	movs	r3, #15
 8000934:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	2302      	movs	r3, #2
 8000938:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800093e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000942:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000948:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800094c:	2102      	movs	r1, #2
 800094e:	4618      	mov	r0, r3
 8000950:	f003 ff58 	bl	8004804 <HAL_RCC_ClockConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800095a:	f000 f9df 	bl	8000d1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC34;
 800095e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000962:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000964:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800096a:	463b      	mov	r3, r7
 800096c:	4618      	mov	r0, r3
 800096e:	f004 f91b 	bl	8004ba8 <HAL_RCCEx_PeriphCLKConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000978:	f000 f9d0 	bl	8000d1c <Error_Handler>
  }
}
 800097c:	bf00      	nop
 800097e:	3778      	adds	r7, #120	@ 0x78
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800098a:	463b      	mov	r3, r7
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
 8000998:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800099a:	4b27      	ldr	r3, [pc, #156]	@ (8000a38 <MX_ADC4_Init+0xb4>)
 800099c:	4a27      	ldr	r2, [pc, #156]	@ (8000a3c <MX_ADC4_Init+0xb8>)
 800099e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009a0:	4b25      	ldr	r3, [pc, #148]	@ (8000a38 <MX_ADC4_Init+0xb4>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80009a6:	4b24      	ldr	r3, [pc, #144]	@ (8000a38 <MX_ADC4_Init+0xb4>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ac:	4b22      	ldr	r3, [pc, #136]	@ (8000a38 <MX_ADC4_Init+0xb4>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80009b2:	4b21      	ldr	r3, [pc, #132]	@ (8000a38 <MX_ADC4_Init+0xb4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80009b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <MX_ADC4_Init+0xb4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <MX_ADC4_Init+0xb4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <MX_ADC4_Init+0xb4>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <MX_ADC4_Init+0xb4>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80009d2:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <MX_ADC4_Init+0xb4>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80009d8:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <MX_ADC4_Init+0xb4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009e0:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_ADC4_Init+0xb4>)
 80009e2:	2204      	movs	r2, #4
 80009e4:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80009e6:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <MX_ADC4_Init+0xb4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <MX_ADC4_Init+0xb4>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80009f2:	4811      	ldr	r0, [pc, #68]	@ (8000a38 <MX_ADC4_Init+0xb4>)
 80009f4:	f000 fcf2 	bl	80013dc <HAL_ADC_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 80009fe:	f000 f98d 	bl	8000d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a02:	2304      	movs	r3, #4
 8000a04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a06:	2301      	movs	r3, #1
 8000a08:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4806      	ldr	r0, [pc, #24]	@ (8000a38 <MX_ADC4_Init+0xb4>)
 8000a20:	f001 f918 	bl	8001c54 <HAL_ADC_ConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 8000a2a:	f000 f977 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	3718      	adds	r7, #24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000b0 	.word	0x200000b0
 8000a3c:	50000500 	.word	0x50000500

08000a40 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000a46:	4b26      	ldr	r3, [pc, #152]	@ (8000ae0 <MX_CAN_Init+0xa0>)
 8000a48:	4a26      	ldr	r2, [pc, #152]	@ (8000ae4 <MX_CAN_Init+0xa4>)
 8000a4a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000a4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ae0 <MX_CAN_Init+0xa0>)
 8000a4e:	2212      	movs	r2, #18
 8000a50:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a52:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <MX_CAN_Init+0xa0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a58:	4b21      	ldr	r3, [pc, #132]	@ (8000ae0 <MX_CAN_Init+0xa0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000a5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ae0 <MX_CAN_Init+0xa0>)
 8000a60:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a64:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae0 <MX_CAN_Init+0xa0>)
 8000a68:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000a6c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae0 <MX_CAN_Init+0xa0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae0 <MX_CAN_Init+0xa0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ae0 <MX_CAN_Init+0xa0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000a80:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <MX_CAN_Init+0xa0>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a86:	4b16      	ldr	r3, [pc, #88]	@ (8000ae0 <MX_CAN_Init+0xa0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <MX_CAN_Init+0xa0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a92:	4813      	ldr	r0, [pc, #76]	@ (8000ae0 <MX_CAN_Init+0xa0>)
 8000a94:	f001 fd48 	bl	8002528 <HAL_CAN_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000a9e:	f000 f93d 	bl	8000d1c <Error_Handler>

	/*
	 * Configure CAN filter such that the MCU accepts
	 * only messages from dashboard
	 */
	filterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	623b      	str	r3, [r7, #32]
	filterConfig.FilterBank = 10;
 8000aa6:	230a      	movs	r3, #10
 8000aa8:	617b      	str	r3, [r7, #20]
	filterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = DASHBOARD_ID << 5; //
 8000aae:	f24e 0320 	movw	r3, #57376	@ 0xe020
 8000ab2:	603b      	str	r3, [r7, #0]
	filterConfig.FilterIdLow = 0x0000;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
	filterConfig.FilterMaskIdHigh = DASHBOARD_ID << 5;
 8000ab8:	f24e 0320 	movw	r3, #57376	@ 0xe020
 8000abc:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterMaskIdLow = 0x0000;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61fb      	str	r3, [r7, #28]
	filterConfig.SlaveStartFilterBank = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4803      	ldr	r0, [pc, #12]	@ (8000ae0 <MX_CAN_Init+0xa0>)
 8000ad4:	f001 fe23 	bl	800271e <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	@ 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000100 	.word	0x20000100
 8000ae4:	40006400 	.word	0x40006400

08000ae8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aee:	f107 0310 	add.w	r3, r7, #16
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b06:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <MX_TIM2_Init+0x98>)
 8000b08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <MX_TIM2_Init+0x98>)
 8000b10:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000b14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <MX_TIM2_Init+0x98>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 566;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <MX_TIM2_Init+0x98>)
 8000b1e:	f240 2236 	movw	r2, #566	@ 0x236
 8000b22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b24:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <MX_TIM2_Init+0x98>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <MX_TIM2_Init+0x98>)
 8000b2c:	2280      	movs	r2, #128	@ 0x80
 8000b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b30:	4813      	ldr	r0, [pc, #76]	@ (8000b80 <MX_TIM2_Init+0x98>)
 8000b32:	f004 f9e9 	bl	8004f08 <HAL_TIM_Base_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000b3c:	f000 f8ee 	bl	8000d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <MX_TIM2_Init+0x98>)
 8000b4e:	f004 fb9f 	bl	8005290 <HAL_TIM_ConfigClockSource>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000b58:	f000 f8e0 	bl	8000d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <MX_TIM2_Init+0x98>)
 8000b6a:	f004 fdc3 	bl	80056f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000b74:	f000 f8d2 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	3720      	adds	r7, #32
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000128 	.word	0x20000128

08000b84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b088      	sub	sp, #32
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <MX_TIM3_Init+0x98>)
 8000ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8000c20 <MX_TIM3_Init+0x9c>)
 8000ba6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <MX_TIM3_Init+0x98>)
 8000baa:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000bae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <MX_TIM3_Init+0x98>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 766;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	@ (8000c1c <MX_TIM3_Init+0x98>)
 8000bb8:	f240 22fe 	movw	r2, #766	@ 0x2fe
 8000bbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <MX_TIM3_Init+0x98>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <MX_TIM3_Init+0x98>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bca:	4814      	ldr	r0, [pc, #80]	@ (8000c1c <MX_TIM3_Init+0x98>)
 8000bcc:	f004 f99c 	bl	8004f08 <HAL_TIM_Base_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000bd6:	f000 f8a1 	bl	8000d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	4619      	mov	r1, r3
 8000be6:	480d      	ldr	r0, [pc, #52]	@ (8000c1c <MX_TIM3_Init+0x98>)
 8000be8:	f004 fb52 	bl	8005290 <HAL_TIM_ConfigClockSource>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000bf2:	f000 f893 	bl	8000d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	4806      	ldr	r0, [pc, #24]	@ (8000c1c <MX_TIM3_Init+0x98>)
 8000c04:	f004 fd76 	bl	80056f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000c0e:	f000 f885 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	3720      	adds	r7, #32
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000174 	.word	0x20000174
 8000c20:	40000400 	.word	0x40000400

08000c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c3a:	4b36      	ldr	r3, [pc, #216]	@ (8000d14 <MX_GPIO_Init+0xf0>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	4a35      	ldr	r2, [pc, #212]	@ (8000d14 <MX_GPIO_Init+0xf0>)
 8000c40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c44:	6153      	str	r3, [r2, #20]
 8000c46:	4b33      	ldr	r3, [pc, #204]	@ (8000d14 <MX_GPIO_Init+0xf0>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4b30      	ldr	r3, [pc, #192]	@ (8000d14 <MX_GPIO_Init+0xf0>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	4a2f      	ldr	r2, [pc, #188]	@ (8000d14 <MX_GPIO_Init+0xf0>)
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c5c:	6153      	str	r3, [r2, #20]
 8000c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d14 <MX_GPIO_Init+0xf0>)
 8000c60:	695b      	ldr	r3, [r3, #20]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d14 <MX_GPIO_Init+0xf0>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	4a29      	ldr	r2, [pc, #164]	@ (8000d14 <MX_GPIO_Init+0xf0>)
 8000c70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c74:	6153      	str	r3, [r2, #20]
 8000c76:	4b27      	ldr	r3, [pc, #156]	@ (8000d14 <MX_GPIO_Init+0xf0>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FAN_GPIO_Port, FAN_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2180      	movs	r1, #128	@ 0x80
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c8a:	f002 fd4b 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SIGN_LEFT_Pin|SIGN_RIGHT_Pin|BRAKE_Pin|BACK_LIGHT_Pin
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f643 4107 	movw	r1, #15367	@ 0x3c07
 8000c94:	4820      	ldr	r0, [pc, #128]	@ (8000d18 <MX_GPIO_Init+0xf4>)
 8000c96:	f002 fd45 	bl	8003724 <HAL_GPIO_WritePin>
                          |FRONT_LIGHT_Pin|CAMERA_Pin|HORN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : FAN_Pin */
  GPIO_InitStruct.Pin = FAN_Pin;
 8000c9a:	2380      	movs	r3, #128	@ 0x80
 8000c9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FAN_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb4:	f002 fba4 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIGN_LEFT_Pin SIGN_RIGHT_Pin BRAKE_Pin BACK_LIGHT_Pin
                           FRONT_LIGHT_Pin CAMERA_Pin HORN_Pin */
  GPIO_InitStruct.Pin = SIGN_LEFT_Pin|SIGN_RIGHT_Pin|BRAKE_Pin|BACK_LIGHT_Pin
 8000cb8:	f643 4307 	movw	r3, #15367	@ 0x3c07
 8000cbc:	60fb      	str	r3, [r7, #12]
                          |FRONT_LIGHT_Pin|CAMERA_Pin|HORN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4811      	ldr	r0, [pc, #68]	@ (8000d18 <MX_GPIO_Init+0xf4>)
 8000cd2:	f002 fb95 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : FRONT_LIGHT_OFFLINE_Pin REVERSE_OFFLINE_Pin CAMERA_OFFLINE_Pin HORN_OFFLINE_Pin
                           SIGN_RIGHT_OFFLINE_Pin FAN_OFFLINE_Pin SIGN_LEFT_OFFLINE_Pin */
  GPIO_InitStruct.Pin = FRONT_LIGHT_OFFLINE_Pin|REVERSE_OFFLINE_Pin|CAMERA_OFFLINE_Pin|HORN_OFFLINE_Pin
 8000cd6:	f248 33f0 	movw	r3, #33776	@ 0x83f0
 8000cda:	60fb      	str	r3, [r7, #12]
                          |SIGN_RIGHT_OFFLINE_Pin|FAN_OFFLINE_Pin|SIGN_LEFT_OFFLINE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480b      	ldr	r0, [pc, #44]	@ (8000d18 <MX_GPIO_Init+0xf4>)
 8000cec:	f002 fb88 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : BACK_LIGHT_OFFLINE_Pin ENABLE_OFFLINE_Pin BRAKE_OFFLINE_Pin */
  GPIO_InitStruct.Pin = BACK_LIGHT_OFFLINE_Pin|ENABLE_OFFLINE_Pin|BRAKE_OFFLINE_Pin;
 8000cf0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000cf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	4619      	mov	r1, r3
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d08:	f002 fb7a 	bl	8003400 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021000 	.word	0x40021000
 8000d18:	48000400 	.word	0x48000400

08000d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <Error_Handler+0x8>

08000d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <HAL_MspInit+0x44>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	4a0e      	ldr	r2, [pc, #56]	@ (8000d6c <HAL_MspInit+0x44>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6193      	str	r3, [r2, #24]
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <HAL_MspInit+0x44>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <HAL_MspInit+0x44>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	4a08      	ldr	r2, [pc, #32]	@ (8000d6c <HAL_MspInit+0x44>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d50:	61d3      	str	r3, [r2, #28]
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_MspInit+0x44>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000

08000d70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	@ 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC4)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a15      	ldr	r2, [pc, #84]	@ (8000de4 <HAL_ADC_MspInit+0x74>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d124      	bne.n	8000ddc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC4_MspInit 0 */

  /* USER CODE END ADC4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <HAL_ADC_MspInit+0x78>)
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	4a14      	ldr	r2, [pc, #80]	@ (8000de8 <HAL_ADC_MspInit+0x78>)
 8000d98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000d9c:	6153      	str	r3, [r2, #20]
 8000d9e:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_ADC_MspInit+0x78>)
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <HAL_ADC_MspInit+0x78>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4a0e      	ldr	r2, [pc, #56]	@ (8000de8 <HAL_ADC_MspInit+0x78>)
 8000db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000db4:	6153      	str	r3, [r2, #20]
 8000db6:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <HAL_ADC_MspInit+0x78>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC4 GPIO Configuration
    PB14     ------> ADC4_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000dc2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4805      	ldr	r0, [pc, #20]	@ (8000dec <HAL_ADC_MspInit+0x7c>)
 8000dd8:	f002 fb12 	bl	8003400 <HAL_GPIO_Init>

  /* USER CODE END ADC4_MspInit 1 */

  }

}
 8000ddc:	bf00      	nop
 8000dde:	3728      	adds	r7, #40	@ 0x28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	50000500 	.word	0x50000500
 8000de8:	40021000 	.word	0x40021000
 8000dec:	48000400 	.word	0x48000400

08000df0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	@ 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000e80 <HAL_CAN_MspInit+0x90>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d131      	bne.n	8000e76 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e12:	4b1c      	ldr	r3, [pc, #112]	@ (8000e84 <HAL_CAN_MspInit+0x94>)
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	4a1b      	ldr	r2, [pc, #108]	@ (8000e84 <HAL_CAN_MspInit+0x94>)
 8000e18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e1c:	61d3      	str	r3, [r2, #28]
 8000e1e:	4b19      	ldr	r3, [pc, #100]	@ (8000e84 <HAL_CAN_MspInit+0x94>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <HAL_CAN_MspInit+0x94>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	4a15      	ldr	r2, [pc, #84]	@ (8000e84 <HAL_CAN_MspInit+0x94>)
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e34:	6153      	str	r3, [r2, #20]
 8000e36:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <HAL_CAN_MspInit+0x94>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e42:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000e54:	2309      	movs	r3, #9
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e62:	f002 facd 	bl	8003400 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2014      	movs	r0, #20
 8000e6c:	f002 fa91 	bl	8003392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000e70:	2014      	movs	r0, #20
 8000e72:	f002 faaa 	bl	80033ca <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	@ 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40006400 	.word	0x40006400
 8000e84:	40021000 	.word	0x40021000

08000e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e98:	d114      	bne.n	8000ec4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e9a:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <HAL_TIM_Base_MspInit+0x78>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a18      	ldr	r2, [pc, #96]	@ (8000f00 <HAL_TIM_Base_MspInit+0x78>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	61d3      	str	r3, [r2, #28]
 8000ea6:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <HAL_TIM_Base_MspInit+0x78>)
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	201c      	movs	r0, #28
 8000eb8:	f002 fa6b 	bl	8003392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ebc:	201c      	movs	r0, #28
 8000ebe:	f002 fa84 	bl	80033ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ec2:	e018      	b.n	8000ef6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <HAL_TIM_Base_MspInit+0x7c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d113      	bne.n	8000ef6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <HAL_TIM_Base_MspInit+0x78>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	@ (8000f00 <HAL_TIM_Base_MspInit+0x78>)
 8000ed4:	f043 0302 	orr.w	r3, r3, #2
 8000ed8:	61d3      	str	r3, [r2, #28]
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <HAL_TIM_Base_MspInit+0x78>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	201d      	movs	r0, #29
 8000eec:	f002 fa51 	bl	8003392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ef0:	201d      	movs	r0, #29
 8000ef2:	f002 fa6a 	bl	80033ca <HAL_NVIC_EnableIRQ>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000
 8000f04:	40000400 	.word	0x40000400

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <NMI_Handler+0x4>

08000f10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <MemManage_Handler+0x4>

08000f20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <BusFault_Handler+0x4>

08000f28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <UsageFault_Handler+0x4>

08000f30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f5e:	f000 f9f9 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[1];

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000f6e:	4808      	ldr	r0, [pc, #32]	@ (8000f90 <USB_LP_CAN_RX0_IRQHandler+0x28>)
 8000f70:	f001 fefb 	bl	8002d6a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

	//get message from CAN, sent by DASHBOARD
	HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000f74:	463b      	mov	r3, r7
 8000f76:	1d3a      	adds	r2, r7, #4
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <USB_LP_CAN_RX0_IRQHandler+0x28>)
 8000f7c:	f001 fdad 	bl	8002ada <HAL_CAN_GetRxMessage>

	//update the auxiliaries with the frame from DASHBOARD
	aux_pointer->state = RxData[0];
 8000f80:	4b04      	ldr	r3, [pc, #16]	@ (8000f94 <USB_LP_CAN_RX0_IRQHandler+0x2c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	783a      	ldrb	r2, [r7, #0]
 8000f86:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	3720      	adds	r7, #32
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000100 	.word	0x20000100
 8000f94:	20000004 	.word	0x20000004

08000f98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f9e:	4822      	ldr	r0, [pc, #136]	@ (8001028 <TIM2_IRQHandler+0x90>)
 8000fa0:	f004 f874 	bl	800508c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

	aux_offline_switch = HAL_GPIO_ReadPin(GPIOA, ENABLE_OFFLINE_Pin);
 8000fa4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fac:	f002 fba2 	bl	80036f4 <HAL_GPIO_ReadPin>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800102c <TIM2_IRQHandler+0x94>)
 8000fb6:	701a      	strb	r2, [r3, #0]

	if (dashboard_activity <= 100 && aux_offline_switch == OFF) {
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001030 <TIM2_IRQHandler+0x98>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b64      	cmp	r3, #100	@ 0x64
 8000fbe:	d80a      	bhi.n	8000fd6 <TIM2_IRQHandler+0x3e>
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <TIM2_IRQHandler+0x94>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d106      	bne.n	8000fd6 <TIM2_IRQHandler+0x3e>
		dashboard_activity++;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <TIM2_IRQHandler+0x98>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <TIM2_IRQHandler+0x98>)
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	e024      	b.n	8001020 <TIM2_IRQHandler+0x88>
	} else if (dashboard_activity > 100 && aux_offline_switch == OFF) {
 8000fd6:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <TIM2_IRQHandler+0x98>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b64      	cmp	r3, #100	@ 0x64
 8000fdc:	d908      	bls.n	8000ff0 <TIM2_IRQHandler+0x58>
 8000fde:	4b13      	ldr	r3, [pc, #76]	@ (800102c <TIM2_IRQHandler+0x94>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d104      	bne.n	8000ff0 <TIM2_IRQHandler+0x58>
		aux_pointer->state = SAFE_STATE;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <TIM2_IRQHandler+0x9c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	e017      	b.n	8001020 <TIM2_IRQHandler+0x88>
	} else if (aux_offline_switch == ON) {
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <TIM2_IRQHandler+0x94>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d113      	bne.n	8001020 <TIM2_IRQHandler+0x88>
		Update_Offline_Mode(aux_offline);
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8001038 <TIM2_IRQHandler+0xa0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fba5 	bl	800074c <Update_Offline_Mode>
		Update_Auxiliary_System(aux_offline, toggle_sign_left,
 8001002:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <TIM2_IRQHandler+0xa0>)
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	4b0d      	ldr	r3, [pc, #52]	@ (800103c <TIM2_IRQHandler+0xa4>)
 8001008:	7819      	ldrb	r1, [r3, #0]
 800100a:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <TIM2_IRQHandler+0xa8>)
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	4b0d      	ldr	r3, [pc, #52]	@ (8001044 <TIM2_IRQHandler+0xac>)
 8001010:	781c      	ldrb	r4, [r3, #0]
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <TIM2_IRQHandler+0xb0>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	4623      	mov	r3, r4
 800101a:	f7ff f929 	bl	8000270 <Update_Auxiliary_System>
				toggle_sign_right, sign_left_500ms, sign_right_500ms);
	}

  /* USER CODE END TIM2_IRQn 1 */
}
 800101e:	e7ff      	b.n	8001020 <TIM2_IRQHandler+0x88>
 8001020:	bf00      	nop
 8001022:	3704      	adds	r7, #4
 8001024:	46bd      	mov	sp, r7
 8001026:	bd90      	pop	{r4, r7, pc}
 8001028:	20000128 	.word	0x20000128
 800102c:	200001c7 	.word	0x200001c7
 8001030:	200001cc 	.word	0x200001cc
 8001034:	20000004 	.word	0x20000004
 8001038:	20000008 	.word	0x20000008
 800103c:	200001c5 	.word	0x200001c5
 8001040:	200001c6 	.word	0x200001c6
 8001044:	200001c8 	.word	0x200001c8
 8001048:	200001c9 	.word	0x200001c9

0800104c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800104c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104e:	b097      	sub	sp, #92	@ 0x5c
 8001050:	af16      	add	r7, sp, #88	@ 0x58
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001052:	4823      	ldr	r0, [pc, #140]	@ (80010e0 <TIM3_IRQHandler+0x94>)
 8001054:	f004 f81a 	bl	800508c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

	Update_Auxiliary_System(aux_pointer, toggle_sign_left, toggle_sign_right,
 8001058:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <TIM3_IRQHandler+0x98>)
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	4b22      	ldr	r3, [pc, #136]	@ (80010e8 <TIM3_IRQHandler+0x9c>)
 800105e:	7819      	ldrb	r1, [r3, #0]
 8001060:	4b22      	ldr	r3, [pc, #136]	@ (80010ec <TIM3_IRQHandler+0xa0>)
 8001062:	781a      	ldrb	r2, [r3, #0]
 8001064:	4b22      	ldr	r3, [pc, #136]	@ (80010f0 <TIM3_IRQHandler+0xa4>)
 8001066:	781c      	ldrb	r4, [r3, #0]
 8001068:	4b22      	ldr	r3, [pc, #136]	@ (80010f4 <TIM3_IRQHandler+0xa8>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	4623      	mov	r3, r4
 8001070:	f7ff f8fe 	bl	8000270 <Update_Auxiliary_System>
			sign_left_500ms, sign_right_500ms);

	//Check if Auxiliary works just as planned
	Get_ADC_Value(hadc4, aux_pointer, toggle_sign_left, toggle_sign_right,
 8001074:	4b1b      	ldr	r3, [pc, #108]	@ (80010e4 <TIM3_IRQHandler+0x98>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a1b      	ldr	r2, [pc, #108]	@ (80010e8 <TIM3_IRQHandler+0x9c>)
 800107a:	7812      	ldrb	r2, [r2, #0]
 800107c:	491b      	ldr	r1, [pc, #108]	@ (80010ec <TIM3_IRQHandler+0xa0>)
 800107e:	7809      	ldrb	r1, [r1, #0]
 8001080:	481d      	ldr	r0, [pc, #116]	@ (80010f8 <TIM3_IRQHandler+0xac>)
 8001082:	8800      	ldrh	r0, [r0, #0]
 8001084:	4604      	mov	r4, r0
 8001086:	4e1d      	ldr	r6, [pc, #116]	@ (80010fc <TIM3_IRQHandler+0xb0>)
 8001088:	481d      	ldr	r0, [pc, #116]	@ (8001100 <TIM3_IRQHandler+0xb4>)
 800108a:	9014      	str	r0, [sp, #80]	@ 0x50
 800108c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800108e:	9112      	str	r1, [sp, #72]	@ 0x48
 8001090:	9211      	str	r2, [sp, #68]	@ 0x44
 8001092:	9310      	str	r3, [sp, #64]	@ 0x40
 8001094:	466d      	mov	r5, sp
 8001096:	f106 0410 	add.w	r4, r6, #16
 800109a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800109e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010aa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80010ae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010b2:	f7ff faeb 	bl	800068c <Get_ADC_Value>
			adc_value, aux_activity);

	//Transmit Activity Check CAN frame
	Send_Auxiliary_State_CAN(hcan, aux_activity);
 80010b6:	4e13      	ldr	r6, [pc, #76]	@ (8001104 <TIM3_IRQHandler+0xb8>)
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <TIM3_IRQHandler+0xb4>)
 80010ba:	9306      	str	r3, [sp, #24]
 80010bc:	466d      	mov	r5, sp
 80010be:	f106 0410 	add.w	r4, r6, #16
 80010c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80010ce:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010d2:	f7ff fab1 	bl	8000638 <Send_Auxiliary_State_CAN>

  /* USER CODE END TIM3_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	3704      	adds	r7, #4
 80010da:	46bd      	mov	sp, r7
 80010dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000174 	.word	0x20000174
 80010e4:	20000004 	.word	0x20000004
 80010e8:	200001c5 	.word	0x200001c5
 80010ec:	200001c6 	.word	0x200001c6
 80010f0:	200001c8 	.word	0x200001c8
 80010f4:	200001c9 	.word	0x200001c9
 80010f8:	200001ca 	.word	0x200001ca
 80010fc:	200000b0 	.word	0x200000b0
 8001100:	200001d0 	.word	0x200001d0
 8001104:	20000100 	.word	0x20000100

08001108 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	e00a      	b.n	8001130 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800111a:	f3af 8000 	nop.w
 800111e:	4601      	mov	r1, r0
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	1c5a      	adds	r2, r3, #1
 8001124:	60ba      	str	r2, [r7, #8]
 8001126:	b2ca      	uxtb	r2, r1
 8001128:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	3301      	adds	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	429a      	cmp	r2, r3
 8001136:	dbf0      	blt.n	800111a <_read+0x12>
  }

  return len;
 8001138:	687b      	ldr	r3, [r7, #4]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3718      	adds	r7, #24
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	e009      	b.n	8001168 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	60ba      	str	r2, [r7, #8]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	3301      	adds	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	429a      	cmp	r2, r3
 800116e:	dbf1      	blt.n	8001154 <_write+0x12>
  }
  return len;
 8001170:	687b      	ldr	r3, [r7, #4]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <_close>:

int _close(int file)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011a2:	605a      	str	r2, [r3, #4]
  return 0;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <_isatty>:

int _isatty(int file)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ec:	4a14      	ldr	r2, [pc, #80]	@ (8001240 <_sbrk+0x5c>)
 80011ee:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <_sbrk+0x60>)
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f8:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <_sbrk+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d102      	bne.n	8001206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001200:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <_sbrk+0x64>)
 8001202:	4a12      	ldr	r2, [pc, #72]	@ (800124c <_sbrk+0x68>)
 8001204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001206:	4b10      	ldr	r3, [pc, #64]	@ (8001248 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	429a      	cmp	r2, r3
 8001212:	d207      	bcs.n	8001224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001214:	f004 fc92 	bl	8005b3c <__errno>
 8001218:	4603      	mov	r3, r0
 800121a:	220c      	movs	r2, #12
 800121c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	e009      	b.n	8001238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001224:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <_sbrk+0x64>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122a:	4b07      	ldr	r3, [pc, #28]	@ (8001248 <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <_sbrk+0x64>)
 8001234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001236:	68fb      	ldr	r3, [r7, #12]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20008000 	.word	0x20008000
 8001244:	00000400 	.word	0x00000400
 8001248:	200001d4 	.word	0x200001d4
 800124c:	20000328 	.word	0x20000328

08001250 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <SystemInit+0x20>)
 8001256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800125a:	4a05      	ldr	r2, [pc, #20]	@ (8001270 <SystemInit+0x20>)
 800125c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001260:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001274:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001278:	f7ff ffea 	bl	8001250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800127c:	480c      	ldr	r0, [pc, #48]	@ (80012b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800127e:	490d      	ldr	r1, [pc, #52]	@ (80012b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001280:	4a0d      	ldr	r2, [pc, #52]	@ (80012b8 <LoopForever+0xe>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001284:	e002      	b.n	800128c <LoopCopyDataInit>

08001286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128a:	3304      	adds	r3, #4

0800128c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800128c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001290:	d3f9      	bcc.n	8001286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001292:	4a0a      	ldr	r2, [pc, #40]	@ (80012bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001294:	4c0a      	ldr	r4, [pc, #40]	@ (80012c0 <LoopForever+0x16>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001298:	e001      	b.n	800129e <LoopFillZerobss>

0800129a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129c:	3204      	adds	r2, #4

0800129e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a0:	d3fb      	bcc.n	800129a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a2:	f004 fc51 	bl	8005b48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012a6:	f7ff fae5 	bl	8000874 <main>

080012aa <LoopForever>:

LoopForever:
    b LoopForever
 80012aa:	e7fe      	b.n	80012aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012ac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012b8:	08006b50 	.word	0x08006b50
  ldr r2, =_sbss
 80012bc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012c0:	20000328 	.word	0x20000328

080012c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC1_2_IRQHandler>
	...

080012c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <HAL_Init+0x28>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a07      	ldr	r2, [pc, #28]	@ (80012f0 <HAL_Init+0x28>)
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d8:	2003      	movs	r0, #3
 80012da:	f002 f84f 	bl	800337c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012de:	200f      	movs	r0, #15
 80012e0:	f000 f808 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e4:	f7ff fd20 	bl	8000d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40022000 	.word	0x40022000

080012f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <HAL_InitTick+0x54>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HAL_InitTick+0x58>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f002 f867 	bl	80033e6 <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00e      	b.n	8001340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d80a      	bhi.n	800133e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f002 f82f 	bl	8003392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4a06      	ldr	r2, [pc, #24]	@ (8001350 <HAL_InitTick+0x5c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	2000000c 	.word	0x2000000c
 800134c:	20000014 	.word	0x20000014
 8001350:	20000010 	.word	0x20000010

08001354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_IncTick+0x20>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_IncTick+0x24>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a04      	ldr	r2, [pc, #16]	@ (8001378 <HAL_IncTick+0x24>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000014 	.word	0x20000014
 8001378:	200001d8 	.word	0x200001d8

0800137c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001380:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	200001d8 	.word	0x200001d8

08001394 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff ffee 	bl	800137c <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_Delay+0x44>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013ba:	bf00      	nop
 80013bc:	f7ff ffde 	bl	800137c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000014 	.word	0x20000014

080013dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b09a      	sub	sp, #104	@ 0x68
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e1c9      	b.n	8001790 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	2b00      	cmp	r3, #0
 800140c:	d176      	bne.n	80014fc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	2b00      	cmp	r3, #0
 8001414:	d152      	bne.n	80014bc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fc9d 	bl	8000d70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d13b      	bne.n	80014bc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 ff53 	bl	80022f0 <ADC_Disable>
 800144a:	4603      	mov	r3, r0
 800144c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001454:	f003 0310 	and.w	r3, r3, #16
 8001458:	2b00      	cmp	r3, #0
 800145a:	d12f      	bne.n	80014bc <HAL_ADC_Init+0xe0>
 800145c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001460:	2b00      	cmp	r3, #0
 8001462:	d12b      	bne.n	80014bc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001468:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800146c:	f023 0302 	bic.w	r3, r3, #2
 8001470:	f043 0202 	orr.w	r2, r3, #2
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001486:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001496:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001498:	4b86      	ldr	r3, [pc, #536]	@ (80016b4 <HAL_ADC_Init+0x2d8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a86      	ldr	r2, [pc, #536]	@ (80016b8 <HAL_ADC_Init+0x2dc>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	0c9a      	lsrs	r2, r3, #18
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014ae:	e002      	b.n	80014b6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f9      	bne.n	80014b0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014d8:	d110      	bne.n	80014fc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	f023 0312 	bic.w	r3, r3, #18
 80014e2:	f043 0210 	orr.w	r2, r3, #16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ee:	f043 0201 	orr.w	r2, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	2b00      	cmp	r3, #0
 8001506:	f040 8136 	bne.w	8001776 <HAL_ADC_Init+0x39a>
 800150a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800150e:	2b00      	cmp	r3, #0
 8001510:	f040 8131 	bne.w	8001776 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800151e:	2b00      	cmp	r3, #0
 8001520:	f040 8129 	bne.w	8001776 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001528:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800152c:	f043 0202 	orr.w	r2, r3, #2
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800153c:	d004      	beq.n	8001548 <HAL_ADC_Init+0x16c>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a5e      	ldr	r2, [pc, #376]	@ (80016bc <HAL_ADC_Init+0x2e0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d101      	bne.n	800154c <HAL_ADC_Init+0x170>
 8001548:	4b5d      	ldr	r3, [pc, #372]	@ (80016c0 <HAL_ADC_Init+0x2e4>)
 800154a:	e000      	b.n	800154e <HAL_ADC_Init+0x172>
 800154c:	4b5d      	ldr	r3, [pc, #372]	@ (80016c4 <HAL_ADC_Init+0x2e8>)
 800154e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001558:	d102      	bne.n	8001560 <HAL_ADC_Init+0x184>
 800155a:	4b58      	ldr	r3, [pc, #352]	@ (80016bc <HAL_ADC_Init+0x2e0>)
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	e01a      	b.n	8001596 <HAL_ADC_Init+0x1ba>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a55      	ldr	r2, [pc, #340]	@ (80016bc <HAL_ADC_Init+0x2e0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d103      	bne.n	8001572 <HAL_ADC_Init+0x196>
 800156a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	e011      	b.n	8001596 <HAL_ADC_Init+0x1ba>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a54      	ldr	r2, [pc, #336]	@ (80016c8 <HAL_ADC_Init+0x2ec>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d102      	bne.n	8001582 <HAL_ADC_Init+0x1a6>
 800157c:	4b53      	ldr	r3, [pc, #332]	@ (80016cc <HAL_ADC_Init+0x2f0>)
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	e009      	b.n	8001596 <HAL_ADC_Init+0x1ba>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a51      	ldr	r2, [pc, #324]	@ (80016cc <HAL_ADC_Init+0x2f0>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d102      	bne.n	8001592 <HAL_ADC_Init+0x1b6>
 800158c:	4b4e      	ldr	r3, [pc, #312]	@ (80016c8 <HAL_ADC_Init+0x2ec>)
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	e001      	b.n	8001596 <HAL_ADC_Init+0x1ba>
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d108      	bne.n	80015b6 <HAL_ADC_Init+0x1da>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_ADC_Init+0x1da>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_ADC_Init+0x1dc>
 80015b6:	2300      	movs	r3, #0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d11c      	bne.n	80015f6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015bc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d010      	beq.n	80015e4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d107      	bne.n	80015de <HAL_ADC_Init+0x202>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <HAL_ADC_Init+0x202>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <HAL_ADC_Init+0x204>
 80015de:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d108      	bne.n	80015f6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80015e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015f4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	7e5b      	ldrb	r3, [r3, #25]
 80015fa:	035b      	lsls	r3, r3, #13
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001600:	2a01      	cmp	r2, #1
 8001602:	d002      	beq.n	800160a <HAL_ADC_Init+0x22e>
 8001604:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001608:	e000      	b.n	800160c <HAL_ADC_Init+0x230>
 800160a:	2200      	movs	r2, #0
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4313      	orrs	r3, r2
 800161a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800161c:	4313      	orrs	r3, r2
 800161e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d11b      	bne.n	8001662 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7e5b      	ldrb	r3, [r3, #25]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001636:	3b01      	subs	r3, #1
 8001638:	045a      	lsls	r2, r3, #17
 800163a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800163c:	4313      	orrs	r3, r2
 800163e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001642:	663b      	str	r3, [r7, #96]	@ 0x60
 8001644:	e00d      	b.n	8001662 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800164e:	f043 0220 	orr.w	r2, r3, #32
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165a:	f043 0201 	orr.w	r2, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001666:	2b01      	cmp	r3, #1
 8001668:	d03a      	beq.n	80016e0 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a16      	ldr	r2, [pc, #88]	@ (80016c8 <HAL_ADC_Init+0x2ec>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d004      	beq.n	800167e <HAL_ADC_Init+0x2a2>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a14      	ldr	r2, [pc, #80]	@ (80016cc <HAL_ADC_Init+0x2f0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d128      	bne.n	80016d0 <HAL_ADC_Init+0x2f4>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001682:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001686:	d012      	beq.n	80016ae <HAL_ADC_Init+0x2d2>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800168c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001690:	d00a      	beq.n	80016a8 <HAL_ADC_Init+0x2cc>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001696:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800169a:	d002      	beq.n	80016a2 <HAL_ADC_Init+0x2c6>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a0:	e018      	b.n	80016d4 <HAL_ADC_Init+0x2f8>
 80016a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016a6:	e015      	b.n	80016d4 <HAL_ADC_Init+0x2f8>
 80016a8:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80016ac:	e012      	b.n	80016d4 <HAL_ADC_Init+0x2f8>
 80016ae:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80016b2:	e00f      	b.n	80016d4 <HAL_ADC_Init+0x2f8>
 80016b4:	2000000c 	.word	0x2000000c
 80016b8:	431bde83 	.word	0x431bde83
 80016bc:	50000100 	.word	0x50000100
 80016c0:	50000300 	.word	0x50000300
 80016c4:	50000700 	.word	0x50000700
 80016c8:	50000400 	.word	0x50000400
 80016cc:	50000500 	.word	0x50000500
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80016d8:	4313      	orrs	r3, r2
 80016da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80016dc:	4313      	orrs	r3, r2
 80016de:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 030c 	and.w	r3, r3, #12
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d114      	bne.n	8001718 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6812      	ldr	r2, [r2, #0]
 80016f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80016fc:	f023 0302 	bic.w	r3, r3, #2
 8001700:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7e1b      	ldrb	r3, [r3, #24]
 8001706:	039a      	lsls	r2, r3, #14
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4313      	orrs	r3, r2
 8001712:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001714:	4313      	orrs	r3, r2
 8001716:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	4b1e      	ldr	r3, [pc, #120]	@ (8001798 <HAL_ADC_Init+0x3bc>)
 8001720:	4013      	ands	r3, r2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001728:	430b      	orrs	r3, r1
 800172a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d10c      	bne.n	800174e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f023 010f 	bic.w	r1, r3, #15
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	1e5a      	subs	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	631a      	str	r2, [r3, #48]	@ 0x30
 800174c:	e007      	b.n	800175e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 020f 	bic.w	r2, r2, #15
 800175c:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	f023 0303 	bic.w	r3, r3, #3
 800176c:	f043 0201 	orr.w	r2, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	641a      	str	r2, [r3, #64]	@ 0x40
 8001774:	e00a      	b.n	800178c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	f023 0312 	bic.w	r3, r3, #18
 800177e:	f043 0210 	orr.w	r2, r3, #16
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001786:	2301      	movs	r3, #1
 8001788:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800178c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001790:	4618      	mov	r0, r3
 8001792:	3768      	adds	r7, #104	@ 0x68
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	fff0c007 	.word	0xfff0c007

0800179c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f040 80f9 	bne.w	80019aa <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_ADC_Start+0x2a>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e0f4      	b.n	80019b0 <HAL_ADC_Start+0x214>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 fd2a 	bl	8002228 <ADC_Enable>
 80017d4:	4603      	mov	r3, r0
 80017d6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 80e0 	bne.w	80019a0 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017e8:	f023 0301 	bic.w	r3, r3, #1
 80017ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017fc:	d004      	beq.n	8001808 <HAL_ADC_Start+0x6c>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a6d      	ldr	r2, [pc, #436]	@ (80019b8 <HAL_ADC_Start+0x21c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d106      	bne.n	8001816 <HAL_ADC_Start+0x7a>
 8001808:	4b6c      	ldr	r3, [pc, #432]	@ (80019bc <HAL_ADC_Start+0x220>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 031f 	and.w	r3, r3, #31
 8001810:	2b00      	cmp	r3, #0
 8001812:	d010      	beq.n	8001836 <HAL_ADC_Start+0x9a>
 8001814:	e005      	b.n	8001822 <HAL_ADC_Start+0x86>
 8001816:	4b6a      	ldr	r3, [pc, #424]	@ (80019c0 <HAL_ADC_Start+0x224>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	2b00      	cmp	r3, #0
 8001820:	d009      	beq.n	8001836 <HAL_ADC_Start+0x9a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800182a:	d004      	beq.n	8001836 <HAL_ADC_Start+0x9a>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a64      	ldr	r2, [pc, #400]	@ (80019c4 <HAL_ADC_Start+0x228>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d115      	bne.n	8001862 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d036      	beq.n	80018be <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001854:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001858:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001860:	e02d      	b.n	80018be <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001876:	d004      	beq.n	8001882 <HAL_ADC_Start+0xe6>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a4e      	ldr	r2, [pc, #312]	@ (80019b8 <HAL_ADC_Start+0x21c>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d10a      	bne.n	8001898 <HAL_ADC_Start+0xfc>
 8001882:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	e008      	b.n	80018aa <HAL_ADC_Start+0x10e>
 8001898:	4b4a      	ldr	r3, [pc, #296]	@ (80019c4 <HAL_ADC_Start+0x228>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	bf14      	ite	ne
 80018a4:	2301      	movne	r3, #1
 80018a6:	2300      	moveq	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018ca:	d106      	bne.n	80018da <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d0:	f023 0206 	bic.w	r2, r3, #6
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80018d8:	e002      	b.n	80018e0 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	221c      	movs	r2, #28
 80018ee:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018f8:	d004      	beq.n	8001904 <HAL_ADC_Start+0x168>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a2e      	ldr	r2, [pc, #184]	@ (80019b8 <HAL_ADC_Start+0x21c>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d106      	bne.n	8001912 <HAL_ADC_Start+0x176>
 8001904:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <HAL_ADC_Start+0x220>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	2b00      	cmp	r3, #0
 800190e:	d03e      	beq.n	800198e <HAL_ADC_Start+0x1f2>
 8001910:	e005      	b.n	800191e <HAL_ADC_Start+0x182>
 8001912:	4b2b      	ldr	r3, [pc, #172]	@ (80019c0 <HAL_ADC_Start+0x224>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 031f 	and.w	r3, r3, #31
 800191a:	2b00      	cmp	r3, #0
 800191c:	d037      	beq.n	800198e <HAL_ADC_Start+0x1f2>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001926:	d004      	beq.n	8001932 <HAL_ADC_Start+0x196>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a22      	ldr	r2, [pc, #136]	@ (80019b8 <HAL_ADC_Start+0x21c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d106      	bne.n	8001940 <HAL_ADC_Start+0x1a4>
 8001932:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <HAL_ADC_Start+0x220>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 031f 	and.w	r3, r3, #31
 800193a:	2b05      	cmp	r3, #5
 800193c:	d027      	beq.n	800198e <HAL_ADC_Start+0x1f2>
 800193e:	e005      	b.n	800194c <HAL_ADC_Start+0x1b0>
 8001940:	4b1f      	ldr	r3, [pc, #124]	@ (80019c0 <HAL_ADC_Start+0x224>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 031f 	and.w	r3, r3, #31
 8001948:	2b05      	cmp	r3, #5
 800194a:	d020      	beq.n	800198e <HAL_ADC_Start+0x1f2>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001954:	d004      	beq.n	8001960 <HAL_ADC_Start+0x1c4>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a17      	ldr	r2, [pc, #92]	@ (80019b8 <HAL_ADC_Start+0x21c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d106      	bne.n	800196e <HAL_ADC_Start+0x1d2>
 8001960:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <HAL_ADC_Start+0x220>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 031f 	and.w	r3, r3, #31
 8001968:	2b09      	cmp	r3, #9
 800196a:	d010      	beq.n	800198e <HAL_ADC_Start+0x1f2>
 800196c:	e005      	b.n	800197a <HAL_ADC_Start+0x1de>
 800196e:	4b14      	ldr	r3, [pc, #80]	@ (80019c0 <HAL_ADC_Start+0x224>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	2b09      	cmp	r3, #9
 8001978:	d009      	beq.n	800198e <HAL_ADC_Start+0x1f2>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001982:	d004      	beq.n	800198e <HAL_ADC_Start+0x1f2>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0e      	ldr	r2, [pc, #56]	@ (80019c4 <HAL_ADC_Start+0x228>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10f      	bne.n	80019ae <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f042 0204 	orr.w	r2, r2, #4
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	e006      	b.n	80019ae <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80019a8:	e001      	b.n	80019ae <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019aa:	2302      	movs	r3, #2
 80019ac:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	50000100 	.word	0x50000100
 80019bc:	50000300 	.word	0x50000300
 80019c0:	50000700 	.word	0x50000700
 80019c4:	50000400 	.word	0x50000400

080019c8 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_Stop+0x1a>
 80019de:	2302      	movs	r3, #2
 80019e0:	e023      	b.n	8001a2a <HAL_ADC_Stop+0x62>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80019ea:	216c      	movs	r1, #108	@ 0x6c
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 fce5 	bl	80023bc <ADC_ConversionStop>
 80019f2:	4603      	mov	r3, r0
 80019f4:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d111      	bne.n	8001a20 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 fc77 	bl	80022f0 <ADC_Disable>
 8001a02:	4603      	mov	r3, r0
 8001a04:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d109      	bne.n	8001a20 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a10:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	f043 0201 	orr.w	r2, r3, #1
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d102      	bne.n	8001a50 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	e03a      	b.n	8001ac6 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a58:	d004      	beq.n	8001a64 <HAL_ADC_PollForConversion+0x30>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a72      	ldr	r2, [pc, #456]	@ (8001c28 <HAL_ADC_PollForConversion+0x1f4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d101      	bne.n	8001a68 <HAL_ADC_PollForConversion+0x34>
 8001a64:	4b71      	ldr	r3, [pc, #452]	@ (8001c2c <HAL_ADC_PollForConversion+0x1f8>)
 8001a66:	e000      	b.n	8001a6a <HAL_ADC_PollForConversion+0x36>
 8001a68:	4b71      	ldr	r3, [pc, #452]	@ (8001c30 <HAL_ADC_PollForConversion+0x1fc>)
 8001a6a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 031f 	and.w	r3, r3, #31
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d112      	bne.n	8001a9e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d11d      	bne.n	8001ac2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	f043 0220 	orr.w	r2, r3, #32
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0bf      	b.n	8001c1e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	f043 0220 	orr.w	r2, r3, #32
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0ad      	b.n	8001c1e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001ac2:	230c      	movs	r3, #12
 8001ac4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ace:	d004      	beq.n	8001ada <HAL_ADC_PollForConversion+0xa6>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a54      	ldr	r2, [pc, #336]	@ (8001c28 <HAL_ADC_PollForConversion+0x1f4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d106      	bne.n	8001ae8 <HAL_ADC_PollForConversion+0xb4>
 8001ada:	4b54      	ldr	r3, [pc, #336]	@ (8001c2c <HAL_ADC_PollForConversion+0x1f8>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d010      	beq.n	8001b08 <HAL_ADC_PollForConversion+0xd4>
 8001ae6:	e005      	b.n	8001af4 <HAL_ADC_PollForConversion+0xc0>
 8001ae8:	4b51      	ldr	r3, [pc, #324]	@ (8001c30 <HAL_ADC_PollForConversion+0x1fc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f003 031f 	and.w	r3, r3, #31
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d009      	beq.n	8001b08 <HAL_ADC_PollForConversion+0xd4>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001afc:	d004      	beq.n	8001b08 <HAL_ADC_PollForConversion+0xd4>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a4c      	ldr	r2, [pc, #304]	@ (8001c34 <HAL_ADC_PollForConversion+0x200>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d104      	bne.n	8001b12 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	e00f      	b.n	8001b32 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b1a:	d004      	beq.n	8001b26 <HAL_ADC_PollForConversion+0xf2>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a41      	ldr	r2, [pc, #260]	@ (8001c28 <HAL_ADC_PollForConversion+0x1f4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d102      	bne.n	8001b2c <HAL_ADC_PollForConversion+0xf8>
 8001b26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b2a:	e000      	b.n	8001b2e <HAL_ADC_PollForConversion+0xfa>
 8001b2c:	4b41      	ldr	r3, [pc, #260]	@ (8001c34 <HAL_ADC_PollForConversion+0x200>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001b32:	f7ff fc23 	bl	800137c <HAL_GetTick>
 8001b36:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b38:	e021      	b.n	8001b7e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b40:	d01d      	beq.n	8001b7e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <HAL_ADC_PollForConversion+0x124>
 8001b48:	f7ff fc18 	bl	800137c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d212      	bcs.n	8001b7e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10b      	bne.n	8001b7e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	f043 0204 	orr.w	r2, r3, #4
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e04f      	b.n	8001c1e <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0d6      	beq.n	8001b3a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d131      	bne.n	8001c0a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d12c      	bne.n	8001c0a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d125      	bne.n	8001c0a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d112      	bne.n	8001bf2 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d112      	bne.n	8001c0a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be8:	f043 0201 	orr.w	r2, r3, #1
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bf0:	e00b      	b.n	8001c0a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf6:	f043 0220 	orr.w	r2, r3, #32
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c02:	f043 0201 	orr.w	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d103      	bne.n	8001c1c <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	50000100 	.word	0x50000100
 8001c2c:	50000300 	.word	0x50000300
 8001c30:	50000700 	.word	0x50000700
 8001c34:	50000400 	.word	0x50000400

08001c38 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b09b      	sub	sp, #108	@ 0x6c
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x22>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e2c8      	b.n	8002208 <HAL_ADC_ConfigChannel+0x5b4>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f040 82ac 	bne.w	80021e6 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d81c      	bhi.n	8001cd0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	461a      	mov	r2, r3
 8001caa:	231f      	movs	r3, #31
 8001cac:	4093      	lsls	r3, r2
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	4019      	ands	r1, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cce:	e063      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b09      	cmp	r3, #9
 8001cd6:	d81e      	bhi.n	8001d16 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	3b1e      	subs	r3, #30
 8001cec:	221f      	movs	r2, #31
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	4019      	ands	r1, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	3b1e      	subs	r3, #30
 8001d08:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d14:	e040      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b0e      	cmp	r3, #14
 8001d1c:	d81e      	bhi.n	8001d5c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	3b3c      	subs	r3, #60	@ 0x3c
 8001d32:	221f      	movs	r2, #31
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	3b3c      	subs	r3, #60	@ 0x3c
 8001d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d5a:	e01d      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	3b5a      	subs	r3, #90	@ 0x5a
 8001d70:	221f      	movs	r2, #31
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	4019      	ands	r1, r3
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	3b5a      	subs	r3, #90	@ 0x5a
 8001d8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f040 80e5 	bne.w	8001f72 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d91c      	bls.n	8001dea <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6999      	ldr	r1, [r3, #24]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b1e      	subs	r3, #30
 8001dc2:	2207      	movs	r2, #7
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	4019      	ands	r1, r3
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6898      	ldr	r0, [r3, #8]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	3b1e      	subs	r3, #30
 8001ddc:	fa00 f203 	lsl.w	r2, r0, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	619a      	str	r2, [r3, #24]
 8001de8:	e019      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6959      	ldr	r1, [r3, #20]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	2207      	movs	r2, #7
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	4019      	ands	r1, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6898      	ldr	r0, [r3, #8]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	fa00 f203 	lsl.w	r2, r0, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	08db      	lsrs	r3, r3, #3
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d84f      	bhi.n	8001ee0 <HAL_ADC_ConfigChannel+0x28c>
 8001e40:	a201      	add	r2, pc, #4	@ (adr r2, 8001e48 <HAL_ADC_ConfigChannel+0x1f4>)
 8001e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e46:	bf00      	nop
 8001e48:	08001e59 	.word	0x08001e59
 8001e4c:	08001e7b 	.word	0x08001e7b
 8001e50:	08001e9d 	.word	0x08001e9d
 8001e54:	08001ebf 	.word	0x08001ebf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e5e:	4b99      	ldr	r3, [pc, #612]	@ (80020c4 <HAL_ADC_ConfigChannel+0x470>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	0691      	lsls	r1, r2, #26
 8001e68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e76:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e78:	e07b      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001e80:	4b90      	ldr	r3, [pc, #576]	@ (80020c4 <HAL_ADC_ConfigChannel+0x470>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	0691      	lsls	r1, r2, #26
 8001e8a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001e98:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e9a:	e06a      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001ea2:	4b88      	ldr	r3, [pc, #544]	@ (80020c4 <HAL_ADC_ConfigChannel+0x470>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	0691      	lsls	r1, r2, #26
 8001eac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001eba:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ebc:	e059      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001ec4:	4b7f      	ldr	r3, [pc, #508]	@ (80020c4 <HAL_ADC_ConfigChannel+0x470>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	0691      	lsls	r1, r2, #26
 8001ece:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001edc:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ede:	e048      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	069b      	lsls	r3, r3, #26
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d107      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f02:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	069b      	lsls	r3, r3, #26
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d107      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f26:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	069b      	lsls	r3, r3, #26
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d107      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f4a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	069b      	lsls	r3, r3, #26
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d107      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001f6e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001f70:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d108      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x33e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x33e>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x340>
 8001f92:	2300      	movs	r3, #0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f040 8131 	bne.w	80021fc <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d00f      	beq.n	8001fc2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43da      	mvns	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	400a      	ands	r2, r1
 8001fbc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001fc0:	e049      	b.n	8002056 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b09      	cmp	r3, #9
 8001fe2:	d91c      	bls.n	800201e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6999      	ldr	r1, [r3, #24]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3b1b      	subs	r3, #27
 8001ff6:	2207      	movs	r2, #7
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	4019      	ands	r1, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	6898      	ldr	r0, [r3, #8]
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4613      	mov	r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4413      	add	r3, r2
 800200e:	3b1b      	subs	r3, #27
 8002010:	fa00 f203 	lsl.w	r2, r0, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	619a      	str	r2, [r3, #24]
 800201c:	e01b      	b.n	8002056 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6959      	ldr	r1, [r3, #20]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	4613      	mov	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	2207      	movs	r2, #7
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	4019      	ands	r1, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6898      	ldr	r0, [r3, #8]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	fa00 f203 	lsl.w	r2, r0, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800205e:	d004      	beq.n	800206a <HAL_ADC_ConfigChannel+0x416>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a18      	ldr	r2, [pc, #96]	@ (80020c8 <HAL_ADC_ConfigChannel+0x474>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_ADC_ConfigChannel+0x41a>
 800206a:	4b18      	ldr	r3, [pc, #96]	@ (80020cc <HAL_ADC_ConfigChannel+0x478>)
 800206c:	e000      	b.n	8002070 <HAL_ADC_ConfigChannel+0x41c>
 800206e:	4b18      	ldr	r3, [pc, #96]	@ (80020d0 <HAL_ADC_ConfigChannel+0x47c>)
 8002070:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b10      	cmp	r3, #16
 8002078:	d105      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800207a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002082:	2b00      	cmp	r3, #0
 8002084:	d015      	beq.n	80020b2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800208a:	2b11      	cmp	r3, #17
 800208c:	d105      	bne.n	800209a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800208e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800209e:	2b12      	cmp	r3, #18
 80020a0:	f040 80ac 	bne.w	80021fc <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80020a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f040 80a5 	bne.w	80021fc <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020ba:	d10b      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x480>
 80020bc:	4b02      	ldr	r3, [pc, #8]	@ (80020c8 <HAL_ADC_ConfigChannel+0x474>)
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e023      	b.n	800210a <HAL_ADC_ConfigChannel+0x4b6>
 80020c2:	bf00      	nop
 80020c4:	83fff000 	.word	0x83fff000
 80020c8:	50000100 	.word	0x50000100
 80020cc:	50000300 	.word	0x50000300
 80020d0:	50000700 	.word	0x50000700
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002214 <HAL_ADC_ConfigChannel+0x5c0>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d103      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x492>
 80020de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	e011      	b.n	800210a <HAL_ADC_ConfigChannel+0x4b6>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a4b      	ldr	r2, [pc, #300]	@ (8002218 <HAL_ADC_ConfigChannel+0x5c4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d102      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x4a2>
 80020f0:	4b4a      	ldr	r3, [pc, #296]	@ (800221c <HAL_ADC_ConfigChannel+0x5c8>)
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	e009      	b.n	800210a <HAL_ADC_ConfigChannel+0x4b6>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a48      	ldr	r2, [pc, #288]	@ (800221c <HAL_ADC_ConfigChannel+0x5c8>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d102      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x4b2>
 8002100:	4b45      	ldr	r3, [pc, #276]	@ (8002218 <HAL_ADC_ConfigChannel+0x5c4>)
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	e001      	b.n	800210a <HAL_ADC_ConfigChannel+0x4b6>
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d108      	bne.n	800212a <HAL_ADC_ConfigChannel+0x4d6>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_ADC_ConfigChannel+0x4d6>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_ADC_ConfigChannel+0x4d8>
 800212a:	2300      	movs	r3, #0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d150      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002130:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002132:	2b00      	cmp	r3, #0
 8002134:	d010      	beq.n	8002158 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b01      	cmp	r3, #1
 8002140:	d107      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x4fe>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x4fe>
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <HAL_ADC_ConfigChannel+0x500>
 8002152:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002154:	2b00      	cmp	r3, #0
 8002156:	d13c      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b10      	cmp	r3, #16
 800215e:	d11d      	bne.n	800219c <HAL_ADC_ConfigChannel+0x548>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002168:	d118      	bne.n	800219c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800216a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002172:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002174:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002176:	4b2a      	ldr	r3, [pc, #168]	@ (8002220 <HAL_ADC_ConfigChannel+0x5cc>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a2a      	ldr	r2, [pc, #168]	@ (8002224 <HAL_ADC_ConfigChannel+0x5d0>)
 800217c:	fba2 2303 	umull	r2, r3, r2, r3
 8002180:	0c9a      	lsrs	r2, r3, #18
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800218c:	e002      	b.n	8002194 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	3b01      	subs	r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f9      	bne.n	800218e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800219a:	e02e      	b.n	80021fa <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b11      	cmp	r3, #17
 80021a2:	d10b      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x568>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021ac:	d106      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80021ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80021b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021b8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021ba:	e01e      	b.n	80021fa <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b12      	cmp	r3, #18
 80021c2:	d11a      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80021c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021ce:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021d0:	e013      	b.n	80021fa <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d6:	f043 0220 	orr.w	r2, r3, #32
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80021e4:	e00a      	b.n	80021fc <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	f043 0220 	orr.w	r2, r3, #32
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80021f8:	e000      	b.n	80021fc <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021fa:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002204:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002208:	4618      	mov	r0, r3
 800220a:	376c      	adds	r7, #108	@ 0x6c
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	50000100 	.word	0x50000100
 8002218:	50000400 	.word	0x50000400
 800221c:	50000500 	.word	0x50000500
 8002220:	2000000c 	.word	0x2000000c
 8002224:	431bde83 	.word	0x431bde83

08002228 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d108      	bne.n	8002254 <ADC_Enable+0x2c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <ADC_Enable+0x2c>
 8002250:	2301      	movs	r3, #1
 8002252:	e000      	b.n	8002256 <ADC_Enable+0x2e>
 8002254:	2300      	movs	r3, #0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d143      	bne.n	80022e2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	4b22      	ldr	r3, [pc, #136]	@ (80022ec <ADC_Enable+0xc4>)
 8002262:	4013      	ands	r3, r2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00d      	beq.n	8002284 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226c:	f043 0210 	orr.w	r2, r3, #16
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002278:	f043 0201 	orr.w	r2, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e02f      	b.n	80022e4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0201 	orr.w	r2, r2, #1
 8002292:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002294:	f7ff f872 	bl	800137c <HAL_GetTick>
 8002298:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800229a:	e01b      	b.n	80022d4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800229c:	f7ff f86e 	bl	800137c <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d914      	bls.n	80022d4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d00d      	beq.n	80022d4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022bc:	f043 0210 	orr.w	r2, r3, #16
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c8:	f043 0201 	orr.w	r2, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e007      	b.n	80022e4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d1dc      	bne.n	800229c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	8000003f 	.word	0x8000003f

080022f0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d108      	bne.n	800231c <ADC_Disable+0x2c>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <ADC_Disable+0x2c>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <ADC_Disable+0x2e>
 800231c:	2300      	movs	r3, #0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d047      	beq.n	80023b2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 030d 	and.w	r3, r3, #13
 800232c:	2b01      	cmp	r3, #1
 800232e:	d10f      	bne.n	8002350 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0202 	orr.w	r2, r2, #2
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2203      	movs	r2, #3
 8002346:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002348:	f7ff f818 	bl	800137c <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800234e:	e029      	b.n	80023a4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	f043 0210 	orr.w	r2, r3, #16
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e023      	b.n	80023b4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800236c:	f7ff f806 	bl	800137c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d914      	bls.n	80023a4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b01      	cmp	r3, #1
 8002386:	d10d      	bne.n	80023a4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238c:	f043 0210 	orr.w	r2, r3, #16
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e007      	b.n	80023b4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d0dc      	beq.n	800236c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 030c 	and.w	r3, r3, #12
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 809b 	beq.w	8002518 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023f0:	d12a      	bne.n	8002448 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d126      	bne.n	8002448 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d122      	bne.n	8002448 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002402:	230c      	movs	r3, #12
 8002404:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002406:	e014      	b.n	8002432 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4a46      	ldr	r2, [pc, #280]	@ (8002524 <ADC_ConversionStop+0x168>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d90d      	bls.n	800242c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	f043 0210 	orr.w	r2, r3, #16
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e076      	b.n	800251a <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	3301      	adds	r3, #1
 8002430:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800243c:	2b40      	cmp	r3, #64	@ 0x40
 800243e:	d1e3      	bne.n	8002408 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2240      	movs	r2, #64	@ 0x40
 8002446:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	2b60      	cmp	r3, #96	@ 0x60
 800244c:	d015      	beq.n	800247a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b04      	cmp	r3, #4
 800245a:	d10e      	bne.n	800247a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002466:	2b00      	cmp	r3, #0
 8002468:	d107      	bne.n	800247a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0210 	orr.w	r2, r2, #16
 8002478:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b0c      	cmp	r3, #12
 800247e:	d015      	beq.n	80024ac <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b08      	cmp	r3, #8
 800248c:	d10e      	bne.n	80024ac <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0220 	orr.w	r2, r2, #32
 80024aa:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b60      	cmp	r3, #96	@ 0x60
 80024b0:	d005      	beq.n	80024be <ADC_ConversionStop+0x102>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b6c      	cmp	r3, #108	@ 0x6c
 80024b6:	d105      	bne.n	80024c4 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80024b8:	230c      	movs	r3, #12
 80024ba:	617b      	str	r3, [r7, #20]
        break;
 80024bc:	e005      	b.n	80024ca <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80024be:	2308      	movs	r3, #8
 80024c0:	617b      	str	r3, [r7, #20]
        break;
 80024c2:	e002      	b.n	80024ca <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80024c4:	2304      	movs	r3, #4
 80024c6:	617b      	str	r3, [r7, #20]
        break;
 80024c8:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80024ca:	f7fe ff57 	bl	800137c <HAL_GetTick>
 80024ce:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80024d0:	e01b      	b.n	800250a <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80024d2:	f7fe ff53 	bl	800137c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b0b      	cmp	r3, #11
 80024de:	d914      	bls.n	800250a <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00d      	beq.n	800250a <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	f043 0210 	orr.w	r2, r3, #16
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	f043 0201 	orr.w	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e007      	b.n	800251a <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	4013      	ands	r3, r2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1dc      	bne.n	80024d2 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	000993ff 	.word	0x000993ff

08002528 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0ed      	b.n	8002716 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d102      	bne.n	800254c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fc52 	bl	8000df0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 0201 	orr.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800255c:	f7fe ff0e 	bl	800137c <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002562:	e012      	b.n	800258a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002564:	f7fe ff0a 	bl	800137c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b0a      	cmp	r3, #10
 8002570:	d90b      	bls.n	800258a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002576:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2205      	movs	r2, #5
 8002582:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e0c5      	b.n	8002716 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0e5      	beq.n	8002564 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0202 	bic.w	r2, r2, #2
 80025a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025a8:	f7fe fee8 	bl	800137c <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025ae:	e012      	b.n	80025d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025b0:	f7fe fee4 	bl	800137c <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b0a      	cmp	r3, #10
 80025bc:	d90b      	bls.n	80025d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2205      	movs	r2, #5
 80025ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e09f      	b.n	8002716 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1e5      	bne.n	80025b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	7e1b      	ldrb	r3, [r3, #24]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d108      	bne.n	80025fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	e007      	b.n	800260e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800260c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	7e5b      	ldrb	r3, [r3, #25]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d108      	bne.n	8002628 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	e007      	b.n	8002638 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002636:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7e9b      	ldrb	r3, [r3, #26]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d108      	bne.n	8002652 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0220 	orr.w	r2, r2, #32
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	e007      	b.n	8002662 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0220 	bic.w	r2, r2, #32
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	7edb      	ldrb	r3, [r3, #27]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d108      	bne.n	800267c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0210 	bic.w	r2, r2, #16
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	e007      	b.n	800268c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0210 	orr.w	r2, r2, #16
 800268a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	7f1b      	ldrb	r3, [r3, #28]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d108      	bne.n	80026a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0208 	orr.w	r2, r2, #8
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	e007      	b.n	80026b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0208 	bic.w	r2, r2, #8
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	7f5b      	ldrb	r3, [r3, #29]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d108      	bne.n	80026d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0204 	orr.w	r2, r2, #4
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	e007      	b.n	80026e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0204 	bic.w	r2, r2, #4
 80026de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	ea42 0103 	orr.w	r1, r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	1e5a      	subs	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	430a      	orrs	r2, r1
 8002704:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800271e:	b480      	push	{r7}
 8002720:	b087      	sub	sp, #28
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002734:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d003      	beq.n	8002744 <HAL_CAN_ConfigFilter+0x26>
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	2b02      	cmp	r3, #2
 8002740:	f040 80aa 	bne.w	8002898 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800274a:	f043 0201 	orr.w	r2, r3, #1
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	2201      	movs	r2, #1
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	43db      	mvns	r3, r3
 800276e:	401a      	ands	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d123      	bne.n	80027c6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	43db      	mvns	r3, r3
 8002788:	401a      	ands	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	3248      	adds	r2, #72	@ 0x48
 80027a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027bc:	6979      	ldr	r1, [r7, #20]
 80027be:	3348      	adds	r3, #72	@ 0x48
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d122      	bne.n	8002814 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027ee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	3248      	adds	r2, #72	@ 0x48
 80027f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002808:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800280a:	6979      	ldr	r1, [r7, #20]
 800280c:	3348      	adds	r3, #72	@ 0x48
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	43db      	mvns	r3, r3
 8002826:	401a      	ands	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800282e:	e007      	b.n	8002840 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	431a      	orrs	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d109      	bne.n	800285c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	43db      	mvns	r3, r3
 8002852:	401a      	ands	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800285a:	e007      	b.n	800286c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	431a      	orrs	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d107      	bne.n	8002884 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	431a      	orrs	r2, r3
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800288a:	f023 0201 	bic.w	r2, r3, #1
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	e006      	b.n	80028a6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
  }
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	371c      	adds	r7, #28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d12e      	bne.n	8002924 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028de:	f7fe fd4d 	bl	800137c <HAL_GetTick>
 80028e2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028e4:	e012      	b.n	800290c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028e6:	f7fe fd49 	bl	800137c <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b0a      	cmp	r3, #10
 80028f2:	d90b      	bls.n	800290c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2205      	movs	r2, #5
 8002904:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e012      	b.n	8002932 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1e5      	bne.n	80028e6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	e006      	b.n	8002932 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002928:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800293a:	b480      	push	{r7}
 800293c:	b089      	sub	sp, #36	@ 0x24
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002958:	7ffb      	ldrb	r3, [r7, #31]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d003      	beq.n	8002966 <HAL_CAN_AddTxMessage+0x2c>
 800295e:	7ffb      	ldrb	r3, [r7, #31]
 8002960:	2b02      	cmp	r3, #2
 8002962:	f040 80ad 	bne.w	8002ac0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002976:	2b00      	cmp	r3, #0
 8002978:	d105      	bne.n	8002986 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8095 	beq.w	8002ab0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	0e1b      	lsrs	r3, r3, #24
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002990:	2201      	movs	r2, #1
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	409a      	lsls	r2, r3
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10d      	bne.n	80029be <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029ac:	68f9      	ldr	r1, [r7, #12]
 80029ae:	6809      	ldr	r1, [r1, #0]
 80029b0:	431a      	orrs	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	3318      	adds	r3, #24
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	440b      	add	r3, r1
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	e00f      	b.n	80029de <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029c8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029ce:	68f9      	ldr	r1, [r7, #12]
 80029d0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80029d2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	3318      	adds	r3, #24
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	440b      	add	r3, r1
 80029dc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6819      	ldr	r1, [r3, #0]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	3318      	adds	r3, #24
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	440b      	add	r3, r1
 80029ee:	3304      	adds	r3, #4
 80029f0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	7d1b      	ldrb	r3, [r3, #20]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d111      	bne.n	8002a1e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3318      	adds	r3, #24
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	4413      	add	r3, r2
 8002a06:	3304      	adds	r3, #4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	6811      	ldr	r1, [r2, #0]
 8002a0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3318      	adds	r3, #24
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	440b      	add	r3, r1
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3307      	adds	r3, #7
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	061a      	lsls	r2, r3, #24
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3306      	adds	r3, #6
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	041b      	lsls	r3, r3, #16
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3305      	adds	r3, #5
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	3204      	adds	r2, #4
 8002a3e:	7812      	ldrb	r2, [r2, #0]
 8002a40:	4610      	mov	r0, r2
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	6811      	ldr	r1, [r2, #0]
 8002a46:	ea43 0200 	orr.w	r2, r3, r0
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	440b      	add	r3, r1
 8002a50:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002a54:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3303      	adds	r3, #3
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	061a      	lsls	r2, r3, #24
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3302      	adds	r3, #2
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	041b      	lsls	r3, r3, #16
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	021b      	lsls	r3, r3, #8
 8002a70:	4313      	orrs	r3, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	7812      	ldrb	r2, [r2, #0]
 8002a76:	4610      	mov	r0, r2
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	6811      	ldr	r1, [r2, #0]
 8002a7c:	ea43 0200 	orr.w	r2, r3, r0
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	440b      	add	r3, r1
 8002a86:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002a8a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	3318      	adds	r3, #24
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	4413      	add	r3, r2
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	6811      	ldr	r1, [r2, #0]
 8002a9e:	f043 0201 	orr.w	r2, r3, #1
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3318      	adds	r3, #24
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	440b      	add	r3, r1
 8002aaa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e00e      	b.n	8002ace <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e006      	b.n	8002ace <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3724      	adds	r7, #36	@ 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002ada:	b480      	push	{r7}
 8002adc:	b087      	sub	sp, #28
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
 8002ae6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aee:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d003      	beq.n	8002afe <HAL_CAN_GetRxMessage+0x24>
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	f040 8103 	bne.w	8002d04 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10e      	bne.n	8002b22 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d116      	bne.n	8002b40 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e0f7      	b.n	8002d12 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d107      	bne.n	8002b40 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b34:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0e8      	b.n	8002d12 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	331b      	adds	r3, #27
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	4413      	add	r3, r2
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0204 	and.w	r2, r3, #4
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10c      	bne.n	8002b78 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	331b      	adds	r3, #27
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	4413      	add	r3, r2
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0d5b      	lsrs	r3, r3, #21
 8002b6e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	e00b      	b.n	8002b90 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	331b      	adds	r3, #27
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	4413      	add	r3, r2
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	08db      	lsrs	r3, r3, #3
 8002b88:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	331b      	adds	r3, #27
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	4413      	add	r3, r2
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0202 	and.w	r2, r3, #2
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	331b      	adds	r3, #27
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	611a      	str	r2, [r3, #16]
 8002bc4:	e00b      	b.n	8002bde <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	331b      	adds	r3, #27
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 020f 	and.w	r2, r3, #15
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	331b      	adds	r3, #27
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	4413      	add	r3, r2
 8002bea:	3304      	adds	r3, #4
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	0a1b      	lsrs	r3, r3, #8
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	331b      	adds	r3, #27
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	4413      	add	r3, r2
 8002c02:	3304      	adds	r3, #4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	0c1b      	lsrs	r3, r3, #16
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	0a1a      	lsrs	r2, r3, #8
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	0c1a      	lsrs	r2, r3, #16
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	3302      	adds	r3, #2
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	0e1a      	lsrs	r2, r3, #24
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	3303      	adds	r3, #3
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	3304      	adds	r3, #4
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	0a1a      	lsrs	r2, r3, #8
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	3305      	adds	r3, #5
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	0c1a      	lsrs	r2, r3, #16
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	3306      	adds	r3, #6
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	0e1a      	lsrs	r2, r3, #24
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	3307      	adds	r3, #7
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d108      	bne.n	8002cf0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 0220 	orr.w	r2, r2, #32
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	e007      	b.n	8002d00 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0220 	orr.w	r2, r2, #32
 8002cfe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e006      	b.n	8002d12 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d08:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
  }
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d2e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d002      	beq.n	8002d3c <HAL_CAN_ActivateNotification+0x1e>
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d109      	bne.n	8002d50 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6959      	ldr	r1, [r3, #20]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e006      	b.n	8002d5e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d54:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
  }
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b08a      	sub	sp, #40	@ 0x28
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d07c      	beq.n	8002eaa <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d023      	beq.n	8002e02 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f983 	bl	80030d8 <HAL_CAN_TxMailbox0CompleteCallback>
 8002dd2:	e016      	b.n	8002e02 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d004      	beq.n	8002de8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de6:	e00c      	b.n	8002e02 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d004      	beq.n	8002dfc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dfa:	e002      	b.n	8002e02 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f989 	bl	8003114 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d024      	beq.n	8002e56 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f963 	bl	80030ec <HAL_CAN_TxMailbox1CompleteCallback>
 8002e26:	e016      	b.n	8002e56 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d004      	beq.n	8002e3c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e3a:	e00c      	b.n	8002e56 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d004      	beq.n	8002e50 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e4e:	e002      	b.n	8002e56 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f969 	bl	8003128 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d024      	beq.n	8002eaa <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e68:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f943 	bl	8003100 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e7a:	e016      	b.n	8002eaa <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d004      	beq.n	8002e90 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e8e:	e00c      	b.n	8002eaa <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d004      	beq.n	8002ea4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea2:	e002      	b.n	8002eaa <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f949 	bl	800313c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00c      	beq.n	8002ece <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d007      	beq.n	8002ece <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2210      	movs	r2, #16
 8002ecc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f93a 	bl	8003164 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f921 	bl	8003150 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00c      	beq.n	8002f32 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d007      	beq.n	8002f32 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2210      	movs	r2, #16
 8002f30:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00b      	beq.n	8002f54 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d006      	beq.n	8002f54 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f91c 	bl	800318c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d009      	beq.n	8002f72 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f903 	bl	8003178 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00b      	beq.n	8002f94 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f003 0310 	and.w	r3, r3, #16
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d006      	beq.n	8002f94 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2210      	movs	r2, #16
 8002f8c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f906 	bl	80031a0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f003 0308 	and.w	r3, r3, #8
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d006      	beq.n	8002fb6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2208      	movs	r2, #8
 8002fae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f8ff 	bl	80031b4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d07b      	beq.n	80030b8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d072      	beq.n	80030b0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003018:	f043 0304 	orr.w	r3, r3, #4
 800301c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003024:	2b00      	cmp	r3, #0
 8003026:	d043      	beq.n	80030b0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800302e:	2b00      	cmp	r3, #0
 8003030:	d03e      	beq.n	80030b0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003038:	2b60      	cmp	r3, #96	@ 0x60
 800303a:	d02b      	beq.n	8003094 <HAL_CAN_IRQHandler+0x32a>
 800303c:	2b60      	cmp	r3, #96	@ 0x60
 800303e:	d82e      	bhi.n	800309e <HAL_CAN_IRQHandler+0x334>
 8003040:	2b50      	cmp	r3, #80	@ 0x50
 8003042:	d022      	beq.n	800308a <HAL_CAN_IRQHandler+0x320>
 8003044:	2b50      	cmp	r3, #80	@ 0x50
 8003046:	d82a      	bhi.n	800309e <HAL_CAN_IRQHandler+0x334>
 8003048:	2b40      	cmp	r3, #64	@ 0x40
 800304a:	d019      	beq.n	8003080 <HAL_CAN_IRQHandler+0x316>
 800304c:	2b40      	cmp	r3, #64	@ 0x40
 800304e:	d826      	bhi.n	800309e <HAL_CAN_IRQHandler+0x334>
 8003050:	2b30      	cmp	r3, #48	@ 0x30
 8003052:	d010      	beq.n	8003076 <HAL_CAN_IRQHandler+0x30c>
 8003054:	2b30      	cmp	r3, #48	@ 0x30
 8003056:	d822      	bhi.n	800309e <HAL_CAN_IRQHandler+0x334>
 8003058:	2b10      	cmp	r3, #16
 800305a:	d002      	beq.n	8003062 <HAL_CAN_IRQHandler+0x2f8>
 800305c:	2b20      	cmp	r3, #32
 800305e:	d005      	beq.n	800306c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003060:	e01d      	b.n	800309e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	f043 0308 	orr.w	r3, r3, #8
 8003068:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800306a:	e019      	b.n	80030a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800306c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306e:	f043 0310 	orr.w	r3, r3, #16
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003074:	e014      	b.n	80030a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	f043 0320 	orr.w	r3, r3, #32
 800307c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800307e:	e00f      	b.n	80030a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003086:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003088:	e00a      	b.n	80030a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003090:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003092:	e005      	b.n	80030a0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800309a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800309c:	e000      	b.n	80030a0 <HAL_CAN_IRQHandler+0x336>
            break;
 800309e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699a      	ldr	r2, [r3, #24]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80030ae:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2204      	movs	r2, #4
 80030b6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80030b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f87c 	bl	80031c8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80030d0:	bf00      	nop
 80030d2:	3728      	adds	r7, #40	@ 0x28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031f8:	4013      	ands	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003204:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800320c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800320e:	4a04      	ldr	r2, [pc, #16]	@ (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	60d3      	str	r3, [r2, #12]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003228:	4b04      	ldr	r3, [pc, #16]	@ (800323c <__NVIC_GetPriorityGrouping+0x18>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	0a1b      	lsrs	r3, r3, #8
 800322e:	f003 0307 	and.w	r3, r3, #7
}
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	2b00      	cmp	r3, #0
 8003250:	db0b      	blt.n	800326a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	f003 021f 	and.w	r2, r3, #31
 8003258:	4907      	ldr	r1, [pc, #28]	@ (8003278 <__NVIC_EnableIRQ+0x38>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2001      	movs	r0, #1
 8003262:	fa00 f202 	lsl.w	r2, r0, r2
 8003266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	e000e100 	.word	0xe000e100

0800327c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	6039      	str	r1, [r7, #0]
 8003286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328c:	2b00      	cmp	r3, #0
 800328e:	db0a      	blt.n	80032a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	b2da      	uxtb	r2, r3
 8003294:	490c      	ldr	r1, [pc, #48]	@ (80032c8 <__NVIC_SetPriority+0x4c>)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	0112      	lsls	r2, r2, #4
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	440b      	add	r3, r1
 80032a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a4:	e00a      	b.n	80032bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4908      	ldr	r1, [pc, #32]	@ (80032cc <__NVIC_SetPriority+0x50>)
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	3b04      	subs	r3, #4
 80032b4:	0112      	lsls	r2, r2, #4
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	440b      	add	r3, r1
 80032ba:	761a      	strb	r2, [r3, #24]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000e100 	.word	0xe000e100
 80032cc:	e000ed00 	.word	0xe000ed00

080032d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b089      	sub	sp, #36	@ 0x24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f1c3 0307 	rsb	r3, r3, #7
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	bf28      	it	cs
 80032ee:	2304      	movcs	r3, #4
 80032f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	3304      	adds	r3, #4
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d902      	bls.n	8003300 <NVIC_EncodePriority+0x30>
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3b03      	subs	r3, #3
 80032fe:	e000      	b.n	8003302 <NVIC_EncodePriority+0x32>
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003304:	f04f 32ff 	mov.w	r2, #4294967295
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43da      	mvns	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	401a      	ands	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003318:	f04f 31ff 	mov.w	r1, #4294967295
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	fa01 f303 	lsl.w	r3, r1, r3
 8003322:	43d9      	mvns	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003328:	4313      	orrs	r3, r2
         );
}
 800332a:	4618      	mov	r0, r3
 800332c:	3724      	adds	r7, #36	@ 0x24
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003348:	d301      	bcc.n	800334e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800334a:	2301      	movs	r3, #1
 800334c:	e00f      	b.n	800336e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800334e:	4a0a      	ldr	r2, [pc, #40]	@ (8003378 <SysTick_Config+0x40>)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3b01      	subs	r3, #1
 8003354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003356:	210f      	movs	r1, #15
 8003358:	f04f 30ff 	mov.w	r0, #4294967295
 800335c:	f7ff ff8e 	bl	800327c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003360:	4b05      	ldr	r3, [pc, #20]	@ (8003378 <SysTick_Config+0x40>)
 8003362:	2200      	movs	r2, #0
 8003364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003366:	4b04      	ldr	r3, [pc, #16]	@ (8003378 <SysTick_Config+0x40>)
 8003368:	2207      	movs	r2, #7
 800336a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	e000e010 	.word	0xe000e010

0800337c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff29 	bl	80031dc <__NVIC_SetPriorityGrouping>
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b086      	sub	sp, #24
 8003396:	af00      	add	r7, sp, #0
 8003398:	4603      	mov	r3, r0
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033a4:	f7ff ff3e 	bl	8003224 <__NVIC_GetPriorityGrouping>
 80033a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	6978      	ldr	r0, [r7, #20]
 80033b0:	f7ff ff8e 	bl	80032d0 <NVIC_EncodePriority>
 80033b4:	4602      	mov	r2, r0
 80033b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ff5d 	bl	800327c <__NVIC_SetPriority>
}
 80033c2:	bf00      	nop
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	4603      	mov	r3, r0
 80033d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff ff31 	bl	8003240 <__NVIC_EnableIRQ>
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff ffa2 	bl	8003338 <SysTick_Config>
 80033f4:	4603      	mov	r3, r0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800340e:	e154      	b.n	80036ba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	2101      	movs	r1, #1
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	fa01 f303 	lsl.w	r3, r1, r3
 800341c:	4013      	ands	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8146 	beq.w	80036b4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b01      	cmp	r3, #1
 8003432:	d005      	beq.n	8003440 <HAL_GPIO_Init+0x40>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d130      	bne.n	80034a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	2203      	movs	r2, #3
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4013      	ands	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003476:	2201      	movs	r2, #1
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4013      	ands	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	091b      	lsrs	r3, r3, #4
 800348c:	f003 0201 	and.w	r2, r3, #1
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d017      	beq.n	80034de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	2203      	movs	r2, #3
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4013      	ands	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d123      	bne.n	8003532 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	08da      	lsrs	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	3208      	adds	r2, #8
 80034f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	220f      	movs	r2, #15
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4013      	ands	r3, r2
 800350c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	08da      	lsrs	r2, r3, #3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3208      	adds	r2, #8
 800352c:	6939      	ldr	r1, [r7, #16]
 800352e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	2203      	movs	r2, #3
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43db      	mvns	r3, r3
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 0203 	and.w	r2, r3, #3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 80a0 	beq.w	80036b4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003574:	4b58      	ldr	r3, [pc, #352]	@ (80036d8 <HAL_GPIO_Init+0x2d8>)
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	4a57      	ldr	r2, [pc, #348]	@ (80036d8 <HAL_GPIO_Init+0x2d8>)
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	6193      	str	r3, [r2, #24]
 8003580:	4b55      	ldr	r3, [pc, #340]	@ (80036d8 <HAL_GPIO_Init+0x2d8>)
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800358c:	4a53      	ldr	r2, [pc, #332]	@ (80036dc <HAL_GPIO_Init+0x2dc>)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	3302      	adds	r3, #2
 8003594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003598:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	220f      	movs	r2, #15
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4013      	ands	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80035b6:	d019      	beq.n	80035ec <HAL_GPIO_Init+0x1ec>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a49      	ldr	r2, [pc, #292]	@ (80036e0 <HAL_GPIO_Init+0x2e0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d013      	beq.n	80035e8 <HAL_GPIO_Init+0x1e8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a48      	ldr	r2, [pc, #288]	@ (80036e4 <HAL_GPIO_Init+0x2e4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00d      	beq.n	80035e4 <HAL_GPIO_Init+0x1e4>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a47      	ldr	r2, [pc, #284]	@ (80036e8 <HAL_GPIO_Init+0x2e8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d007      	beq.n	80035e0 <HAL_GPIO_Init+0x1e0>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a46      	ldr	r2, [pc, #280]	@ (80036ec <HAL_GPIO_Init+0x2ec>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d101      	bne.n	80035dc <HAL_GPIO_Init+0x1dc>
 80035d8:	2304      	movs	r3, #4
 80035da:	e008      	b.n	80035ee <HAL_GPIO_Init+0x1ee>
 80035dc:	2305      	movs	r3, #5
 80035de:	e006      	b.n	80035ee <HAL_GPIO_Init+0x1ee>
 80035e0:	2303      	movs	r3, #3
 80035e2:	e004      	b.n	80035ee <HAL_GPIO_Init+0x1ee>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e002      	b.n	80035ee <HAL_GPIO_Init+0x1ee>
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <HAL_GPIO_Init+0x1ee>
 80035ec:	2300      	movs	r3, #0
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	f002 0203 	and.w	r2, r2, #3
 80035f4:	0092      	lsls	r2, r2, #2
 80035f6:	4093      	lsls	r3, r2
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035fe:	4937      	ldr	r1, [pc, #220]	@ (80036dc <HAL_GPIO_Init+0x2dc>)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	089b      	lsrs	r3, r3, #2
 8003604:	3302      	adds	r3, #2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800360c:	4b38      	ldr	r3, [pc, #224]	@ (80036f0 <HAL_GPIO_Init+0x2f0>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	43db      	mvns	r3, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003630:	4a2f      	ldr	r2, [pc, #188]	@ (80036f0 <HAL_GPIO_Init+0x2f0>)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003636:	4b2e      	ldr	r3, [pc, #184]	@ (80036f0 <HAL_GPIO_Init+0x2f0>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	43db      	mvns	r3, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800365a:	4a25      	ldr	r2, [pc, #148]	@ (80036f0 <HAL_GPIO_Init+0x2f0>)
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003660:	4b23      	ldr	r3, [pc, #140]	@ (80036f0 <HAL_GPIO_Init+0x2f0>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	43db      	mvns	r3, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003684:	4a1a      	ldr	r2, [pc, #104]	@ (80036f0 <HAL_GPIO_Init+0x2f0>)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800368a:	4b19      	ldr	r3, [pc, #100]	@ (80036f0 <HAL_GPIO_Init+0x2f0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	43db      	mvns	r3, r3
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4013      	ands	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80036ae:	4a10      	ldr	r2, [pc, #64]	@ (80036f0 <HAL_GPIO_Init+0x2f0>)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	3301      	adds	r3, #1
 80036b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f47f aea3 	bne.w	8003410 <HAL_GPIO_Init+0x10>
  }
}
 80036ca:	bf00      	nop
 80036cc:	bf00      	nop
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40010000 	.word	0x40010000
 80036e0:	48000400 	.word	0x48000400
 80036e4:	48000800 	.word	0x48000800
 80036e8:	48000c00 	.word	0x48000c00
 80036ec:	48001000 	.word	0x48001000
 80036f0:	40010400 	.word	0x40010400

080036f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	887b      	ldrh	r3, [r7, #2]
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
 8003710:	e001      	b.n	8003716 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003716:	7bfb      	ldrb	r3, [r7, #15]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	807b      	strh	r3, [r7, #2]
 8003730:	4613      	mov	r3, r2
 8003732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003734:	787b      	ldrb	r3, [r7, #1]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003740:	e002      	b.n	8003748 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003742:	887a      	ldrh	r2, [r7, #2]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	460b      	mov	r3, r1
 800375e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003766:	887a      	ldrh	r2, [r7, #2]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4013      	ands	r3, r2
 800376c:	041a      	lsls	r2, r3, #16
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	43d9      	mvns	r1, r3
 8003772:	887b      	ldrh	r3, [r7, #2]
 8003774:	400b      	ands	r3, r1
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	619a      	str	r2, [r3, #24]
}
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800378e:	af00      	add	r7, sp, #0
 8003790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003794:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003798:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800379a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800379e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d102      	bne.n	80037ae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	f001 b823 	b.w	80047f4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 817d 	beq.w	8003abe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80037c4:	4bbc      	ldr	r3, [pc, #752]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d00c      	beq.n	80037ea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037d0:	4bb9      	ldr	r3, [pc, #740]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d15c      	bne.n	8003896 <HAL_RCC_OscConfig+0x10e>
 80037dc:	4bb6      	ldr	r3, [pc, #728]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e8:	d155      	bne.n	8003896 <HAL_RCC_OscConfig+0x10e>
 80037ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80037ee:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80037f6:	fa93 f3a3 	rbit	r3, r3
 80037fa:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003802:	fab3 f383 	clz	r3, r3
 8003806:	b2db      	uxtb	r3, r3
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d102      	bne.n	800381c <HAL_RCC_OscConfig+0x94>
 8003816:	4ba8      	ldr	r3, [pc, #672]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	e015      	b.n	8003848 <HAL_RCC_OscConfig+0xc0>
 800381c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003820:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003828:	fa93 f3a3 	rbit	r3, r3
 800382c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003830:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003834:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003838:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800383c:	fa93 f3a3 	rbit	r3, r3
 8003840:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003844:	4b9c      	ldr	r3, [pc, #624]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800384c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003850:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003854:	fa92 f2a2 	rbit	r2, r2
 8003858:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800385c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003860:	fab2 f282 	clz	r2, r2
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	f042 0220 	orr.w	r2, r2, #32
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	f002 021f 	and.w	r2, r2, #31
 8003870:	2101      	movs	r1, #1
 8003872:	fa01 f202 	lsl.w	r2, r1, r2
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 811f 	beq.w	8003abc <HAL_RCC_OscConfig+0x334>
 800387e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003882:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	f040 8116 	bne.w	8003abc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	f000 bfaf 	b.w	80047f4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800389a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a6:	d106      	bne.n	80038b6 <HAL_RCC_OscConfig+0x12e>
 80038a8:	4b83      	ldr	r3, [pc, #524]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a82      	ldr	r2, [pc, #520]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 80038ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	e036      	b.n	8003924 <HAL_RCC_OscConfig+0x19c>
 80038b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10c      	bne.n	80038e0 <HAL_RCC_OscConfig+0x158>
 80038c6:	4b7c      	ldr	r3, [pc, #496]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a7b      	ldr	r2, [pc, #492]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 80038cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	4b79      	ldr	r3, [pc, #484]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a78      	ldr	r2, [pc, #480]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 80038d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e021      	b.n	8003924 <HAL_RCC_OscConfig+0x19c>
 80038e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038f0:	d10c      	bne.n	800390c <HAL_RCC_OscConfig+0x184>
 80038f2:	4b71      	ldr	r3, [pc, #452]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a70      	ldr	r2, [pc, #448]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 80038f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	4b6e      	ldr	r3, [pc, #440]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a6d      	ldr	r2, [pc, #436]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	e00b      	b.n	8003924 <HAL_RCC_OscConfig+0x19c>
 800390c:	4b6a      	ldr	r3, [pc, #424]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a69      	ldr	r2, [pc, #420]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 8003912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b67      	ldr	r3, [pc, #412]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a66      	ldr	r2, [pc, #408]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 800391e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003922:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003924:	4b64      	ldr	r3, [pc, #400]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 8003926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003928:	f023 020f 	bic.w	r2, r3, #15
 800392c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003930:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	495f      	ldr	r1, [pc, #380]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 800393a:	4313      	orrs	r3, r2
 800393c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800393e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003942:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d059      	beq.n	8003a02 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394e:	f7fd fd15 	bl	800137c <HAL_GetTick>
 8003952:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003956:	e00a      	b.n	800396e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003958:	f7fd fd10 	bl	800137c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b64      	cmp	r3, #100	@ 0x64
 8003966:	d902      	bls.n	800396e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	f000 bf43 	b.w	80047f4 <HAL_RCC_OscConfig+0x106c>
 800396e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003972:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800397a:	fa93 f3a3 	rbit	r3, r3
 800397e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003982:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b01      	cmp	r3, #1
 8003998:	d102      	bne.n	80039a0 <HAL_RCC_OscConfig+0x218>
 800399a:	4b47      	ldr	r3, [pc, #284]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	e015      	b.n	80039cc <HAL_RCC_OscConfig+0x244>
 80039a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039a4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80039ac:	fa93 f3a3 	rbit	r3, r3
 80039b0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80039b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039b8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80039bc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80039c0:	fa93 f3a3 	rbit	r3, r3
 80039c4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80039c8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 80039ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80039d0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80039d4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80039d8:	fa92 f2a2 	rbit	r2, r2
 80039dc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80039e0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80039e4:	fab2 f282 	clz	r2, r2
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	f042 0220 	orr.w	r2, r2, #32
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	f002 021f 	and.w	r2, r2, #31
 80039f4:	2101      	movs	r1, #1
 80039f6:	fa01 f202 	lsl.w	r2, r1, r2
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0ab      	beq.n	8003958 <HAL_RCC_OscConfig+0x1d0>
 8003a00:	e05d      	b.n	8003abe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a02:	f7fd fcbb 	bl	800137c <HAL_GetTick>
 8003a06:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a0c:	f7fd fcb6 	bl	800137c <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b64      	cmp	r3, #100	@ 0x64
 8003a1a:	d902      	bls.n	8003a22 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	f000 bee9 	b.w	80047f4 <HAL_RCC_OscConfig+0x106c>
 8003a22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a26:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003a2e:	fa93 f3a3 	rbit	r3, r3
 8003a32:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003a36:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a3a:	fab3 f383 	clz	r3, r3
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d102      	bne.n	8003a54 <HAL_RCC_OscConfig+0x2cc>
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	e015      	b.n	8003a80 <HAL_RCC_OscConfig+0x2f8>
 8003a54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a58:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003a68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a6c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003a70:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003a74:	fa93 f3a3 	rbit	r3, r3
 8003a78:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab8 <HAL_RCC_OscConfig+0x330>)
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a80:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a84:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003a88:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003a8c:	fa92 f2a2 	rbit	r2, r2
 8003a90:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003a94:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003a98:	fab2 f282 	clz	r2, r2
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	f042 0220 	orr.w	r2, r2, #32
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	f002 021f 	and.w	r2, r2, #31
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1ab      	bne.n	8003a0c <HAL_RCC_OscConfig+0x284>
 8003ab4:	e003      	b.n	8003abe <HAL_RCC_OscConfig+0x336>
 8003ab6:	bf00      	nop
 8003ab8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 817d 	beq.w	8003dce <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003ad4:	4ba6      	ldr	r3, [pc, #664]	@ (8003d70 <HAL_RCC_OscConfig+0x5e8>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00b      	beq.n	8003af8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ae0:	4ba3      	ldr	r3, [pc, #652]	@ (8003d70 <HAL_RCC_OscConfig+0x5e8>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 030c 	and.w	r3, r3, #12
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d172      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x44a>
 8003aec:	4ba0      	ldr	r3, [pc, #640]	@ (8003d70 <HAL_RCC_OscConfig+0x5e8>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d16c      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x44a>
 8003af8:	2302      	movs	r3, #2
 8003afa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003afe:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003b02:	fa93 f3a3 	rbit	r3, r3
 8003b06:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003b0a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b0e:	fab3 f383 	clz	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	095b      	lsrs	r3, r3, #5
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d102      	bne.n	8003b28 <HAL_RCC_OscConfig+0x3a0>
 8003b22:	4b93      	ldr	r3, [pc, #588]	@ (8003d70 <HAL_RCC_OscConfig+0x5e8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	e013      	b.n	8003b50 <HAL_RCC_OscConfig+0x3c8>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003b32:	fa93 f3a3 	rbit	r3, r3
 8003b36:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003b40:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003b44:	fa93 f3a3 	rbit	r3, r3
 8003b48:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003b4c:	4b88      	ldr	r3, [pc, #544]	@ (8003d70 <HAL_RCC_OscConfig+0x5e8>)
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	2202      	movs	r2, #2
 8003b52:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003b56:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003b5a:	fa92 f2a2 	rbit	r2, r2
 8003b5e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003b62:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003b66:	fab2 f282 	clz	r2, r2
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	f042 0220 	orr.w	r2, r2, #32
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	f002 021f 	and.w	r2, r2, #31
 8003b76:	2101      	movs	r1, #1
 8003b78:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_RCC_OscConfig+0x410>
 8003b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d002      	beq.n	8003b98 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f000 be2e 	b.w	80047f4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b98:	4b75      	ldr	r3, [pc, #468]	@ (8003d70 <HAL_RCC_OscConfig+0x5e8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	21f8      	movs	r1, #248	@ 0xf8
 8003bae:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003bb6:	fa91 f1a1 	rbit	r1, r1
 8003bba:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003bbe:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003bc2:	fab1 f181 	clz	r1, r1
 8003bc6:	b2c9      	uxtb	r1, r1
 8003bc8:	408b      	lsls	r3, r1
 8003bca:	4969      	ldr	r1, [pc, #420]	@ (8003d70 <HAL_RCC_OscConfig+0x5e8>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd0:	e0fd      	b.n	8003dce <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bd6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 8088 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x56c>
 8003be4:	2301      	movs	r3, #1
 8003be6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003bee:	fa93 f3a3 	rbit	r3, r3
 8003bf2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003bf6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bfa:	fab3 f383 	clz	r3, r3
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c04:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c10:	f7fd fbb4 	bl	800137c <HAL_GetTick>
 8003c14:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c18:	e00a      	b.n	8003c30 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c1a:	f7fd fbaf 	bl	800137c <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d902      	bls.n	8003c30 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	f000 bde2 	b.w	80047f4 <HAL_RCC_OscConfig+0x106c>
 8003c30:	2302      	movs	r3, #2
 8003c32:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003c42:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c46:	fab3 f383 	clz	r3, r3
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d102      	bne.n	8003c60 <HAL_RCC_OscConfig+0x4d8>
 8003c5a:	4b45      	ldr	r3, [pc, #276]	@ (8003d70 <HAL_RCC_OscConfig+0x5e8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	e013      	b.n	8003c88 <HAL_RCC_OscConfig+0x500>
 8003c60:	2302      	movs	r3, #2
 8003c62:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003c6a:	fa93 f3a3 	rbit	r3, r3
 8003c6e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003c72:	2302      	movs	r3, #2
 8003c74:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003c78:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003c7c:	fa93 f3a3 	rbit	r3, r3
 8003c80:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003c84:	4b3a      	ldr	r3, [pc, #232]	@ (8003d70 <HAL_RCC_OscConfig+0x5e8>)
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	2202      	movs	r2, #2
 8003c8a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003c8e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003c92:	fa92 f2a2 	rbit	r2, r2
 8003c96:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003c9a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003c9e:	fab2 f282 	clz	r2, r2
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	f042 0220 	orr.w	r2, r2, #32
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	f002 021f 	and.w	r2, r2, #31
 8003cae:	2101      	movs	r1, #1
 8003cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0af      	beq.n	8003c1a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cba:	4b2d      	ldr	r3, [pc, #180]	@ (8003d70 <HAL_RCC_OscConfig+0x5e8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	21f8      	movs	r1, #248	@ 0xf8
 8003cd0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003cd8:	fa91 f1a1 	rbit	r1, r1
 8003cdc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003ce0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003ce4:	fab1 f181 	clz	r1, r1
 8003ce8:	b2c9      	uxtb	r1, r1
 8003cea:	408b      	lsls	r3, r1
 8003cec:	4920      	ldr	r1, [pc, #128]	@ (8003d70 <HAL_RCC_OscConfig+0x5e8>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	600b      	str	r3, [r1, #0]
 8003cf2:	e06c      	b.n	8003dce <HAL_RCC_OscConfig+0x646>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003cfe:	fa93 f3a3 	rbit	r3, r3
 8003d02:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003d06:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d0a:	fab3 f383 	clz	r3, r3
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d14:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d20:	f7fd fb2c 	bl	800137c <HAL_GetTick>
 8003d24:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d28:	e00a      	b.n	8003d40 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d2a:	f7fd fb27 	bl	800137c <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d902      	bls.n	8003d40 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	f000 bd5a 	b.w	80047f4 <HAL_RCC_OscConfig+0x106c>
 8003d40:	2302      	movs	r3, #2
 8003d42:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d46:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003d4a:	fa93 f3a3 	rbit	r3, r3
 8003d4e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d104      	bne.n	8003d74 <HAL_RCC_OscConfig+0x5ec>
 8003d6a:	4b01      	ldr	r3, [pc, #4]	@ (8003d70 <HAL_RCC_OscConfig+0x5e8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	e015      	b.n	8003d9c <HAL_RCC_OscConfig+0x614>
 8003d70:	40021000 	.word	0x40021000
 8003d74:	2302      	movs	r3, #2
 8003d76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003d7e:	fa93 f3a3 	rbit	r3, r3
 8003d82:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003d86:	2302      	movs	r3, #2
 8003d88:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003d8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d90:	fa93 f3a3 	rbit	r3, r3
 8003d94:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003d98:	4bc8      	ldr	r3, [pc, #800]	@ (80040bc <HAL_RCC_OscConfig+0x934>)
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003da2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003da6:	fa92 f2a2 	rbit	r2, r2
 8003daa:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003dae:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003db2:	fab2 f282 	clz	r2, r2
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	f042 0220 	orr.w	r2, r2, #32
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	f002 021f 	and.w	r2, r2, #31
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1ad      	bne.n	8003d2a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 8110 	beq.w	8004004 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d079      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x760>
 8003df4:	2301      	movs	r3, #1
 8003df6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003e06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0a:	fab3 f383 	clz	r3, r3
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	4bab      	ldr	r3, [pc, #684]	@ (80040c0 <HAL_RCC_OscConfig+0x938>)
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1e:	f7fd faad 	bl	800137c <HAL_GetTick>
 8003e22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e26:	e00a      	b.n	8003e3e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e28:	f7fd faa8 	bl	800137c <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d902      	bls.n	8003e3e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	f000 bcdb 	b.w	80047f4 <HAL_RCC_OscConfig+0x106c>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e44:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003e48:	fa93 f3a3 	rbit	r3, r3
 8003e4c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e54:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003e58:	2202      	movs	r2, #2
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e60:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	fa93 f2a3 	rbit	r2, r3
 8003e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	fa93 f2a3 	rbit	r2, r3
 8003e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e92:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003e96:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e98:	4b88      	ldr	r3, [pc, #544]	@ (80040bc <HAL_RCC_OscConfig+0x934>)
 8003e9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	6019      	str	r1, [r3, #0]
 8003ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	fa93 f1a3 	rbit	r1, r3
 8003eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003ebe:	6019      	str	r1, [r3, #0]
  return result;
 8003ec0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	fab3 f383 	clz	r3, r3
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f003 031f 	and.w	r3, r3, #31
 8003eda:	2101      	movs	r1, #1
 8003edc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0a0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x6a0>
 8003ee6:	e08d      	b.n	8004004 <HAL_RCC_OscConfig+0x87c>
 8003ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	fa93 f2a3 	rbit	r2, r3
 8003f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f06:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003f0a:	601a      	str	r2, [r3, #0]
  return result;
 8003f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f10:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003f14:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f16:	fab3 f383 	clz	r3, r3
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4b68      	ldr	r3, [pc, #416]	@ (80040c0 <HAL_RCC_OscConfig+0x938>)
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	461a      	mov	r2, r3
 8003f26:	2300      	movs	r3, #0
 8003f28:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2a:	f7fd fa27 	bl	800137c <HAL_GetTick>
 8003f2e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f32:	e00a      	b.n	8003f4a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f34:	f7fd fa22 	bl	800137c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d902      	bls.n	8003f4a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	f000 bc55 	b.w	80047f4 <HAL_RCC_OscConfig+0x106c>
 8003f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f52:	2202      	movs	r2, #2
 8003f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f5a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	fa93 f2a3 	rbit	r2, r3
 8003f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f68:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f72:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f76:	2202      	movs	r2, #2
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f7e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	fa93 f2a3 	rbit	r2, r3
 8003f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f8c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f96:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	fa93 f2a3 	rbit	r2, r3
 8003fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003fb4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb6:	4b41      	ldr	r3, [pc, #260]	@ (80040bc <HAL_RCC_OscConfig+0x934>)
 8003fb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fbe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003fc2:	2102      	movs	r1, #2
 8003fc4:	6019      	str	r1, [r3, #0]
 8003fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	fa93 f1a3 	rbit	r1, r3
 8003fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003fdc:	6019      	str	r1, [r3, #0]
  return result;
 8003fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	fab3 f383 	clz	r3, r3
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	f003 031f 	and.w	r3, r3, #31
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d197      	bne.n	8003f34 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004008:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 81a1 	beq.w	800435c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401a:	2300      	movs	r3, #0
 800401c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004020:	4b26      	ldr	r3, [pc, #152]	@ (80040bc <HAL_RCC_OscConfig+0x934>)
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d116      	bne.n	800405a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402c:	4b23      	ldr	r3, [pc, #140]	@ (80040bc <HAL_RCC_OscConfig+0x934>)
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	4a22      	ldr	r2, [pc, #136]	@ (80040bc <HAL_RCC_OscConfig+0x934>)
 8004032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004036:	61d3      	str	r3, [r2, #28]
 8004038:	4b20      	ldr	r3, [pc, #128]	@ (80040bc <HAL_RCC_OscConfig+0x934>)
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004044:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800404e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004052:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004054:	2301      	movs	r3, #1
 8004056:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405a:	4b1a      	ldr	r3, [pc, #104]	@ (80040c4 <HAL_RCC_OscConfig+0x93c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d11a      	bne.n	800409c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004066:	4b17      	ldr	r3, [pc, #92]	@ (80040c4 <HAL_RCC_OscConfig+0x93c>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a16      	ldr	r2, [pc, #88]	@ (80040c4 <HAL_RCC_OscConfig+0x93c>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004070:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004072:	f7fd f983 	bl	800137c <HAL_GetTick>
 8004076:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407a:	e009      	b.n	8004090 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407c:	f7fd f97e 	bl	800137c <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b64      	cmp	r3, #100	@ 0x64
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e3b1      	b.n	80047f4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004090:	4b0c      	ldr	r3, [pc, #48]	@ (80040c4 <HAL_RCC_OscConfig+0x93c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0ef      	beq.n	800407c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800409c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d10d      	bne.n	80040c8 <HAL_RCC_OscConfig+0x940>
 80040ac:	4b03      	ldr	r3, [pc, #12]	@ (80040bc <HAL_RCC_OscConfig+0x934>)
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	4a02      	ldr	r2, [pc, #8]	@ (80040bc <HAL_RCC_OscConfig+0x934>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	6213      	str	r3, [r2, #32]
 80040b8:	e03c      	b.n	8004134 <HAL_RCC_OscConfig+0x9ac>
 80040ba:	bf00      	nop
 80040bc:	40021000 	.word	0x40021000
 80040c0:	10908120 	.word	0x10908120
 80040c4:	40007000 	.word	0x40007000
 80040c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10c      	bne.n	80040f2 <HAL_RCC_OscConfig+0x96a>
 80040d8:	4bc1      	ldr	r3, [pc, #772]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	4ac0      	ldr	r2, [pc, #768]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 80040de:	f023 0301 	bic.w	r3, r3, #1
 80040e2:	6213      	str	r3, [r2, #32]
 80040e4:	4bbe      	ldr	r3, [pc, #760]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	4abd      	ldr	r2, [pc, #756]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 80040ea:	f023 0304 	bic.w	r3, r3, #4
 80040ee:	6213      	str	r3, [r2, #32]
 80040f0:	e020      	b.n	8004134 <HAL_RCC_OscConfig+0x9ac>
 80040f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	2b05      	cmp	r3, #5
 8004100:	d10c      	bne.n	800411c <HAL_RCC_OscConfig+0x994>
 8004102:	4bb7      	ldr	r3, [pc, #732]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	4ab6      	ldr	r2, [pc, #728]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 8004108:	f043 0304 	orr.w	r3, r3, #4
 800410c:	6213      	str	r3, [r2, #32]
 800410e:	4bb4      	ldr	r3, [pc, #720]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	4ab3      	ldr	r2, [pc, #716]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	6213      	str	r3, [r2, #32]
 800411a:	e00b      	b.n	8004134 <HAL_RCC_OscConfig+0x9ac>
 800411c:	4bb0      	ldr	r3, [pc, #704]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	4aaf      	ldr	r2, [pc, #700]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 8004122:	f023 0301 	bic.w	r3, r3, #1
 8004126:	6213      	str	r3, [r2, #32]
 8004128:	4bad      	ldr	r3, [pc, #692]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	4aac      	ldr	r2, [pc, #688]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 800412e:	f023 0304 	bic.w	r3, r3, #4
 8004132:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004138:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 8081 	beq.w	8004248 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004146:	f7fd f919 	bl	800137c <HAL_GetTick>
 800414a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800414e:	e00b      	b.n	8004168 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004150:	f7fd f914 	bl	800137c <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004160:	4293      	cmp	r3, r2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e345      	b.n	80047f4 <HAL_RCC_OscConfig+0x106c>
 8004168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800416c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004170:	2202      	movs	r2, #2
 8004172:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004178:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	fa93 f2a3 	rbit	r2, r3
 8004182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004186:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004190:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004194:	2202      	movs	r2, #2
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800419c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	fa93 f2a3 	rbit	r2, r3
 80041a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041aa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80041ae:	601a      	str	r2, [r3, #0]
  return result;
 80041b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041b4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80041b8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ba:	fab3 f383 	clz	r3, r3
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f043 0302 	orr.w	r3, r3, #2
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d102      	bne.n	80041d4 <HAL_RCC_OscConfig+0xa4c>
 80041ce:	4b84      	ldr	r3, [pc, #528]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	e013      	b.n	80041fc <HAL_RCC_OscConfig+0xa74>
 80041d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041d8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80041dc:	2202      	movs	r2, #2
 80041de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	fa93 f2a3 	rbit	r2, r3
 80041ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041f2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	4b79      	ldr	r3, [pc, #484]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004200:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004204:	2102      	movs	r1, #2
 8004206:	6011      	str	r1, [r2, #0]
 8004208:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800420c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	fa92 f1a2 	rbit	r1, r2
 8004216:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800421a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800421e:	6011      	str	r1, [r2, #0]
  return result;
 8004220:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004224:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004228:	6812      	ldr	r2, [r2, #0]
 800422a:	fab2 f282 	clz	r2, r2
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	f002 021f 	and.w	r2, r2, #31
 800423a:	2101      	movs	r1, #1
 800423c:	fa01 f202 	lsl.w	r2, r1, r2
 8004240:	4013      	ands	r3, r2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d084      	beq.n	8004150 <HAL_RCC_OscConfig+0x9c8>
 8004246:	e07f      	b.n	8004348 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004248:	f7fd f898 	bl	800137c <HAL_GetTick>
 800424c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004250:	e00b      	b.n	800426a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004252:	f7fd f893 	bl	800137c <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004262:	4293      	cmp	r3, r2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e2c4      	b.n	80047f4 <HAL_RCC_OscConfig+0x106c>
 800426a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800426e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004272:	2202      	movs	r2, #2
 8004274:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800427a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	fa93 f2a3 	rbit	r2, r3
 8004284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004288:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004292:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004296:	2202      	movs	r2, #2
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800429e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	fa93 f2a3 	rbit	r2, r3
 80042a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ac:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80042b0:	601a      	str	r2, [r3, #0]
  return result;
 80042b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042b6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80042ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042bc:	fab3 f383 	clz	r3, r3
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	f043 0302 	orr.w	r3, r3, #2
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d102      	bne.n	80042d6 <HAL_RCC_OscConfig+0xb4e>
 80042d0:	4b43      	ldr	r3, [pc, #268]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	e013      	b.n	80042fe <HAL_RCC_OscConfig+0xb76>
 80042d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042da:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80042de:	2202      	movs	r2, #2
 80042e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	fa93 f2a3 	rbit	r2, r3
 80042f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	4b39      	ldr	r3, [pc, #228]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004302:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004306:	2102      	movs	r1, #2
 8004308:	6011      	str	r1, [r2, #0]
 800430a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800430e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	fa92 f1a2 	rbit	r1, r2
 8004318:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800431c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004320:	6011      	str	r1, [r2, #0]
  return result;
 8004322:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004326:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	fab2 f282 	clz	r2, r2
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	f002 021f 	and.w	r2, r2, #31
 800433c:	2101      	movs	r1, #1
 800433e:	fa01 f202 	lsl.w	r2, r1, r2
 8004342:	4013      	ands	r3, r2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d184      	bne.n	8004252 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004348:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800434c:	2b01      	cmp	r3, #1
 800434e:	d105      	bne.n	800435c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004350:	4b23      	ldr	r3, [pc, #140]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	4a22      	ldr	r2, [pc, #136]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 8004356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800435a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800435c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004360:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8242 	beq.w	80047f2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800436e:	4b1c      	ldr	r3, [pc, #112]	@ (80043e0 <HAL_RCC_OscConfig+0xc58>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f003 030c 	and.w	r3, r3, #12
 8004376:	2b08      	cmp	r3, #8
 8004378:	f000 8213 	beq.w	80047a2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800437c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004380:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	2b02      	cmp	r3, #2
 800438a:	f040 8162 	bne.w	8004652 <HAL_RCC_OscConfig+0xeca>
 800438e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004392:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004396:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800439a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043a0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	fa93 f2a3 	rbit	r2, r3
 80043aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ae:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80043b2:	601a      	str	r2, [r3, #0]
  return result;
 80043b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80043bc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043be:	fab3 f383 	clz	r3, r3
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80043c8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	461a      	mov	r2, r3
 80043d0:	2300      	movs	r3, #0
 80043d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d4:	f7fc ffd2 	bl	800137c <HAL_GetTick>
 80043d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043dc:	e00c      	b.n	80043f8 <HAL_RCC_OscConfig+0xc70>
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e4:	f7fc ffca 	bl	800137c <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e1fd      	b.n	80047f4 <HAL_RCC_OscConfig+0x106c>
 80043f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043fc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004400:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	fa93 f2a3 	rbit	r2, r3
 8004414:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004418:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800441c:	601a      	str	r2, [r3, #0]
  return result;
 800441e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004422:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004426:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004428:	fab3 f383 	clz	r3, r3
 800442c:	b2db      	uxtb	r3, r3
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	b2db      	uxtb	r3, r3
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	d102      	bne.n	8004442 <HAL_RCC_OscConfig+0xcba>
 800443c:	4bb0      	ldr	r3, [pc, #704]	@ (8004700 <HAL_RCC_OscConfig+0xf78>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	e027      	b.n	8004492 <HAL_RCC_OscConfig+0xd0a>
 8004442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004446:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800444a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800444e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004454:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	fa93 f2a3 	rbit	r2, r3
 800445e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004462:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800446c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004470:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800447a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	fa93 f2a3 	rbit	r2, r3
 8004484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004488:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	4b9c      	ldr	r3, [pc, #624]	@ (8004700 <HAL_RCC_OscConfig+0xf78>)
 8004490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004492:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004496:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800449a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800449e:	6011      	str	r1, [r2, #0]
 80044a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044a4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	fa92 f1a2 	rbit	r1, r2
 80044ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044b2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80044b6:	6011      	str	r1, [r2, #0]
  return result;
 80044b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044bc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	fab2 f282 	clz	r2, r2
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	f042 0220 	orr.w	r2, r2, #32
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	f002 021f 	and.w	r2, r2, #31
 80044d2:	2101      	movs	r1, #1
 80044d4:	fa01 f202 	lsl.w	r2, r1, r2
 80044d8:	4013      	ands	r3, r2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d182      	bne.n	80043e4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044de:	4b88      	ldr	r3, [pc, #544]	@ (8004700 <HAL_RCC_OscConfig+0xf78>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80044e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80044f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	430b      	orrs	r3, r1
 8004500:	497f      	ldr	r1, [pc, #508]	@ (8004700 <HAL_RCC_OscConfig+0xf78>)
 8004502:	4313      	orrs	r3, r2
 8004504:	604b      	str	r3, [r1, #4]
 8004506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800450a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800450e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004512:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004514:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004518:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	fa93 f2a3 	rbit	r2, r3
 8004522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004526:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800452a:	601a      	str	r2, [r3, #0]
  return result;
 800452c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004530:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004534:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004536:	fab3 f383 	clz	r3, r3
 800453a:	b2db      	uxtb	r3, r3
 800453c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004540:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	461a      	mov	r2, r3
 8004548:	2301      	movs	r3, #1
 800454a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454c:	f7fc ff16 	bl	800137c <HAL_GetTick>
 8004550:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004554:	e009      	b.n	800456a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004556:	f7fc ff11 	bl	800137c <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e144      	b.n	80047f4 <HAL_RCC_OscConfig+0x106c>
 800456a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800456e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004572:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800457c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	fa93 f2a3 	rbit	r2, r3
 8004586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800458a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800458e:	601a      	str	r2, [r3, #0]
  return result;
 8004590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004594:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004598:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800459a:	fab3 f383 	clz	r3, r3
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d102      	bne.n	80045b4 <HAL_RCC_OscConfig+0xe2c>
 80045ae:	4b54      	ldr	r3, [pc, #336]	@ (8004700 <HAL_RCC_OscConfig+0xf78>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	e027      	b.n	8004604 <HAL_RCC_OscConfig+0xe7c>
 80045b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80045bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045c6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	fa93 f2a3 	rbit	r2, r3
 80045d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045d4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045de:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80045e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045ec:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	fa93 f2a3 	rbit	r2, r3
 80045f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045fa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	4b3f      	ldr	r3, [pc, #252]	@ (8004700 <HAL_RCC_OscConfig+0xf78>)
 8004602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004604:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004608:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800460c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004610:	6011      	str	r1, [r2, #0]
 8004612:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004616:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800461a:	6812      	ldr	r2, [r2, #0]
 800461c:	fa92 f1a2 	rbit	r1, r2
 8004620:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004624:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004628:	6011      	str	r1, [r2, #0]
  return result;
 800462a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800462e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	fab2 f282 	clz	r2, r2
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	f042 0220 	orr.w	r2, r2, #32
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	f002 021f 	and.w	r2, r2, #31
 8004644:	2101      	movs	r1, #1
 8004646:	fa01 f202 	lsl.w	r2, r1, r2
 800464a:	4013      	ands	r3, r2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d082      	beq.n	8004556 <HAL_RCC_OscConfig+0xdce>
 8004650:	e0cf      	b.n	80047f2 <HAL_RCC_OscConfig+0x106a>
 8004652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004656:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800465a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800465e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004664:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	fa93 f2a3 	rbit	r2, r3
 800466e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004672:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004676:	601a      	str	r2, [r3, #0]
  return result;
 8004678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800467c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004680:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004682:	fab3 f383 	clz	r3, r3
 8004686:	b2db      	uxtb	r3, r3
 8004688:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800468c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	461a      	mov	r2, r3
 8004694:	2300      	movs	r3, #0
 8004696:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004698:	f7fc fe70 	bl	800137c <HAL_GetTick>
 800469c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a0:	e009      	b.n	80046b6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fc fe6b 	bl	800137c <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e09e      	b.n	80047f4 <HAL_RCC_OscConfig+0x106c>
 80046b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ba:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80046be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046c8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	fa93 f2a3 	rbit	r2, r3
 80046d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80046da:	601a      	str	r2, [r3, #0]
  return result;
 80046dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046e0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80046e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046e6:	fab3 f383 	clz	r3, r3
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d104      	bne.n	8004704 <HAL_RCC_OscConfig+0xf7c>
 80046fa:	4b01      	ldr	r3, [pc, #4]	@ (8004700 <HAL_RCC_OscConfig+0xf78>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	e029      	b.n	8004754 <HAL_RCC_OscConfig+0xfcc>
 8004700:	40021000 	.word	0x40021000
 8004704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004708:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800470c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004710:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004712:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004716:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	fa93 f2a3 	rbit	r2, r3
 8004720:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004724:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800472e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004732:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800473c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	fa93 f2a3 	rbit	r2, r3
 8004746:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800474a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	4b2b      	ldr	r3, [pc, #172]	@ (8004800 <HAL_RCC_OscConfig+0x1078>)
 8004752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004754:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004758:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800475c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004760:	6011      	str	r1, [r2, #0]
 8004762:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004766:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800476a:	6812      	ldr	r2, [r2, #0]
 800476c:	fa92 f1a2 	rbit	r1, r2
 8004770:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004774:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004778:	6011      	str	r1, [r2, #0]
  return result;
 800477a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800477e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	fab2 f282 	clz	r2, r2
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	f042 0220 	orr.w	r2, r2, #32
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	f002 021f 	and.w	r2, r2, #31
 8004794:	2101      	movs	r1, #1
 8004796:	fa01 f202 	lsl.w	r2, r1, r2
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d180      	bne.n	80046a2 <HAL_RCC_OscConfig+0xf1a>
 80047a0:	e027      	b.n	80047f2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d101      	bne.n	80047b6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e01e      	b.n	80047f4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047b6:	4b12      	ldr	r3, [pc, #72]	@ (8004800 <HAL_RCC_OscConfig+0x1078>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80047c2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80047c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d10b      	bne.n	80047ee <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80047d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80047da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80047de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d001      	beq.n	80047f2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40021000 	.word	0x40021000

08004804 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b09e      	sub	sp, #120	@ 0x78
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e162      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800481c:	4b90      	ldr	r3, [pc, #576]	@ (8004a60 <HAL_RCC_ClockConfig+0x25c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d910      	bls.n	800484c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482a:	4b8d      	ldr	r3, [pc, #564]	@ (8004a60 <HAL_RCC_ClockConfig+0x25c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 0207 	bic.w	r2, r3, #7
 8004832:	498b      	ldr	r1, [pc, #556]	@ (8004a60 <HAL_RCC_ClockConfig+0x25c>)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800483a:	4b89      	ldr	r3, [pc, #548]	@ (8004a60 <HAL_RCC_ClockConfig+0x25c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d001      	beq.n	800484c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e14a      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004858:	4b82      	ldr	r3, [pc, #520]	@ (8004a64 <HAL_RCC_ClockConfig+0x260>)
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	497f      	ldr	r1, [pc, #508]	@ (8004a64 <HAL_RCC_ClockConfig+0x260>)
 8004866:	4313      	orrs	r3, r2
 8004868:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 80dc 	beq.w	8004a30 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d13c      	bne.n	80048fa <HAL_RCC_ClockConfig+0xf6>
 8004880:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004884:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004886:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004888:	fa93 f3a3 	rbit	r3, r3
 800488c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800488e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004890:	fab3 f383 	clz	r3, r3
 8004894:	b2db      	uxtb	r3, r3
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	b2db      	uxtb	r3, r3
 800489a:	f043 0301 	orr.w	r3, r3, #1
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d102      	bne.n	80048aa <HAL_RCC_ClockConfig+0xa6>
 80048a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004a64 <HAL_RCC_ClockConfig+0x260>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	e00f      	b.n	80048ca <HAL_RCC_ClockConfig+0xc6>
 80048aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048b2:	fa93 f3a3 	rbit	r3, r3
 80048b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80048b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80048be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048c0:	fa93 f3a3 	rbit	r3, r3
 80048c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048c6:	4b67      	ldr	r3, [pc, #412]	@ (8004a64 <HAL_RCC_ClockConfig+0x260>)
 80048c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80048ce:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048d2:	fa92 f2a2 	rbit	r2, r2
 80048d6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80048d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80048da:	fab2 f282 	clz	r2, r2
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	f042 0220 	orr.w	r2, r2, #32
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	f002 021f 	and.w	r2, r2, #31
 80048ea:	2101      	movs	r1, #1
 80048ec:	fa01 f202 	lsl.w	r2, r1, r2
 80048f0:	4013      	ands	r3, r2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d17b      	bne.n	80049ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e0f3      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d13c      	bne.n	800497c <HAL_RCC_ClockConfig+0x178>
 8004902:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004906:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800490a:	fa93 f3a3 	rbit	r3, r3
 800490e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004912:	fab3 f383 	clz	r3, r3
 8004916:	b2db      	uxtb	r3, r3
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	b2db      	uxtb	r3, r3
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	d102      	bne.n	800492c <HAL_RCC_ClockConfig+0x128>
 8004926:	4b4f      	ldr	r3, [pc, #316]	@ (8004a64 <HAL_RCC_ClockConfig+0x260>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	e00f      	b.n	800494c <HAL_RCC_ClockConfig+0x148>
 800492c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004930:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004934:	fa93 f3a3 	rbit	r3, r3
 8004938:	647b      	str	r3, [r7, #68]	@ 0x44
 800493a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800493e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004942:	fa93 f3a3 	rbit	r3, r3
 8004946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004948:	4b46      	ldr	r3, [pc, #280]	@ (8004a64 <HAL_RCC_ClockConfig+0x260>)
 800494a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004950:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004952:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004954:	fa92 f2a2 	rbit	r2, r2
 8004958:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800495a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800495c:	fab2 f282 	clz	r2, r2
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	f042 0220 	orr.w	r2, r2, #32
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	f002 021f 	and.w	r2, r2, #31
 800496c:	2101      	movs	r1, #1
 800496e:	fa01 f202 	lsl.w	r2, r1, r2
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d13a      	bne.n	80049ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e0b2      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x2de>
 800497c:	2302      	movs	r3, #2
 800497e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004982:	fa93 f3a3 	rbit	r3, r3
 8004986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498a:	fab3 f383 	clz	r3, r3
 800498e:	b2db      	uxtb	r3, r3
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	b2db      	uxtb	r3, r3
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b01      	cmp	r3, #1
 800499c:	d102      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x1a0>
 800499e:	4b31      	ldr	r3, [pc, #196]	@ (8004a64 <HAL_RCC_ClockConfig+0x260>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	e00d      	b.n	80049c0 <HAL_RCC_ClockConfig+0x1bc>
 80049a4:	2302      	movs	r3, #2
 80049a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049aa:	fa93 f3a3 	rbit	r3, r3
 80049ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80049b0:	2302      	movs	r3, #2
 80049b2:	623b      	str	r3, [r7, #32]
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	fa93 f3a3 	rbit	r3, r3
 80049ba:	61fb      	str	r3, [r7, #28]
 80049bc:	4b29      	ldr	r3, [pc, #164]	@ (8004a64 <HAL_RCC_ClockConfig+0x260>)
 80049be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c0:	2202      	movs	r2, #2
 80049c2:	61ba      	str	r2, [r7, #24]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	fa92 f2a2 	rbit	r2, r2
 80049ca:	617a      	str	r2, [r7, #20]
  return result;
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	fab2 f282 	clz	r2, r2
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	f042 0220 	orr.w	r2, r2, #32
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	f002 021f 	and.w	r2, r2, #31
 80049de:	2101      	movs	r1, #1
 80049e0:	fa01 f202 	lsl.w	r2, r1, r2
 80049e4:	4013      	ands	r3, r2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e079      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004a64 <HAL_RCC_ClockConfig+0x260>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f023 0203 	bic.w	r2, r3, #3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	491a      	ldr	r1, [pc, #104]	@ (8004a64 <HAL_RCC_ClockConfig+0x260>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a00:	f7fc fcbc 	bl	800137c <HAL_GetTick>
 8004a04:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a06:	e00a      	b.n	8004a1e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a08:	f7fc fcb8 	bl	800137c <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e061      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1e:	4b11      	ldr	r3, [pc, #68]	@ (8004a64 <HAL_RCC_ClockConfig+0x260>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f003 020c 	and.w	r2, r3, #12
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d1eb      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a30:	4b0b      	ldr	r3, [pc, #44]	@ (8004a60 <HAL_RCC_ClockConfig+0x25c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d214      	bcs.n	8004a68 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3e:	4b08      	ldr	r3, [pc, #32]	@ (8004a60 <HAL_RCC_ClockConfig+0x25c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f023 0207 	bic.w	r2, r3, #7
 8004a46:	4906      	ldr	r1, [pc, #24]	@ (8004a60 <HAL_RCC_ClockConfig+0x25c>)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4e:	4b04      	ldr	r3, [pc, #16]	@ (8004a60 <HAL_RCC_ClockConfig+0x25c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d005      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e040      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x2de>
 8004a60:	40022000 	.word	0x40022000
 8004a64:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d008      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a74:	4b1d      	ldr	r3, [pc, #116]	@ (8004aec <HAL_RCC_ClockConfig+0x2e8>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	491a      	ldr	r1, [pc, #104]	@ (8004aec <HAL_RCC_ClockConfig+0x2e8>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d009      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a92:	4b16      	ldr	r3, [pc, #88]	@ (8004aec <HAL_RCC_ClockConfig+0x2e8>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	4912      	ldr	r1, [pc, #72]	@ (8004aec <HAL_RCC_ClockConfig+0x2e8>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004aa6:	f000 f829 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 8004aaa:	4601      	mov	r1, r0
 8004aac:	4b0f      	ldr	r3, [pc, #60]	@ (8004aec <HAL_RCC_ClockConfig+0x2e8>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ab4:	22f0      	movs	r2, #240	@ 0xf0
 8004ab6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	fa92 f2a2 	rbit	r2, r2
 8004abe:	60fa      	str	r2, [r7, #12]
  return result;
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	fab2 f282 	clz	r2, r2
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	40d3      	lsrs	r3, r2
 8004aca:	4a09      	ldr	r2, [pc, #36]	@ (8004af0 <HAL_RCC_ClockConfig+0x2ec>)
 8004acc:	5cd3      	ldrb	r3, [r2, r3]
 8004ace:	fa21 f303 	lsr.w	r3, r1, r3
 8004ad2:	4a08      	ldr	r2, [pc, #32]	@ (8004af4 <HAL_RCC_ClockConfig+0x2f0>)
 8004ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004ad6:	4b08      	ldr	r3, [pc, #32]	@ (8004af8 <HAL_RCC_ClockConfig+0x2f4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fc fc0a 	bl	80012f4 <HAL_InitTick>
  
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3778      	adds	r7, #120	@ 0x78
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40021000 	.word	0x40021000
 8004af0:	08006adc 	.word	0x08006adc
 8004af4:	2000000c 	.word	0x2000000c
 8004af8:	20000010 	.word	0x20000010

08004afc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	2300      	movs	r3, #0
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004b16:	4b1e      	ldr	r3, [pc, #120]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d002      	beq.n	8004b2c <HAL_RCC_GetSysClockFreq+0x30>
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d003      	beq.n	8004b32 <HAL_RCC_GetSysClockFreq+0x36>
 8004b2a:	e026      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b2c:	4b19      	ldr	r3, [pc, #100]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b2e:	613b      	str	r3, [r7, #16]
      break;
 8004b30:	e026      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	0c9b      	lsrs	r3, r3, #18
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	4a17      	ldr	r2, [pc, #92]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b3c:	5cd3      	ldrb	r3, [r2, r3]
 8004b3e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004b40:	4b13      	ldr	r3, [pc, #76]	@ (8004b90 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	4a14      	ldr	r2, [pc, #80]	@ (8004b9c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b4a:	5cd3      	ldrb	r3, [r2, r3]
 8004b4c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b58:	4a0e      	ldr	r2, [pc, #56]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	fb02 f303 	mul.w	r3, r2, r3
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	e004      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	613b      	str	r3, [r7, #16]
      break;
 8004b78:	e002      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004b7c:	613b      	str	r3, [r7, #16]
      break;
 8004b7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b80:	693b      	ldr	r3, [r7, #16]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	371c      	adds	r7, #28
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40021000 	.word	0x40021000
 8004b94:	00f42400 	.word	0x00f42400
 8004b98:	08006aec 	.word	0x08006aec
 8004b9c:	08006afc 	.word	0x08006afc
 8004ba0:	003d0900 	.word	0x003d0900
 8004ba4:	007a1200 	.word	0x007a1200

08004ba8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b092      	sub	sp, #72	@ 0x48
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 80d4 	beq.w	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bcc:	4b4e      	ldr	r3, [pc, #312]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10e      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd8:	4b4b      	ldr	r3, [pc, #300]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	4a4a      	ldr	r2, [pc, #296]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004be2:	61d3      	str	r3, [r2, #28]
 8004be4:	4b48      	ldr	r3, [pc, #288]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf6:	4b45      	ldr	r3, [pc, #276]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d118      	bne.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c02:	4b42      	ldr	r3, [pc, #264]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a41      	ldr	r2, [pc, #260]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c0c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c0e:	f7fc fbb5 	bl	800137c <HAL_GetTick>
 8004c12:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c14:	e008      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c16:	f7fc fbb1 	bl	800137c <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b64      	cmp	r3, #100	@ 0x64
 8004c22:	d901      	bls.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e169      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c28:	4b38      	ldr	r3, [pc, #224]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0f0      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c34:	4b34      	ldr	r3, [pc, #208]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 8084 	beq.w	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c4e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d07c      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c54:	4b2c      	ldr	r3, [pc, #176]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c62:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c66:	fa93 f3a3 	rbit	r3, r3
 8004c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c6e:	fab3 f383 	clz	r3, r3
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	461a      	mov	r2, r3
 8004c76:	4b26      	ldr	r3, [pc, #152]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	2301      	movs	r3, #1
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8a:	fa93 f3a3 	rbit	r3, r3
 8004c8e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c92:	fab3 f383 	clz	r3, r3
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ca6:	4a18      	ldr	r2, [pc, #96]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004caa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d04b      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb6:	f7fc fb61 	bl	800137c <HAL_GetTick>
 8004cba:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cbc:	e00a      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cbe:	f7fc fb5d 	bl	800137c <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e113      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cda:	fa93 f3a3 	rbit	r3, r3
 8004cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	623b      	str	r3, [r7, #32]
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	fa93 f3a3 	rbit	r3, r3
 8004cea:	61fb      	str	r3, [r7, #28]
  return result;
 8004cec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cee:	fab3 f383 	clz	r3, r3
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	f043 0302 	orr.w	r3, r3, #2
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d108      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004d02:	4b01      	ldr	r3, [pc, #4]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	e00d      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	40007000 	.word	0x40007000
 8004d10:	10908100 	.word	0x10908100
 8004d14:	2302      	movs	r3, #2
 8004d16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	fa93 f3a3 	rbit	r3, r3
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	4b78      	ldr	r3, [pc, #480]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	2202      	movs	r2, #2
 8004d26:	613a      	str	r2, [r7, #16]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	fa92 f2a2 	rbit	r2, r2
 8004d2e:	60fa      	str	r2, [r7, #12]
  return result;
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	fab2 f282 	clz	r2, r2
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	f002 021f 	and.w	r2, r2, #31
 8004d42:	2101      	movs	r1, #1
 8004d44:	fa01 f202 	lsl.w	r2, r1, r2
 8004d48:	4013      	ands	r3, r2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0b7      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004d4e:	4b6d      	ldr	r3, [pc, #436]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	496a      	ldr	r1, [pc, #424]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d60:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d105      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d68:	4b66      	ldr	r3, [pc, #408]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	4a65      	ldr	r2, [pc, #404]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d80:	4b60      	ldr	r3, [pc, #384]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d84:	f023 0203 	bic.w	r2, r3, #3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	495d      	ldr	r1, [pc, #372]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d008      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d9e:	4b59      	ldr	r3, [pc, #356]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	4956      	ldr	r1, [pc, #344]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dbc:	4b51      	ldr	r3, [pc, #324]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	494e      	ldr	r1, [pc, #312]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d008      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dda:	4b4a      	ldr	r3, [pc, #296]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dde:	f023 0210 	bic.w	r2, r3, #16
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	4947      	ldr	r1, [pc, #284]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004df8:	4b42      	ldr	r3, [pc, #264]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e04:	493f      	ldr	r1, [pc, #252]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d008      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e16:	4b3b      	ldr	r3, [pc, #236]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1a:	f023 0220 	bic.w	r2, r3, #32
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	4938      	ldr	r1, [pc, #224]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0308 	and.w	r3, r3, #8
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e34:	4b33      	ldr	r3, [pc, #204]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e38:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	4930      	ldr	r1, [pc, #192]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0310 	and.w	r3, r3, #16
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d008      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e52:	4b2c      	ldr	r3, [pc, #176]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	4929      	ldr	r1, [pc, #164]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d008      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e70:	4b24      	ldr	r3, [pc, #144]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7c:	4921      	ldr	r1, [pc, #132]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d008      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e92:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9a:	491a      	ldr	r1, [pc, #104]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004eac:	4b15      	ldr	r3, [pc, #84]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb0:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb8:	4912      	ldr	r1, [pc, #72]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d008      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004eca:	4b0e      	ldr	r3, [pc, #56]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ece:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed6:	490b      	ldr	r1, [pc, #44]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004ee8:	4b06      	ldr	r3, [pc, #24]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef4:	4903      	ldr	r1, [pc, #12]	@ (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3748      	adds	r7, #72	@ 0x48
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40021000 	.word	0x40021000

08004f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e049      	b.n	8004fae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d106      	bne.n	8004f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fb ffaa 	bl	8000e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3304      	adds	r3, #4
 8004f44:	4619      	mov	r1, r3
 8004f46:	4610      	mov	r0, r2
 8004f48:	f000 fa9e 	bl	8005488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d001      	beq.n	8004fd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e04a      	b.n	8005066 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a21      	ldr	r2, [pc, #132]	@ (8005074 <HAL_TIM_Base_Start_IT+0xbc>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d018      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x6c>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ffa:	d013      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x6c>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1d      	ldr	r2, [pc, #116]	@ (8005078 <HAL_TIM_Base_Start_IT+0xc0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00e      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x6c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a1c      	ldr	r2, [pc, #112]	@ (800507c <HAL_TIM_Base_Start_IT+0xc4>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d009      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x6c>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a1a      	ldr	r2, [pc, #104]	@ (8005080 <HAL_TIM_Base_Start_IT+0xc8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d004      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0x6c>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a19      	ldr	r2, [pc, #100]	@ (8005084 <HAL_TIM_Base_Start_IT+0xcc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d115      	bne.n	8005050 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	4b17      	ldr	r3, [pc, #92]	@ (8005088 <HAL_TIM_Base_Start_IT+0xd0>)
 800502c:	4013      	ands	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b06      	cmp	r3, #6
 8005034:	d015      	beq.n	8005062 <HAL_TIM_Base_Start_IT+0xaa>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800503c:	d011      	beq.n	8005062 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0201 	orr.w	r2, r2, #1
 800504c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800504e:	e008      	b.n	8005062 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	e000      	b.n	8005064 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005062:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40012c00 	.word	0x40012c00
 8005078:	40000400 	.word	0x40000400
 800507c:	40000800 	.word	0x40000800
 8005080:	40013400 	.word	0x40013400
 8005084:	40014000 	.word	0x40014000
 8005088:	00010007 	.word	0x00010007

0800508c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d020      	beq.n	80050f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01b      	beq.n	80050f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0202 	mvn.w	r2, #2
 80050c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f9b7 	bl	800544a <HAL_TIM_IC_CaptureCallback>
 80050dc:	e005      	b.n	80050ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f9a9 	bl	8005436 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f9ba 	bl	800545e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d020      	beq.n	800513c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01b      	beq.n	800513c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f06f 0204 	mvn.w	r2, #4
 800510c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f991 	bl	800544a <HAL_TIM_IC_CaptureCallback>
 8005128:	e005      	b.n	8005136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f983 	bl	8005436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f994 	bl	800545e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f003 0308 	and.w	r3, r3, #8
 8005142:	2b00      	cmp	r3, #0
 8005144:	d020      	beq.n	8005188 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01b      	beq.n	8005188 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0208 	mvn.w	r2, #8
 8005158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2204      	movs	r2, #4
 800515e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f96b 	bl	800544a <HAL_TIM_IC_CaptureCallback>
 8005174:	e005      	b.n	8005182 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f95d 	bl	8005436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f96e 	bl	800545e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	2b00      	cmp	r3, #0
 8005190:	d020      	beq.n	80051d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	2b00      	cmp	r3, #0
 800519a:	d01b      	beq.n	80051d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0210 	mvn.w	r2, #16
 80051a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2208      	movs	r2, #8
 80051aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f945 	bl	800544a <HAL_TIM_IC_CaptureCallback>
 80051c0:	e005      	b.n	80051ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f937 	bl	8005436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f948 	bl	800545e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00c      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0201 	mvn.w	r2, #1
 80051f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f915 	bl	8005422 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00c      	beq.n	800521c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005208:	2b00      	cmp	r3, #0
 800520a:	d007      	beq.n	800521c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 faf6 	bl	8005808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00c      	beq.n	8005240 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 faee 	bl	800581c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800525c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f907 	bl	8005472 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0220 	mvn.w	r2, #32
 8005280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fab6 	bl	80057f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005288:	bf00      	nop
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d101      	bne.n	80052ac <HAL_TIM_ConfigClockSource+0x1c>
 80052a8:	2302      	movs	r3, #2
 80052aa:	e0b6      	b.n	800541a <HAL_TIM_ConfigClockSource+0x18a>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2202      	movs	r2, #2
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052e8:	d03e      	beq.n	8005368 <HAL_TIM_ConfigClockSource+0xd8>
 80052ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052ee:	f200 8087 	bhi.w	8005400 <HAL_TIM_ConfigClockSource+0x170>
 80052f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052f6:	f000 8086 	beq.w	8005406 <HAL_TIM_ConfigClockSource+0x176>
 80052fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052fe:	d87f      	bhi.n	8005400 <HAL_TIM_ConfigClockSource+0x170>
 8005300:	2b70      	cmp	r3, #112	@ 0x70
 8005302:	d01a      	beq.n	800533a <HAL_TIM_ConfigClockSource+0xaa>
 8005304:	2b70      	cmp	r3, #112	@ 0x70
 8005306:	d87b      	bhi.n	8005400 <HAL_TIM_ConfigClockSource+0x170>
 8005308:	2b60      	cmp	r3, #96	@ 0x60
 800530a:	d050      	beq.n	80053ae <HAL_TIM_ConfigClockSource+0x11e>
 800530c:	2b60      	cmp	r3, #96	@ 0x60
 800530e:	d877      	bhi.n	8005400 <HAL_TIM_ConfigClockSource+0x170>
 8005310:	2b50      	cmp	r3, #80	@ 0x50
 8005312:	d03c      	beq.n	800538e <HAL_TIM_ConfigClockSource+0xfe>
 8005314:	2b50      	cmp	r3, #80	@ 0x50
 8005316:	d873      	bhi.n	8005400 <HAL_TIM_ConfigClockSource+0x170>
 8005318:	2b40      	cmp	r3, #64	@ 0x40
 800531a:	d058      	beq.n	80053ce <HAL_TIM_ConfigClockSource+0x13e>
 800531c:	2b40      	cmp	r3, #64	@ 0x40
 800531e:	d86f      	bhi.n	8005400 <HAL_TIM_ConfigClockSource+0x170>
 8005320:	2b30      	cmp	r3, #48	@ 0x30
 8005322:	d064      	beq.n	80053ee <HAL_TIM_ConfigClockSource+0x15e>
 8005324:	2b30      	cmp	r3, #48	@ 0x30
 8005326:	d86b      	bhi.n	8005400 <HAL_TIM_ConfigClockSource+0x170>
 8005328:	2b20      	cmp	r3, #32
 800532a:	d060      	beq.n	80053ee <HAL_TIM_ConfigClockSource+0x15e>
 800532c:	2b20      	cmp	r3, #32
 800532e:	d867      	bhi.n	8005400 <HAL_TIM_ConfigClockSource+0x170>
 8005330:	2b00      	cmp	r3, #0
 8005332:	d05c      	beq.n	80053ee <HAL_TIM_ConfigClockSource+0x15e>
 8005334:	2b10      	cmp	r3, #16
 8005336:	d05a      	beq.n	80053ee <HAL_TIM_ConfigClockSource+0x15e>
 8005338:	e062      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800534a:	f000 f9b3 	bl	80056b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800535c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	609a      	str	r2, [r3, #8]
      break;
 8005366:	e04f      	b.n	8005408 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005378:	f000 f99c 	bl	80056b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689a      	ldr	r2, [r3, #8]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800538a:	609a      	str	r2, [r3, #8]
      break;
 800538c:	e03c      	b.n	8005408 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800539a:	461a      	mov	r2, r3
 800539c:	f000 f910 	bl	80055c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2150      	movs	r1, #80	@ 0x50
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 f969 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 80053ac:	e02c      	b.n	8005408 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ba:	461a      	mov	r2, r3
 80053bc:	f000 f92f 	bl	800561e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2160      	movs	r1, #96	@ 0x60
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 f959 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 80053cc:	e01c      	b.n	8005408 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053da:	461a      	mov	r2, r3
 80053dc:	f000 f8f0 	bl	80055c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2140      	movs	r1, #64	@ 0x40
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 f949 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 80053ec:	e00c      	b.n	8005408 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4619      	mov	r1, r3
 80053f8:	4610      	mov	r0, r2
 80053fa:	f000 f940 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 80053fe:	e003      	b.n	8005408 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	73fb      	strb	r3, [r7, #15]
      break;
 8005404:	e000      	b.n	8005408 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005418:	7bfb      	ldrb	r3, [r7, #15]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005452:	bf00      	nop
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005466:	bf00      	nop
 8005468:	370c      	adds	r7, #12
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
	...

08005488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a42      	ldr	r2, [pc, #264]	@ (80055a4 <TIM_Base_SetConfig+0x11c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00f      	beq.n	80054c0 <TIM_Base_SetConfig+0x38>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a6:	d00b      	beq.n	80054c0 <TIM_Base_SetConfig+0x38>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a3f      	ldr	r2, [pc, #252]	@ (80055a8 <TIM_Base_SetConfig+0x120>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d007      	beq.n	80054c0 <TIM_Base_SetConfig+0x38>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a3e      	ldr	r2, [pc, #248]	@ (80055ac <TIM_Base_SetConfig+0x124>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_Base_SetConfig+0x38>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a3d      	ldr	r2, [pc, #244]	@ (80055b0 <TIM_Base_SetConfig+0x128>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d108      	bne.n	80054d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a33      	ldr	r2, [pc, #204]	@ (80055a4 <TIM_Base_SetConfig+0x11c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d01b      	beq.n	8005512 <TIM_Base_SetConfig+0x8a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e0:	d017      	beq.n	8005512 <TIM_Base_SetConfig+0x8a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a30      	ldr	r2, [pc, #192]	@ (80055a8 <TIM_Base_SetConfig+0x120>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d013      	beq.n	8005512 <TIM_Base_SetConfig+0x8a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a2f      	ldr	r2, [pc, #188]	@ (80055ac <TIM_Base_SetConfig+0x124>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d00f      	beq.n	8005512 <TIM_Base_SetConfig+0x8a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a2e      	ldr	r2, [pc, #184]	@ (80055b0 <TIM_Base_SetConfig+0x128>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00b      	beq.n	8005512 <TIM_Base_SetConfig+0x8a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a2d      	ldr	r2, [pc, #180]	@ (80055b4 <TIM_Base_SetConfig+0x12c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d007      	beq.n	8005512 <TIM_Base_SetConfig+0x8a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2c      	ldr	r2, [pc, #176]	@ (80055b8 <TIM_Base_SetConfig+0x130>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d003      	beq.n	8005512 <TIM_Base_SetConfig+0x8a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a2b      	ldr	r2, [pc, #172]	@ (80055bc <TIM_Base_SetConfig+0x134>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d108      	bne.n	8005524 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	4313      	orrs	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a16      	ldr	r2, [pc, #88]	@ (80055a4 <TIM_Base_SetConfig+0x11c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00f      	beq.n	8005570 <TIM_Base_SetConfig+0xe8>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a17      	ldr	r2, [pc, #92]	@ (80055b0 <TIM_Base_SetConfig+0x128>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00b      	beq.n	8005570 <TIM_Base_SetConfig+0xe8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a16      	ldr	r2, [pc, #88]	@ (80055b4 <TIM_Base_SetConfig+0x12c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d007      	beq.n	8005570 <TIM_Base_SetConfig+0xe8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a15      	ldr	r2, [pc, #84]	@ (80055b8 <TIM_Base_SetConfig+0x130>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d003      	beq.n	8005570 <TIM_Base_SetConfig+0xe8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a14      	ldr	r2, [pc, #80]	@ (80055bc <TIM_Base_SetConfig+0x134>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d103      	bne.n	8005578 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b01      	cmp	r3, #1
 8005588:	d105      	bne.n	8005596 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f023 0201 	bic.w	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	611a      	str	r2, [r3, #16]
  }
}
 8005596:	bf00      	nop
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40012c00 	.word	0x40012c00
 80055a8:	40000400 	.word	0x40000400
 80055ac:	40000800 	.word	0x40000800
 80055b0:	40013400 	.word	0x40013400
 80055b4:	40014000 	.word	0x40014000
 80055b8:	40014400 	.word	0x40014400
 80055bc:	40014800 	.word	0x40014800

080055c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	f023 0201 	bic.w	r2, r3, #1
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f023 030a 	bic.w	r3, r3, #10
 80055fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	621a      	str	r2, [r3, #32]
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800561e:	b480      	push	{r7}
 8005620:	b087      	sub	sp, #28
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	f023 0210 	bic.w	r2, r3, #16
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005648:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	031b      	lsls	r3, r3, #12
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800565a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	621a      	str	r2, [r3, #32]
}
 8005672:	bf00      	nop
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800567e:	b480      	push	{r7}
 8005680:	b085      	sub	sp, #20
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005694:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	f043 0307 	orr.w	r3, r3, #7
 80056a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	609a      	str	r2, [r3, #8]
}
 80056a8:	bf00      	nop
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	021a      	lsls	r2, r3, #8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	4313      	orrs	r3, r2
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	609a      	str	r2, [r3, #8]
}
 80056e8:	bf00      	nop
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005708:	2302      	movs	r3, #2
 800570a:	e063      	b.n	80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a2b      	ldr	r2, [pc, #172]	@ (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d004      	beq.n	8005740 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a2a      	ldr	r2, [pc, #168]	@ (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d108      	bne.n	8005752 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005746:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005758:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	4313      	orrs	r3, r2
 8005762:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1b      	ldr	r2, [pc, #108]	@ (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d018      	beq.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800577e:	d013      	beq.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a18      	ldr	r2, [pc, #96]	@ (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d00e      	beq.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a17      	ldr	r2, [pc, #92]	@ (80057ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d009      	beq.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a12      	ldr	r2, [pc, #72]	@ (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d004      	beq.n	80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a13      	ldr	r2, [pc, #76]	@ (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d10c      	bne.n	80057c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40013400 	.word	0x40013400
 80057e8:	40000400 	.word	0x40000400
 80057ec:	40000800 	.word	0x40000800
 80057f0:	40014000 	.word	0x40014000

080057f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <std>:
 8005830:	2300      	movs	r3, #0
 8005832:	b510      	push	{r4, lr}
 8005834:	4604      	mov	r4, r0
 8005836:	e9c0 3300 	strd	r3, r3, [r0]
 800583a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800583e:	6083      	str	r3, [r0, #8]
 8005840:	8181      	strh	r1, [r0, #12]
 8005842:	6643      	str	r3, [r0, #100]	@ 0x64
 8005844:	81c2      	strh	r2, [r0, #14]
 8005846:	6183      	str	r3, [r0, #24]
 8005848:	4619      	mov	r1, r3
 800584a:	2208      	movs	r2, #8
 800584c:	305c      	adds	r0, #92	@ 0x5c
 800584e:	f000 f926 	bl	8005a9e <memset>
 8005852:	4b0d      	ldr	r3, [pc, #52]	@ (8005888 <std+0x58>)
 8005854:	6263      	str	r3, [r4, #36]	@ 0x24
 8005856:	4b0d      	ldr	r3, [pc, #52]	@ (800588c <std+0x5c>)
 8005858:	62a3      	str	r3, [r4, #40]	@ 0x28
 800585a:	4b0d      	ldr	r3, [pc, #52]	@ (8005890 <std+0x60>)
 800585c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800585e:	4b0d      	ldr	r3, [pc, #52]	@ (8005894 <std+0x64>)
 8005860:	6323      	str	r3, [r4, #48]	@ 0x30
 8005862:	4b0d      	ldr	r3, [pc, #52]	@ (8005898 <std+0x68>)
 8005864:	6224      	str	r4, [r4, #32]
 8005866:	429c      	cmp	r4, r3
 8005868:	d006      	beq.n	8005878 <std+0x48>
 800586a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800586e:	4294      	cmp	r4, r2
 8005870:	d002      	beq.n	8005878 <std+0x48>
 8005872:	33d0      	adds	r3, #208	@ 0xd0
 8005874:	429c      	cmp	r4, r3
 8005876:	d105      	bne.n	8005884 <std+0x54>
 8005878:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800587c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005880:	f000 b986 	b.w	8005b90 <__retarget_lock_init_recursive>
 8005884:	bd10      	pop	{r4, pc}
 8005886:	bf00      	nop
 8005888:	08005a19 	.word	0x08005a19
 800588c:	08005a3b 	.word	0x08005a3b
 8005890:	08005a73 	.word	0x08005a73
 8005894:	08005a97 	.word	0x08005a97
 8005898:	200001dc 	.word	0x200001dc

0800589c <stdio_exit_handler>:
 800589c:	4a02      	ldr	r2, [pc, #8]	@ (80058a8 <stdio_exit_handler+0xc>)
 800589e:	4903      	ldr	r1, [pc, #12]	@ (80058ac <stdio_exit_handler+0x10>)
 80058a0:	4803      	ldr	r0, [pc, #12]	@ (80058b0 <stdio_exit_handler+0x14>)
 80058a2:	f000 b869 	b.w	8005978 <_fwalk_sglue>
 80058a6:	bf00      	nop
 80058a8:	20000018 	.word	0x20000018
 80058ac:	080066e1 	.word	0x080066e1
 80058b0:	20000028 	.word	0x20000028

080058b4 <cleanup_stdio>:
 80058b4:	6841      	ldr	r1, [r0, #4]
 80058b6:	4b0c      	ldr	r3, [pc, #48]	@ (80058e8 <cleanup_stdio+0x34>)
 80058b8:	4299      	cmp	r1, r3
 80058ba:	b510      	push	{r4, lr}
 80058bc:	4604      	mov	r4, r0
 80058be:	d001      	beq.n	80058c4 <cleanup_stdio+0x10>
 80058c0:	f000 ff0e 	bl	80066e0 <_fflush_r>
 80058c4:	68a1      	ldr	r1, [r4, #8]
 80058c6:	4b09      	ldr	r3, [pc, #36]	@ (80058ec <cleanup_stdio+0x38>)
 80058c8:	4299      	cmp	r1, r3
 80058ca:	d002      	beq.n	80058d2 <cleanup_stdio+0x1e>
 80058cc:	4620      	mov	r0, r4
 80058ce:	f000 ff07 	bl	80066e0 <_fflush_r>
 80058d2:	68e1      	ldr	r1, [r4, #12]
 80058d4:	4b06      	ldr	r3, [pc, #24]	@ (80058f0 <cleanup_stdio+0x3c>)
 80058d6:	4299      	cmp	r1, r3
 80058d8:	d004      	beq.n	80058e4 <cleanup_stdio+0x30>
 80058da:	4620      	mov	r0, r4
 80058dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e0:	f000 befe 	b.w	80066e0 <_fflush_r>
 80058e4:	bd10      	pop	{r4, pc}
 80058e6:	bf00      	nop
 80058e8:	200001dc 	.word	0x200001dc
 80058ec:	20000244 	.word	0x20000244
 80058f0:	200002ac 	.word	0x200002ac

080058f4 <global_stdio_init.part.0>:
 80058f4:	b510      	push	{r4, lr}
 80058f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005924 <global_stdio_init.part.0+0x30>)
 80058f8:	4c0b      	ldr	r4, [pc, #44]	@ (8005928 <global_stdio_init.part.0+0x34>)
 80058fa:	4a0c      	ldr	r2, [pc, #48]	@ (800592c <global_stdio_init.part.0+0x38>)
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	4620      	mov	r0, r4
 8005900:	2200      	movs	r2, #0
 8005902:	2104      	movs	r1, #4
 8005904:	f7ff ff94 	bl	8005830 <std>
 8005908:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800590c:	2201      	movs	r2, #1
 800590e:	2109      	movs	r1, #9
 8005910:	f7ff ff8e 	bl	8005830 <std>
 8005914:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005918:	2202      	movs	r2, #2
 800591a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800591e:	2112      	movs	r1, #18
 8005920:	f7ff bf86 	b.w	8005830 <std>
 8005924:	20000314 	.word	0x20000314
 8005928:	200001dc 	.word	0x200001dc
 800592c:	0800589d 	.word	0x0800589d

08005930 <__sfp_lock_acquire>:
 8005930:	4801      	ldr	r0, [pc, #4]	@ (8005938 <__sfp_lock_acquire+0x8>)
 8005932:	f000 b92e 	b.w	8005b92 <__retarget_lock_acquire_recursive>
 8005936:	bf00      	nop
 8005938:	2000031d 	.word	0x2000031d

0800593c <__sfp_lock_release>:
 800593c:	4801      	ldr	r0, [pc, #4]	@ (8005944 <__sfp_lock_release+0x8>)
 800593e:	f000 b929 	b.w	8005b94 <__retarget_lock_release_recursive>
 8005942:	bf00      	nop
 8005944:	2000031d 	.word	0x2000031d

08005948 <__sinit>:
 8005948:	b510      	push	{r4, lr}
 800594a:	4604      	mov	r4, r0
 800594c:	f7ff fff0 	bl	8005930 <__sfp_lock_acquire>
 8005950:	6a23      	ldr	r3, [r4, #32]
 8005952:	b11b      	cbz	r3, 800595c <__sinit+0x14>
 8005954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005958:	f7ff bff0 	b.w	800593c <__sfp_lock_release>
 800595c:	4b04      	ldr	r3, [pc, #16]	@ (8005970 <__sinit+0x28>)
 800595e:	6223      	str	r3, [r4, #32]
 8005960:	4b04      	ldr	r3, [pc, #16]	@ (8005974 <__sinit+0x2c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1f5      	bne.n	8005954 <__sinit+0xc>
 8005968:	f7ff ffc4 	bl	80058f4 <global_stdio_init.part.0>
 800596c:	e7f2      	b.n	8005954 <__sinit+0xc>
 800596e:	bf00      	nop
 8005970:	080058b5 	.word	0x080058b5
 8005974:	20000314 	.word	0x20000314

08005978 <_fwalk_sglue>:
 8005978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800597c:	4607      	mov	r7, r0
 800597e:	4688      	mov	r8, r1
 8005980:	4614      	mov	r4, r2
 8005982:	2600      	movs	r6, #0
 8005984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005988:	f1b9 0901 	subs.w	r9, r9, #1
 800598c:	d505      	bpl.n	800599a <_fwalk_sglue+0x22>
 800598e:	6824      	ldr	r4, [r4, #0]
 8005990:	2c00      	cmp	r4, #0
 8005992:	d1f7      	bne.n	8005984 <_fwalk_sglue+0xc>
 8005994:	4630      	mov	r0, r6
 8005996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800599a:	89ab      	ldrh	r3, [r5, #12]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d907      	bls.n	80059b0 <_fwalk_sglue+0x38>
 80059a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059a4:	3301      	adds	r3, #1
 80059a6:	d003      	beq.n	80059b0 <_fwalk_sglue+0x38>
 80059a8:	4629      	mov	r1, r5
 80059aa:	4638      	mov	r0, r7
 80059ac:	47c0      	blx	r8
 80059ae:	4306      	orrs	r6, r0
 80059b0:	3568      	adds	r5, #104	@ 0x68
 80059b2:	e7e9      	b.n	8005988 <_fwalk_sglue+0x10>

080059b4 <iprintf>:
 80059b4:	b40f      	push	{r0, r1, r2, r3}
 80059b6:	b507      	push	{r0, r1, r2, lr}
 80059b8:	4906      	ldr	r1, [pc, #24]	@ (80059d4 <iprintf+0x20>)
 80059ba:	ab04      	add	r3, sp, #16
 80059bc:	6808      	ldr	r0, [r1, #0]
 80059be:	f853 2b04 	ldr.w	r2, [r3], #4
 80059c2:	6881      	ldr	r1, [r0, #8]
 80059c4:	9301      	str	r3, [sp, #4]
 80059c6:	f000 fb61 	bl	800608c <_vfiprintf_r>
 80059ca:	b003      	add	sp, #12
 80059cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80059d0:	b004      	add	sp, #16
 80059d2:	4770      	bx	lr
 80059d4:	20000024 	.word	0x20000024

080059d8 <siprintf>:
 80059d8:	b40e      	push	{r1, r2, r3}
 80059da:	b500      	push	{lr}
 80059dc:	b09c      	sub	sp, #112	@ 0x70
 80059de:	ab1d      	add	r3, sp, #116	@ 0x74
 80059e0:	9002      	str	r0, [sp, #8]
 80059e2:	9006      	str	r0, [sp, #24]
 80059e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80059e8:	4809      	ldr	r0, [pc, #36]	@ (8005a10 <siprintf+0x38>)
 80059ea:	9107      	str	r1, [sp, #28]
 80059ec:	9104      	str	r1, [sp, #16]
 80059ee:	4909      	ldr	r1, [pc, #36]	@ (8005a14 <siprintf+0x3c>)
 80059f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80059f4:	9105      	str	r1, [sp, #20]
 80059f6:	6800      	ldr	r0, [r0, #0]
 80059f8:	9301      	str	r3, [sp, #4]
 80059fa:	a902      	add	r1, sp, #8
 80059fc:	f000 fa20 	bl	8005e40 <_svfiprintf_r>
 8005a00:	9b02      	ldr	r3, [sp, #8]
 8005a02:	2200      	movs	r2, #0
 8005a04:	701a      	strb	r2, [r3, #0]
 8005a06:	b01c      	add	sp, #112	@ 0x70
 8005a08:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a0c:	b003      	add	sp, #12
 8005a0e:	4770      	bx	lr
 8005a10:	20000024 	.word	0x20000024
 8005a14:	ffff0208 	.word	0xffff0208

08005a18 <__sread>:
 8005a18:	b510      	push	{r4, lr}
 8005a1a:	460c      	mov	r4, r1
 8005a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a20:	f000 f868 	bl	8005af4 <_read_r>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	bfab      	itete	ge
 8005a28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a2a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a2c:	181b      	addge	r3, r3, r0
 8005a2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a32:	bfac      	ite	ge
 8005a34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a36:	81a3      	strhlt	r3, [r4, #12]
 8005a38:	bd10      	pop	{r4, pc}

08005a3a <__swrite>:
 8005a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3e:	461f      	mov	r7, r3
 8005a40:	898b      	ldrh	r3, [r1, #12]
 8005a42:	05db      	lsls	r3, r3, #23
 8005a44:	4605      	mov	r5, r0
 8005a46:	460c      	mov	r4, r1
 8005a48:	4616      	mov	r6, r2
 8005a4a:	d505      	bpl.n	8005a58 <__swrite+0x1e>
 8005a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a50:	2302      	movs	r3, #2
 8005a52:	2200      	movs	r2, #0
 8005a54:	f000 f83c 	bl	8005ad0 <_lseek_r>
 8005a58:	89a3      	ldrh	r3, [r4, #12]
 8005a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a62:	81a3      	strh	r3, [r4, #12]
 8005a64:	4632      	mov	r2, r6
 8005a66:	463b      	mov	r3, r7
 8005a68:	4628      	mov	r0, r5
 8005a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6e:	f000 b853 	b.w	8005b18 <_write_r>

08005a72 <__sseek>:
 8005a72:	b510      	push	{r4, lr}
 8005a74:	460c      	mov	r4, r1
 8005a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a7a:	f000 f829 	bl	8005ad0 <_lseek_r>
 8005a7e:	1c43      	adds	r3, r0, #1
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	bf15      	itete	ne
 8005a84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a8e:	81a3      	strheq	r3, [r4, #12]
 8005a90:	bf18      	it	ne
 8005a92:	81a3      	strhne	r3, [r4, #12]
 8005a94:	bd10      	pop	{r4, pc}

08005a96 <__sclose>:
 8005a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a9a:	f000 b809 	b.w	8005ab0 <_close_r>

08005a9e <memset>:
 8005a9e:	4402      	add	r2, r0
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d100      	bne.n	8005aa8 <memset+0xa>
 8005aa6:	4770      	bx	lr
 8005aa8:	f803 1b01 	strb.w	r1, [r3], #1
 8005aac:	e7f9      	b.n	8005aa2 <memset+0x4>
	...

08005ab0 <_close_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4d06      	ldr	r5, [pc, #24]	@ (8005acc <_close_r+0x1c>)
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	4608      	mov	r0, r1
 8005aba:	602b      	str	r3, [r5, #0]
 8005abc:	f7fb fb5d 	bl	800117a <_close>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	d102      	bne.n	8005aca <_close_r+0x1a>
 8005ac4:	682b      	ldr	r3, [r5, #0]
 8005ac6:	b103      	cbz	r3, 8005aca <_close_r+0x1a>
 8005ac8:	6023      	str	r3, [r4, #0]
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	20000318 	.word	0x20000318

08005ad0 <_lseek_r>:
 8005ad0:	b538      	push	{r3, r4, r5, lr}
 8005ad2:	4d07      	ldr	r5, [pc, #28]	@ (8005af0 <_lseek_r+0x20>)
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	4608      	mov	r0, r1
 8005ad8:	4611      	mov	r1, r2
 8005ada:	2200      	movs	r2, #0
 8005adc:	602a      	str	r2, [r5, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f7fb fb72 	bl	80011c8 <_lseek>
 8005ae4:	1c43      	adds	r3, r0, #1
 8005ae6:	d102      	bne.n	8005aee <_lseek_r+0x1e>
 8005ae8:	682b      	ldr	r3, [r5, #0]
 8005aea:	b103      	cbz	r3, 8005aee <_lseek_r+0x1e>
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	bd38      	pop	{r3, r4, r5, pc}
 8005af0:	20000318 	.word	0x20000318

08005af4 <_read_r>:
 8005af4:	b538      	push	{r3, r4, r5, lr}
 8005af6:	4d07      	ldr	r5, [pc, #28]	@ (8005b14 <_read_r+0x20>)
 8005af8:	4604      	mov	r4, r0
 8005afa:	4608      	mov	r0, r1
 8005afc:	4611      	mov	r1, r2
 8005afe:	2200      	movs	r2, #0
 8005b00:	602a      	str	r2, [r5, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	f7fb fb00 	bl	8001108 <_read>
 8005b08:	1c43      	adds	r3, r0, #1
 8005b0a:	d102      	bne.n	8005b12 <_read_r+0x1e>
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	b103      	cbz	r3, 8005b12 <_read_r+0x1e>
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	bd38      	pop	{r3, r4, r5, pc}
 8005b14:	20000318 	.word	0x20000318

08005b18 <_write_r>:
 8005b18:	b538      	push	{r3, r4, r5, lr}
 8005b1a:	4d07      	ldr	r5, [pc, #28]	@ (8005b38 <_write_r+0x20>)
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	4608      	mov	r0, r1
 8005b20:	4611      	mov	r1, r2
 8005b22:	2200      	movs	r2, #0
 8005b24:	602a      	str	r2, [r5, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	f7fb fb0b 	bl	8001142 <_write>
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	d102      	bne.n	8005b36 <_write_r+0x1e>
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	b103      	cbz	r3, 8005b36 <_write_r+0x1e>
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	bd38      	pop	{r3, r4, r5, pc}
 8005b38:	20000318 	.word	0x20000318

08005b3c <__errno>:
 8005b3c:	4b01      	ldr	r3, [pc, #4]	@ (8005b44 <__errno+0x8>)
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20000024 	.word	0x20000024

08005b48 <__libc_init_array>:
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8005b80 <__libc_init_array+0x38>)
 8005b4c:	4c0d      	ldr	r4, [pc, #52]	@ (8005b84 <__libc_init_array+0x3c>)
 8005b4e:	1b64      	subs	r4, r4, r5
 8005b50:	10a4      	asrs	r4, r4, #2
 8005b52:	2600      	movs	r6, #0
 8005b54:	42a6      	cmp	r6, r4
 8005b56:	d109      	bne.n	8005b6c <__libc_init_array+0x24>
 8005b58:	4d0b      	ldr	r5, [pc, #44]	@ (8005b88 <__libc_init_array+0x40>)
 8005b5a:	4c0c      	ldr	r4, [pc, #48]	@ (8005b8c <__libc_init_array+0x44>)
 8005b5c:	f000 ff6e 	bl	8006a3c <_init>
 8005b60:	1b64      	subs	r4, r4, r5
 8005b62:	10a4      	asrs	r4, r4, #2
 8005b64:	2600      	movs	r6, #0
 8005b66:	42a6      	cmp	r6, r4
 8005b68:	d105      	bne.n	8005b76 <__libc_init_array+0x2e>
 8005b6a:	bd70      	pop	{r4, r5, r6, pc}
 8005b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b70:	4798      	blx	r3
 8005b72:	3601      	adds	r6, #1
 8005b74:	e7ee      	b.n	8005b54 <__libc_init_array+0xc>
 8005b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b7a:	4798      	blx	r3
 8005b7c:	3601      	adds	r6, #1
 8005b7e:	e7f2      	b.n	8005b66 <__libc_init_array+0x1e>
 8005b80:	08006b48 	.word	0x08006b48
 8005b84:	08006b48 	.word	0x08006b48
 8005b88:	08006b48 	.word	0x08006b48
 8005b8c:	08006b4c 	.word	0x08006b4c

08005b90 <__retarget_lock_init_recursive>:
 8005b90:	4770      	bx	lr

08005b92 <__retarget_lock_acquire_recursive>:
 8005b92:	4770      	bx	lr

08005b94 <__retarget_lock_release_recursive>:
 8005b94:	4770      	bx	lr
	...

08005b98 <_free_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4605      	mov	r5, r0
 8005b9c:	2900      	cmp	r1, #0
 8005b9e:	d041      	beq.n	8005c24 <_free_r+0x8c>
 8005ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ba4:	1f0c      	subs	r4, r1, #4
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	bfb8      	it	lt
 8005baa:	18e4      	addlt	r4, r4, r3
 8005bac:	f000 f8e0 	bl	8005d70 <__malloc_lock>
 8005bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c28 <_free_r+0x90>)
 8005bb2:	6813      	ldr	r3, [r2, #0]
 8005bb4:	b933      	cbnz	r3, 8005bc4 <_free_r+0x2c>
 8005bb6:	6063      	str	r3, [r4, #4]
 8005bb8:	6014      	str	r4, [r2, #0]
 8005bba:	4628      	mov	r0, r5
 8005bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bc0:	f000 b8dc 	b.w	8005d7c <__malloc_unlock>
 8005bc4:	42a3      	cmp	r3, r4
 8005bc6:	d908      	bls.n	8005bda <_free_r+0x42>
 8005bc8:	6820      	ldr	r0, [r4, #0]
 8005bca:	1821      	adds	r1, r4, r0
 8005bcc:	428b      	cmp	r3, r1
 8005bce:	bf01      	itttt	eq
 8005bd0:	6819      	ldreq	r1, [r3, #0]
 8005bd2:	685b      	ldreq	r3, [r3, #4]
 8005bd4:	1809      	addeq	r1, r1, r0
 8005bd6:	6021      	streq	r1, [r4, #0]
 8005bd8:	e7ed      	b.n	8005bb6 <_free_r+0x1e>
 8005bda:	461a      	mov	r2, r3
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	b10b      	cbz	r3, 8005be4 <_free_r+0x4c>
 8005be0:	42a3      	cmp	r3, r4
 8005be2:	d9fa      	bls.n	8005bda <_free_r+0x42>
 8005be4:	6811      	ldr	r1, [r2, #0]
 8005be6:	1850      	adds	r0, r2, r1
 8005be8:	42a0      	cmp	r0, r4
 8005bea:	d10b      	bne.n	8005c04 <_free_r+0x6c>
 8005bec:	6820      	ldr	r0, [r4, #0]
 8005bee:	4401      	add	r1, r0
 8005bf0:	1850      	adds	r0, r2, r1
 8005bf2:	4283      	cmp	r3, r0
 8005bf4:	6011      	str	r1, [r2, #0]
 8005bf6:	d1e0      	bne.n	8005bba <_free_r+0x22>
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	6053      	str	r3, [r2, #4]
 8005bfe:	4408      	add	r0, r1
 8005c00:	6010      	str	r0, [r2, #0]
 8005c02:	e7da      	b.n	8005bba <_free_r+0x22>
 8005c04:	d902      	bls.n	8005c0c <_free_r+0x74>
 8005c06:	230c      	movs	r3, #12
 8005c08:	602b      	str	r3, [r5, #0]
 8005c0a:	e7d6      	b.n	8005bba <_free_r+0x22>
 8005c0c:	6820      	ldr	r0, [r4, #0]
 8005c0e:	1821      	adds	r1, r4, r0
 8005c10:	428b      	cmp	r3, r1
 8005c12:	bf04      	itt	eq
 8005c14:	6819      	ldreq	r1, [r3, #0]
 8005c16:	685b      	ldreq	r3, [r3, #4]
 8005c18:	6063      	str	r3, [r4, #4]
 8005c1a:	bf04      	itt	eq
 8005c1c:	1809      	addeq	r1, r1, r0
 8005c1e:	6021      	streq	r1, [r4, #0]
 8005c20:	6054      	str	r4, [r2, #4]
 8005c22:	e7ca      	b.n	8005bba <_free_r+0x22>
 8005c24:	bd38      	pop	{r3, r4, r5, pc}
 8005c26:	bf00      	nop
 8005c28:	20000324 	.word	0x20000324

08005c2c <sbrk_aligned>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	4e0f      	ldr	r6, [pc, #60]	@ (8005c6c <sbrk_aligned+0x40>)
 8005c30:	460c      	mov	r4, r1
 8005c32:	6831      	ldr	r1, [r6, #0]
 8005c34:	4605      	mov	r5, r0
 8005c36:	b911      	cbnz	r1, 8005c3e <sbrk_aligned+0x12>
 8005c38:	f000 fe28 	bl	800688c <_sbrk_r>
 8005c3c:	6030      	str	r0, [r6, #0]
 8005c3e:	4621      	mov	r1, r4
 8005c40:	4628      	mov	r0, r5
 8005c42:	f000 fe23 	bl	800688c <_sbrk_r>
 8005c46:	1c43      	adds	r3, r0, #1
 8005c48:	d103      	bne.n	8005c52 <sbrk_aligned+0x26>
 8005c4a:	f04f 34ff 	mov.w	r4, #4294967295
 8005c4e:	4620      	mov	r0, r4
 8005c50:	bd70      	pop	{r4, r5, r6, pc}
 8005c52:	1cc4      	adds	r4, r0, #3
 8005c54:	f024 0403 	bic.w	r4, r4, #3
 8005c58:	42a0      	cmp	r0, r4
 8005c5a:	d0f8      	beq.n	8005c4e <sbrk_aligned+0x22>
 8005c5c:	1a21      	subs	r1, r4, r0
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f000 fe14 	bl	800688c <_sbrk_r>
 8005c64:	3001      	adds	r0, #1
 8005c66:	d1f2      	bne.n	8005c4e <sbrk_aligned+0x22>
 8005c68:	e7ef      	b.n	8005c4a <sbrk_aligned+0x1e>
 8005c6a:	bf00      	nop
 8005c6c:	20000320 	.word	0x20000320

08005c70 <_malloc_r>:
 8005c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c74:	1ccd      	adds	r5, r1, #3
 8005c76:	f025 0503 	bic.w	r5, r5, #3
 8005c7a:	3508      	adds	r5, #8
 8005c7c:	2d0c      	cmp	r5, #12
 8005c7e:	bf38      	it	cc
 8005c80:	250c      	movcc	r5, #12
 8005c82:	2d00      	cmp	r5, #0
 8005c84:	4606      	mov	r6, r0
 8005c86:	db01      	blt.n	8005c8c <_malloc_r+0x1c>
 8005c88:	42a9      	cmp	r1, r5
 8005c8a:	d904      	bls.n	8005c96 <_malloc_r+0x26>
 8005c8c:	230c      	movs	r3, #12
 8005c8e:	6033      	str	r3, [r6, #0]
 8005c90:	2000      	movs	r0, #0
 8005c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d6c <_malloc_r+0xfc>
 8005c9a:	f000 f869 	bl	8005d70 <__malloc_lock>
 8005c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8005ca2:	461c      	mov	r4, r3
 8005ca4:	bb44      	cbnz	r4, 8005cf8 <_malloc_r+0x88>
 8005ca6:	4629      	mov	r1, r5
 8005ca8:	4630      	mov	r0, r6
 8005caa:	f7ff ffbf 	bl	8005c2c <sbrk_aligned>
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	d158      	bne.n	8005d66 <_malloc_r+0xf6>
 8005cb4:	f8d8 4000 	ldr.w	r4, [r8]
 8005cb8:	4627      	mov	r7, r4
 8005cba:	2f00      	cmp	r7, #0
 8005cbc:	d143      	bne.n	8005d46 <_malloc_r+0xd6>
 8005cbe:	2c00      	cmp	r4, #0
 8005cc0:	d04b      	beq.n	8005d5a <_malloc_r+0xea>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	4639      	mov	r1, r7
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	eb04 0903 	add.w	r9, r4, r3
 8005ccc:	f000 fdde 	bl	800688c <_sbrk_r>
 8005cd0:	4581      	cmp	r9, r0
 8005cd2:	d142      	bne.n	8005d5a <_malloc_r+0xea>
 8005cd4:	6821      	ldr	r1, [r4, #0]
 8005cd6:	1a6d      	subs	r5, r5, r1
 8005cd8:	4629      	mov	r1, r5
 8005cda:	4630      	mov	r0, r6
 8005cdc:	f7ff ffa6 	bl	8005c2c <sbrk_aligned>
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d03a      	beq.n	8005d5a <_malloc_r+0xea>
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	442b      	add	r3, r5
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	f8d8 3000 	ldr.w	r3, [r8]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	bb62      	cbnz	r2, 8005d4c <_malloc_r+0xdc>
 8005cf2:	f8c8 7000 	str.w	r7, [r8]
 8005cf6:	e00f      	b.n	8005d18 <_malloc_r+0xa8>
 8005cf8:	6822      	ldr	r2, [r4, #0]
 8005cfa:	1b52      	subs	r2, r2, r5
 8005cfc:	d420      	bmi.n	8005d40 <_malloc_r+0xd0>
 8005cfe:	2a0b      	cmp	r2, #11
 8005d00:	d917      	bls.n	8005d32 <_malloc_r+0xc2>
 8005d02:	1961      	adds	r1, r4, r5
 8005d04:	42a3      	cmp	r3, r4
 8005d06:	6025      	str	r5, [r4, #0]
 8005d08:	bf18      	it	ne
 8005d0a:	6059      	strne	r1, [r3, #4]
 8005d0c:	6863      	ldr	r3, [r4, #4]
 8005d0e:	bf08      	it	eq
 8005d10:	f8c8 1000 	streq.w	r1, [r8]
 8005d14:	5162      	str	r2, [r4, r5]
 8005d16:	604b      	str	r3, [r1, #4]
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f000 f82f 	bl	8005d7c <__malloc_unlock>
 8005d1e:	f104 000b 	add.w	r0, r4, #11
 8005d22:	1d23      	adds	r3, r4, #4
 8005d24:	f020 0007 	bic.w	r0, r0, #7
 8005d28:	1ac2      	subs	r2, r0, r3
 8005d2a:	bf1c      	itt	ne
 8005d2c:	1a1b      	subne	r3, r3, r0
 8005d2e:	50a3      	strne	r3, [r4, r2]
 8005d30:	e7af      	b.n	8005c92 <_malloc_r+0x22>
 8005d32:	6862      	ldr	r2, [r4, #4]
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	bf0c      	ite	eq
 8005d38:	f8c8 2000 	streq.w	r2, [r8]
 8005d3c:	605a      	strne	r2, [r3, #4]
 8005d3e:	e7eb      	b.n	8005d18 <_malloc_r+0xa8>
 8005d40:	4623      	mov	r3, r4
 8005d42:	6864      	ldr	r4, [r4, #4]
 8005d44:	e7ae      	b.n	8005ca4 <_malloc_r+0x34>
 8005d46:	463c      	mov	r4, r7
 8005d48:	687f      	ldr	r7, [r7, #4]
 8005d4a:	e7b6      	b.n	8005cba <_malloc_r+0x4a>
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	d1fb      	bne.n	8005d4c <_malloc_r+0xdc>
 8005d54:	2300      	movs	r3, #0
 8005d56:	6053      	str	r3, [r2, #4]
 8005d58:	e7de      	b.n	8005d18 <_malloc_r+0xa8>
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	6033      	str	r3, [r6, #0]
 8005d5e:	4630      	mov	r0, r6
 8005d60:	f000 f80c 	bl	8005d7c <__malloc_unlock>
 8005d64:	e794      	b.n	8005c90 <_malloc_r+0x20>
 8005d66:	6005      	str	r5, [r0, #0]
 8005d68:	e7d6      	b.n	8005d18 <_malloc_r+0xa8>
 8005d6a:	bf00      	nop
 8005d6c:	20000324 	.word	0x20000324

08005d70 <__malloc_lock>:
 8005d70:	4801      	ldr	r0, [pc, #4]	@ (8005d78 <__malloc_lock+0x8>)
 8005d72:	f7ff bf0e 	b.w	8005b92 <__retarget_lock_acquire_recursive>
 8005d76:	bf00      	nop
 8005d78:	2000031c 	.word	0x2000031c

08005d7c <__malloc_unlock>:
 8005d7c:	4801      	ldr	r0, [pc, #4]	@ (8005d84 <__malloc_unlock+0x8>)
 8005d7e:	f7ff bf09 	b.w	8005b94 <__retarget_lock_release_recursive>
 8005d82:	bf00      	nop
 8005d84:	2000031c 	.word	0x2000031c

08005d88 <__ssputs_r>:
 8005d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d8c:	688e      	ldr	r6, [r1, #8]
 8005d8e:	461f      	mov	r7, r3
 8005d90:	42be      	cmp	r6, r7
 8005d92:	680b      	ldr	r3, [r1, #0]
 8005d94:	4682      	mov	sl, r0
 8005d96:	460c      	mov	r4, r1
 8005d98:	4690      	mov	r8, r2
 8005d9a:	d82d      	bhi.n	8005df8 <__ssputs_r+0x70>
 8005d9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005da0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005da4:	d026      	beq.n	8005df4 <__ssputs_r+0x6c>
 8005da6:	6965      	ldr	r5, [r4, #20]
 8005da8:	6909      	ldr	r1, [r1, #16]
 8005daa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dae:	eba3 0901 	sub.w	r9, r3, r1
 8005db2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005db6:	1c7b      	adds	r3, r7, #1
 8005db8:	444b      	add	r3, r9
 8005dba:	106d      	asrs	r5, r5, #1
 8005dbc:	429d      	cmp	r5, r3
 8005dbe:	bf38      	it	cc
 8005dc0:	461d      	movcc	r5, r3
 8005dc2:	0553      	lsls	r3, r2, #21
 8005dc4:	d527      	bpl.n	8005e16 <__ssputs_r+0x8e>
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	f7ff ff52 	bl	8005c70 <_malloc_r>
 8005dcc:	4606      	mov	r6, r0
 8005dce:	b360      	cbz	r0, 8005e2a <__ssputs_r+0xa2>
 8005dd0:	6921      	ldr	r1, [r4, #16]
 8005dd2:	464a      	mov	r2, r9
 8005dd4:	f000 fd6a 	bl	80068ac <memcpy>
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005de2:	81a3      	strh	r3, [r4, #12]
 8005de4:	6126      	str	r6, [r4, #16]
 8005de6:	6165      	str	r5, [r4, #20]
 8005de8:	444e      	add	r6, r9
 8005dea:	eba5 0509 	sub.w	r5, r5, r9
 8005dee:	6026      	str	r6, [r4, #0]
 8005df0:	60a5      	str	r5, [r4, #8]
 8005df2:	463e      	mov	r6, r7
 8005df4:	42be      	cmp	r6, r7
 8005df6:	d900      	bls.n	8005dfa <__ssputs_r+0x72>
 8005df8:	463e      	mov	r6, r7
 8005dfa:	6820      	ldr	r0, [r4, #0]
 8005dfc:	4632      	mov	r2, r6
 8005dfe:	4641      	mov	r1, r8
 8005e00:	f000 fd2a 	bl	8006858 <memmove>
 8005e04:	68a3      	ldr	r3, [r4, #8]
 8005e06:	1b9b      	subs	r3, r3, r6
 8005e08:	60a3      	str	r3, [r4, #8]
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	4433      	add	r3, r6
 8005e0e:	6023      	str	r3, [r4, #0]
 8005e10:	2000      	movs	r0, #0
 8005e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e16:	462a      	mov	r2, r5
 8005e18:	f000 fd56 	bl	80068c8 <_realloc_r>
 8005e1c:	4606      	mov	r6, r0
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	d1e0      	bne.n	8005de4 <__ssputs_r+0x5c>
 8005e22:	6921      	ldr	r1, [r4, #16]
 8005e24:	4650      	mov	r0, sl
 8005e26:	f7ff feb7 	bl	8005b98 <_free_r>
 8005e2a:	230c      	movs	r3, #12
 8005e2c:	f8ca 3000 	str.w	r3, [sl]
 8005e30:	89a3      	ldrh	r3, [r4, #12]
 8005e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e36:	81a3      	strh	r3, [r4, #12]
 8005e38:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3c:	e7e9      	b.n	8005e12 <__ssputs_r+0x8a>
	...

08005e40 <_svfiprintf_r>:
 8005e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e44:	4698      	mov	r8, r3
 8005e46:	898b      	ldrh	r3, [r1, #12]
 8005e48:	061b      	lsls	r3, r3, #24
 8005e4a:	b09d      	sub	sp, #116	@ 0x74
 8005e4c:	4607      	mov	r7, r0
 8005e4e:	460d      	mov	r5, r1
 8005e50:	4614      	mov	r4, r2
 8005e52:	d510      	bpl.n	8005e76 <_svfiprintf_r+0x36>
 8005e54:	690b      	ldr	r3, [r1, #16]
 8005e56:	b973      	cbnz	r3, 8005e76 <_svfiprintf_r+0x36>
 8005e58:	2140      	movs	r1, #64	@ 0x40
 8005e5a:	f7ff ff09 	bl	8005c70 <_malloc_r>
 8005e5e:	6028      	str	r0, [r5, #0]
 8005e60:	6128      	str	r0, [r5, #16]
 8005e62:	b930      	cbnz	r0, 8005e72 <_svfiprintf_r+0x32>
 8005e64:	230c      	movs	r3, #12
 8005e66:	603b      	str	r3, [r7, #0]
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6c:	b01d      	add	sp, #116	@ 0x74
 8005e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e72:	2340      	movs	r3, #64	@ 0x40
 8005e74:	616b      	str	r3, [r5, #20]
 8005e76:	2300      	movs	r3, #0
 8005e78:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e7a:	2320      	movs	r3, #32
 8005e7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e80:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e84:	2330      	movs	r3, #48	@ 0x30
 8005e86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006024 <_svfiprintf_r+0x1e4>
 8005e8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e8e:	f04f 0901 	mov.w	r9, #1
 8005e92:	4623      	mov	r3, r4
 8005e94:	469a      	mov	sl, r3
 8005e96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e9a:	b10a      	cbz	r2, 8005ea0 <_svfiprintf_r+0x60>
 8005e9c:	2a25      	cmp	r2, #37	@ 0x25
 8005e9e:	d1f9      	bne.n	8005e94 <_svfiprintf_r+0x54>
 8005ea0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ea4:	d00b      	beq.n	8005ebe <_svfiprintf_r+0x7e>
 8005ea6:	465b      	mov	r3, fp
 8005ea8:	4622      	mov	r2, r4
 8005eaa:	4629      	mov	r1, r5
 8005eac:	4638      	mov	r0, r7
 8005eae:	f7ff ff6b 	bl	8005d88 <__ssputs_r>
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	f000 80a7 	beq.w	8006006 <_svfiprintf_r+0x1c6>
 8005eb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005eba:	445a      	add	r2, fp
 8005ebc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ebe:	f89a 3000 	ldrb.w	r3, [sl]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 809f 	beq.w	8006006 <_svfiprintf_r+0x1c6>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	f04f 32ff 	mov.w	r2, #4294967295
 8005ece:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ed2:	f10a 0a01 	add.w	sl, sl, #1
 8005ed6:	9304      	str	r3, [sp, #16]
 8005ed8:	9307      	str	r3, [sp, #28]
 8005eda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ede:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ee0:	4654      	mov	r4, sl
 8005ee2:	2205      	movs	r2, #5
 8005ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee8:	484e      	ldr	r0, [pc, #312]	@ (8006024 <_svfiprintf_r+0x1e4>)
 8005eea:	f7fa f971 	bl	80001d0 <memchr>
 8005eee:	9a04      	ldr	r2, [sp, #16]
 8005ef0:	b9d8      	cbnz	r0, 8005f2a <_svfiprintf_r+0xea>
 8005ef2:	06d0      	lsls	r0, r2, #27
 8005ef4:	bf44      	itt	mi
 8005ef6:	2320      	movmi	r3, #32
 8005ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005efc:	0711      	lsls	r1, r2, #28
 8005efe:	bf44      	itt	mi
 8005f00:	232b      	movmi	r3, #43	@ 0x2b
 8005f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f06:	f89a 3000 	ldrb.w	r3, [sl]
 8005f0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f0c:	d015      	beq.n	8005f3a <_svfiprintf_r+0xfa>
 8005f0e:	9a07      	ldr	r2, [sp, #28]
 8005f10:	4654      	mov	r4, sl
 8005f12:	2000      	movs	r0, #0
 8005f14:	f04f 0c0a 	mov.w	ip, #10
 8005f18:	4621      	mov	r1, r4
 8005f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f1e:	3b30      	subs	r3, #48	@ 0x30
 8005f20:	2b09      	cmp	r3, #9
 8005f22:	d94b      	bls.n	8005fbc <_svfiprintf_r+0x17c>
 8005f24:	b1b0      	cbz	r0, 8005f54 <_svfiprintf_r+0x114>
 8005f26:	9207      	str	r2, [sp, #28]
 8005f28:	e014      	b.n	8005f54 <_svfiprintf_r+0x114>
 8005f2a:	eba0 0308 	sub.w	r3, r0, r8
 8005f2e:	fa09 f303 	lsl.w	r3, r9, r3
 8005f32:	4313      	orrs	r3, r2
 8005f34:	9304      	str	r3, [sp, #16]
 8005f36:	46a2      	mov	sl, r4
 8005f38:	e7d2      	b.n	8005ee0 <_svfiprintf_r+0xa0>
 8005f3a:	9b03      	ldr	r3, [sp, #12]
 8005f3c:	1d19      	adds	r1, r3, #4
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	9103      	str	r1, [sp, #12]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	bfbb      	ittet	lt
 8005f46:	425b      	neglt	r3, r3
 8005f48:	f042 0202 	orrlt.w	r2, r2, #2
 8005f4c:	9307      	strge	r3, [sp, #28]
 8005f4e:	9307      	strlt	r3, [sp, #28]
 8005f50:	bfb8      	it	lt
 8005f52:	9204      	strlt	r2, [sp, #16]
 8005f54:	7823      	ldrb	r3, [r4, #0]
 8005f56:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f58:	d10a      	bne.n	8005f70 <_svfiprintf_r+0x130>
 8005f5a:	7863      	ldrb	r3, [r4, #1]
 8005f5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f5e:	d132      	bne.n	8005fc6 <_svfiprintf_r+0x186>
 8005f60:	9b03      	ldr	r3, [sp, #12]
 8005f62:	1d1a      	adds	r2, r3, #4
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	9203      	str	r2, [sp, #12]
 8005f68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f6c:	3402      	adds	r4, #2
 8005f6e:	9305      	str	r3, [sp, #20]
 8005f70:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006034 <_svfiprintf_r+0x1f4>
 8005f74:	7821      	ldrb	r1, [r4, #0]
 8005f76:	2203      	movs	r2, #3
 8005f78:	4650      	mov	r0, sl
 8005f7a:	f7fa f929 	bl	80001d0 <memchr>
 8005f7e:	b138      	cbz	r0, 8005f90 <_svfiprintf_r+0x150>
 8005f80:	9b04      	ldr	r3, [sp, #16]
 8005f82:	eba0 000a 	sub.w	r0, r0, sl
 8005f86:	2240      	movs	r2, #64	@ 0x40
 8005f88:	4082      	lsls	r2, r0
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	3401      	adds	r4, #1
 8005f8e:	9304      	str	r3, [sp, #16]
 8005f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f94:	4824      	ldr	r0, [pc, #144]	@ (8006028 <_svfiprintf_r+0x1e8>)
 8005f96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f9a:	2206      	movs	r2, #6
 8005f9c:	f7fa f918 	bl	80001d0 <memchr>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d036      	beq.n	8006012 <_svfiprintf_r+0x1d2>
 8005fa4:	4b21      	ldr	r3, [pc, #132]	@ (800602c <_svfiprintf_r+0x1ec>)
 8005fa6:	bb1b      	cbnz	r3, 8005ff0 <_svfiprintf_r+0x1b0>
 8005fa8:	9b03      	ldr	r3, [sp, #12]
 8005faa:	3307      	adds	r3, #7
 8005fac:	f023 0307 	bic.w	r3, r3, #7
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	9303      	str	r3, [sp, #12]
 8005fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb6:	4433      	add	r3, r6
 8005fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fba:	e76a      	b.n	8005e92 <_svfiprintf_r+0x52>
 8005fbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	2001      	movs	r0, #1
 8005fc4:	e7a8      	b.n	8005f18 <_svfiprintf_r+0xd8>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	3401      	adds	r4, #1
 8005fca:	9305      	str	r3, [sp, #20]
 8005fcc:	4619      	mov	r1, r3
 8005fce:	f04f 0c0a 	mov.w	ip, #10
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fd8:	3a30      	subs	r2, #48	@ 0x30
 8005fda:	2a09      	cmp	r2, #9
 8005fdc:	d903      	bls.n	8005fe6 <_svfiprintf_r+0x1a6>
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0c6      	beq.n	8005f70 <_svfiprintf_r+0x130>
 8005fe2:	9105      	str	r1, [sp, #20]
 8005fe4:	e7c4      	b.n	8005f70 <_svfiprintf_r+0x130>
 8005fe6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fea:	4604      	mov	r4, r0
 8005fec:	2301      	movs	r3, #1
 8005fee:	e7f0      	b.n	8005fd2 <_svfiprintf_r+0x192>
 8005ff0:	ab03      	add	r3, sp, #12
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	462a      	mov	r2, r5
 8005ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8006030 <_svfiprintf_r+0x1f0>)
 8005ff8:	a904      	add	r1, sp, #16
 8005ffa:	4638      	mov	r0, r7
 8005ffc:	f3af 8000 	nop.w
 8006000:	1c42      	adds	r2, r0, #1
 8006002:	4606      	mov	r6, r0
 8006004:	d1d6      	bne.n	8005fb4 <_svfiprintf_r+0x174>
 8006006:	89ab      	ldrh	r3, [r5, #12]
 8006008:	065b      	lsls	r3, r3, #25
 800600a:	f53f af2d 	bmi.w	8005e68 <_svfiprintf_r+0x28>
 800600e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006010:	e72c      	b.n	8005e6c <_svfiprintf_r+0x2c>
 8006012:	ab03      	add	r3, sp, #12
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	462a      	mov	r2, r5
 8006018:	4b05      	ldr	r3, [pc, #20]	@ (8006030 <_svfiprintf_r+0x1f0>)
 800601a:	a904      	add	r1, sp, #16
 800601c:	4638      	mov	r0, r7
 800601e:	f000 f9bb 	bl	8006398 <_printf_i>
 8006022:	e7ed      	b.n	8006000 <_svfiprintf_r+0x1c0>
 8006024:	08006b0c 	.word	0x08006b0c
 8006028:	08006b16 	.word	0x08006b16
 800602c:	00000000 	.word	0x00000000
 8006030:	08005d89 	.word	0x08005d89
 8006034:	08006b12 	.word	0x08006b12

08006038 <__sfputc_r>:
 8006038:	6893      	ldr	r3, [r2, #8]
 800603a:	3b01      	subs	r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	b410      	push	{r4}
 8006040:	6093      	str	r3, [r2, #8]
 8006042:	da08      	bge.n	8006056 <__sfputc_r+0x1e>
 8006044:	6994      	ldr	r4, [r2, #24]
 8006046:	42a3      	cmp	r3, r4
 8006048:	db01      	blt.n	800604e <__sfputc_r+0x16>
 800604a:	290a      	cmp	r1, #10
 800604c:	d103      	bne.n	8006056 <__sfputc_r+0x1e>
 800604e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006052:	f000 bb6d 	b.w	8006730 <__swbuf_r>
 8006056:	6813      	ldr	r3, [r2, #0]
 8006058:	1c58      	adds	r0, r3, #1
 800605a:	6010      	str	r0, [r2, #0]
 800605c:	7019      	strb	r1, [r3, #0]
 800605e:	4608      	mov	r0, r1
 8006060:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006064:	4770      	bx	lr

08006066 <__sfputs_r>:
 8006066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006068:	4606      	mov	r6, r0
 800606a:	460f      	mov	r7, r1
 800606c:	4614      	mov	r4, r2
 800606e:	18d5      	adds	r5, r2, r3
 8006070:	42ac      	cmp	r4, r5
 8006072:	d101      	bne.n	8006078 <__sfputs_r+0x12>
 8006074:	2000      	movs	r0, #0
 8006076:	e007      	b.n	8006088 <__sfputs_r+0x22>
 8006078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800607c:	463a      	mov	r2, r7
 800607e:	4630      	mov	r0, r6
 8006080:	f7ff ffda 	bl	8006038 <__sfputc_r>
 8006084:	1c43      	adds	r3, r0, #1
 8006086:	d1f3      	bne.n	8006070 <__sfputs_r+0xa>
 8006088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800608c <_vfiprintf_r>:
 800608c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006090:	460d      	mov	r5, r1
 8006092:	b09d      	sub	sp, #116	@ 0x74
 8006094:	4614      	mov	r4, r2
 8006096:	4698      	mov	r8, r3
 8006098:	4606      	mov	r6, r0
 800609a:	b118      	cbz	r0, 80060a4 <_vfiprintf_r+0x18>
 800609c:	6a03      	ldr	r3, [r0, #32]
 800609e:	b90b      	cbnz	r3, 80060a4 <_vfiprintf_r+0x18>
 80060a0:	f7ff fc52 	bl	8005948 <__sinit>
 80060a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060a6:	07d9      	lsls	r1, r3, #31
 80060a8:	d405      	bmi.n	80060b6 <_vfiprintf_r+0x2a>
 80060aa:	89ab      	ldrh	r3, [r5, #12]
 80060ac:	059a      	lsls	r2, r3, #22
 80060ae:	d402      	bmi.n	80060b6 <_vfiprintf_r+0x2a>
 80060b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060b2:	f7ff fd6e 	bl	8005b92 <__retarget_lock_acquire_recursive>
 80060b6:	89ab      	ldrh	r3, [r5, #12]
 80060b8:	071b      	lsls	r3, r3, #28
 80060ba:	d501      	bpl.n	80060c0 <_vfiprintf_r+0x34>
 80060bc:	692b      	ldr	r3, [r5, #16]
 80060be:	b99b      	cbnz	r3, 80060e8 <_vfiprintf_r+0x5c>
 80060c0:	4629      	mov	r1, r5
 80060c2:	4630      	mov	r0, r6
 80060c4:	f000 fb72 	bl	80067ac <__swsetup_r>
 80060c8:	b170      	cbz	r0, 80060e8 <_vfiprintf_r+0x5c>
 80060ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060cc:	07dc      	lsls	r4, r3, #31
 80060ce:	d504      	bpl.n	80060da <_vfiprintf_r+0x4e>
 80060d0:	f04f 30ff 	mov.w	r0, #4294967295
 80060d4:	b01d      	add	sp, #116	@ 0x74
 80060d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060da:	89ab      	ldrh	r3, [r5, #12]
 80060dc:	0598      	lsls	r0, r3, #22
 80060de:	d4f7      	bmi.n	80060d0 <_vfiprintf_r+0x44>
 80060e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060e2:	f7ff fd57 	bl	8005b94 <__retarget_lock_release_recursive>
 80060e6:	e7f3      	b.n	80060d0 <_vfiprintf_r+0x44>
 80060e8:	2300      	movs	r3, #0
 80060ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ec:	2320      	movs	r3, #32
 80060ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80060f6:	2330      	movs	r3, #48	@ 0x30
 80060f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80062a8 <_vfiprintf_r+0x21c>
 80060fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006100:	f04f 0901 	mov.w	r9, #1
 8006104:	4623      	mov	r3, r4
 8006106:	469a      	mov	sl, r3
 8006108:	f813 2b01 	ldrb.w	r2, [r3], #1
 800610c:	b10a      	cbz	r2, 8006112 <_vfiprintf_r+0x86>
 800610e:	2a25      	cmp	r2, #37	@ 0x25
 8006110:	d1f9      	bne.n	8006106 <_vfiprintf_r+0x7a>
 8006112:	ebba 0b04 	subs.w	fp, sl, r4
 8006116:	d00b      	beq.n	8006130 <_vfiprintf_r+0xa4>
 8006118:	465b      	mov	r3, fp
 800611a:	4622      	mov	r2, r4
 800611c:	4629      	mov	r1, r5
 800611e:	4630      	mov	r0, r6
 8006120:	f7ff ffa1 	bl	8006066 <__sfputs_r>
 8006124:	3001      	adds	r0, #1
 8006126:	f000 80a7 	beq.w	8006278 <_vfiprintf_r+0x1ec>
 800612a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800612c:	445a      	add	r2, fp
 800612e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006130:	f89a 3000 	ldrb.w	r3, [sl]
 8006134:	2b00      	cmp	r3, #0
 8006136:	f000 809f 	beq.w	8006278 <_vfiprintf_r+0x1ec>
 800613a:	2300      	movs	r3, #0
 800613c:	f04f 32ff 	mov.w	r2, #4294967295
 8006140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006144:	f10a 0a01 	add.w	sl, sl, #1
 8006148:	9304      	str	r3, [sp, #16]
 800614a:	9307      	str	r3, [sp, #28]
 800614c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006150:	931a      	str	r3, [sp, #104]	@ 0x68
 8006152:	4654      	mov	r4, sl
 8006154:	2205      	movs	r2, #5
 8006156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800615a:	4853      	ldr	r0, [pc, #332]	@ (80062a8 <_vfiprintf_r+0x21c>)
 800615c:	f7fa f838 	bl	80001d0 <memchr>
 8006160:	9a04      	ldr	r2, [sp, #16]
 8006162:	b9d8      	cbnz	r0, 800619c <_vfiprintf_r+0x110>
 8006164:	06d1      	lsls	r1, r2, #27
 8006166:	bf44      	itt	mi
 8006168:	2320      	movmi	r3, #32
 800616a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800616e:	0713      	lsls	r3, r2, #28
 8006170:	bf44      	itt	mi
 8006172:	232b      	movmi	r3, #43	@ 0x2b
 8006174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006178:	f89a 3000 	ldrb.w	r3, [sl]
 800617c:	2b2a      	cmp	r3, #42	@ 0x2a
 800617e:	d015      	beq.n	80061ac <_vfiprintf_r+0x120>
 8006180:	9a07      	ldr	r2, [sp, #28]
 8006182:	4654      	mov	r4, sl
 8006184:	2000      	movs	r0, #0
 8006186:	f04f 0c0a 	mov.w	ip, #10
 800618a:	4621      	mov	r1, r4
 800618c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006190:	3b30      	subs	r3, #48	@ 0x30
 8006192:	2b09      	cmp	r3, #9
 8006194:	d94b      	bls.n	800622e <_vfiprintf_r+0x1a2>
 8006196:	b1b0      	cbz	r0, 80061c6 <_vfiprintf_r+0x13a>
 8006198:	9207      	str	r2, [sp, #28]
 800619a:	e014      	b.n	80061c6 <_vfiprintf_r+0x13a>
 800619c:	eba0 0308 	sub.w	r3, r0, r8
 80061a0:	fa09 f303 	lsl.w	r3, r9, r3
 80061a4:	4313      	orrs	r3, r2
 80061a6:	9304      	str	r3, [sp, #16]
 80061a8:	46a2      	mov	sl, r4
 80061aa:	e7d2      	b.n	8006152 <_vfiprintf_r+0xc6>
 80061ac:	9b03      	ldr	r3, [sp, #12]
 80061ae:	1d19      	adds	r1, r3, #4
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	9103      	str	r1, [sp, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	bfbb      	ittet	lt
 80061b8:	425b      	neglt	r3, r3
 80061ba:	f042 0202 	orrlt.w	r2, r2, #2
 80061be:	9307      	strge	r3, [sp, #28]
 80061c0:	9307      	strlt	r3, [sp, #28]
 80061c2:	bfb8      	it	lt
 80061c4:	9204      	strlt	r2, [sp, #16]
 80061c6:	7823      	ldrb	r3, [r4, #0]
 80061c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80061ca:	d10a      	bne.n	80061e2 <_vfiprintf_r+0x156>
 80061cc:	7863      	ldrb	r3, [r4, #1]
 80061ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80061d0:	d132      	bne.n	8006238 <_vfiprintf_r+0x1ac>
 80061d2:	9b03      	ldr	r3, [sp, #12]
 80061d4:	1d1a      	adds	r2, r3, #4
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	9203      	str	r2, [sp, #12]
 80061da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061de:	3402      	adds	r4, #2
 80061e0:	9305      	str	r3, [sp, #20]
 80061e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80062b8 <_vfiprintf_r+0x22c>
 80061e6:	7821      	ldrb	r1, [r4, #0]
 80061e8:	2203      	movs	r2, #3
 80061ea:	4650      	mov	r0, sl
 80061ec:	f7f9 fff0 	bl	80001d0 <memchr>
 80061f0:	b138      	cbz	r0, 8006202 <_vfiprintf_r+0x176>
 80061f2:	9b04      	ldr	r3, [sp, #16]
 80061f4:	eba0 000a 	sub.w	r0, r0, sl
 80061f8:	2240      	movs	r2, #64	@ 0x40
 80061fa:	4082      	lsls	r2, r0
 80061fc:	4313      	orrs	r3, r2
 80061fe:	3401      	adds	r4, #1
 8006200:	9304      	str	r3, [sp, #16]
 8006202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006206:	4829      	ldr	r0, [pc, #164]	@ (80062ac <_vfiprintf_r+0x220>)
 8006208:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800620c:	2206      	movs	r2, #6
 800620e:	f7f9 ffdf 	bl	80001d0 <memchr>
 8006212:	2800      	cmp	r0, #0
 8006214:	d03f      	beq.n	8006296 <_vfiprintf_r+0x20a>
 8006216:	4b26      	ldr	r3, [pc, #152]	@ (80062b0 <_vfiprintf_r+0x224>)
 8006218:	bb1b      	cbnz	r3, 8006262 <_vfiprintf_r+0x1d6>
 800621a:	9b03      	ldr	r3, [sp, #12]
 800621c:	3307      	adds	r3, #7
 800621e:	f023 0307 	bic.w	r3, r3, #7
 8006222:	3308      	adds	r3, #8
 8006224:	9303      	str	r3, [sp, #12]
 8006226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006228:	443b      	add	r3, r7
 800622a:	9309      	str	r3, [sp, #36]	@ 0x24
 800622c:	e76a      	b.n	8006104 <_vfiprintf_r+0x78>
 800622e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006232:	460c      	mov	r4, r1
 8006234:	2001      	movs	r0, #1
 8006236:	e7a8      	b.n	800618a <_vfiprintf_r+0xfe>
 8006238:	2300      	movs	r3, #0
 800623a:	3401      	adds	r4, #1
 800623c:	9305      	str	r3, [sp, #20]
 800623e:	4619      	mov	r1, r3
 8006240:	f04f 0c0a 	mov.w	ip, #10
 8006244:	4620      	mov	r0, r4
 8006246:	f810 2b01 	ldrb.w	r2, [r0], #1
 800624a:	3a30      	subs	r2, #48	@ 0x30
 800624c:	2a09      	cmp	r2, #9
 800624e:	d903      	bls.n	8006258 <_vfiprintf_r+0x1cc>
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0c6      	beq.n	80061e2 <_vfiprintf_r+0x156>
 8006254:	9105      	str	r1, [sp, #20]
 8006256:	e7c4      	b.n	80061e2 <_vfiprintf_r+0x156>
 8006258:	fb0c 2101 	mla	r1, ip, r1, r2
 800625c:	4604      	mov	r4, r0
 800625e:	2301      	movs	r3, #1
 8006260:	e7f0      	b.n	8006244 <_vfiprintf_r+0x1b8>
 8006262:	ab03      	add	r3, sp, #12
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	462a      	mov	r2, r5
 8006268:	4b12      	ldr	r3, [pc, #72]	@ (80062b4 <_vfiprintf_r+0x228>)
 800626a:	a904      	add	r1, sp, #16
 800626c:	4630      	mov	r0, r6
 800626e:	f3af 8000 	nop.w
 8006272:	4607      	mov	r7, r0
 8006274:	1c78      	adds	r0, r7, #1
 8006276:	d1d6      	bne.n	8006226 <_vfiprintf_r+0x19a>
 8006278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800627a:	07d9      	lsls	r1, r3, #31
 800627c:	d405      	bmi.n	800628a <_vfiprintf_r+0x1fe>
 800627e:	89ab      	ldrh	r3, [r5, #12]
 8006280:	059a      	lsls	r2, r3, #22
 8006282:	d402      	bmi.n	800628a <_vfiprintf_r+0x1fe>
 8006284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006286:	f7ff fc85 	bl	8005b94 <__retarget_lock_release_recursive>
 800628a:	89ab      	ldrh	r3, [r5, #12]
 800628c:	065b      	lsls	r3, r3, #25
 800628e:	f53f af1f 	bmi.w	80060d0 <_vfiprintf_r+0x44>
 8006292:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006294:	e71e      	b.n	80060d4 <_vfiprintf_r+0x48>
 8006296:	ab03      	add	r3, sp, #12
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	462a      	mov	r2, r5
 800629c:	4b05      	ldr	r3, [pc, #20]	@ (80062b4 <_vfiprintf_r+0x228>)
 800629e:	a904      	add	r1, sp, #16
 80062a0:	4630      	mov	r0, r6
 80062a2:	f000 f879 	bl	8006398 <_printf_i>
 80062a6:	e7e4      	b.n	8006272 <_vfiprintf_r+0x1e6>
 80062a8:	08006b0c 	.word	0x08006b0c
 80062ac:	08006b16 	.word	0x08006b16
 80062b0:	00000000 	.word	0x00000000
 80062b4:	08006067 	.word	0x08006067
 80062b8:	08006b12 	.word	0x08006b12

080062bc <_printf_common>:
 80062bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c0:	4616      	mov	r6, r2
 80062c2:	4698      	mov	r8, r3
 80062c4:	688a      	ldr	r2, [r1, #8]
 80062c6:	690b      	ldr	r3, [r1, #16]
 80062c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062cc:	4293      	cmp	r3, r2
 80062ce:	bfb8      	it	lt
 80062d0:	4613      	movlt	r3, r2
 80062d2:	6033      	str	r3, [r6, #0]
 80062d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062d8:	4607      	mov	r7, r0
 80062da:	460c      	mov	r4, r1
 80062dc:	b10a      	cbz	r2, 80062e2 <_printf_common+0x26>
 80062de:	3301      	adds	r3, #1
 80062e0:	6033      	str	r3, [r6, #0]
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	0699      	lsls	r1, r3, #26
 80062e6:	bf42      	ittt	mi
 80062e8:	6833      	ldrmi	r3, [r6, #0]
 80062ea:	3302      	addmi	r3, #2
 80062ec:	6033      	strmi	r3, [r6, #0]
 80062ee:	6825      	ldr	r5, [r4, #0]
 80062f0:	f015 0506 	ands.w	r5, r5, #6
 80062f4:	d106      	bne.n	8006304 <_printf_common+0x48>
 80062f6:	f104 0a19 	add.w	sl, r4, #25
 80062fa:	68e3      	ldr	r3, [r4, #12]
 80062fc:	6832      	ldr	r2, [r6, #0]
 80062fe:	1a9b      	subs	r3, r3, r2
 8006300:	42ab      	cmp	r3, r5
 8006302:	dc26      	bgt.n	8006352 <_printf_common+0x96>
 8006304:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006308:	6822      	ldr	r2, [r4, #0]
 800630a:	3b00      	subs	r3, #0
 800630c:	bf18      	it	ne
 800630e:	2301      	movne	r3, #1
 8006310:	0692      	lsls	r2, r2, #26
 8006312:	d42b      	bmi.n	800636c <_printf_common+0xb0>
 8006314:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006318:	4641      	mov	r1, r8
 800631a:	4638      	mov	r0, r7
 800631c:	47c8      	blx	r9
 800631e:	3001      	adds	r0, #1
 8006320:	d01e      	beq.n	8006360 <_printf_common+0xa4>
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	6922      	ldr	r2, [r4, #16]
 8006326:	f003 0306 	and.w	r3, r3, #6
 800632a:	2b04      	cmp	r3, #4
 800632c:	bf02      	ittt	eq
 800632e:	68e5      	ldreq	r5, [r4, #12]
 8006330:	6833      	ldreq	r3, [r6, #0]
 8006332:	1aed      	subeq	r5, r5, r3
 8006334:	68a3      	ldr	r3, [r4, #8]
 8006336:	bf0c      	ite	eq
 8006338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800633c:	2500      	movne	r5, #0
 800633e:	4293      	cmp	r3, r2
 8006340:	bfc4      	itt	gt
 8006342:	1a9b      	subgt	r3, r3, r2
 8006344:	18ed      	addgt	r5, r5, r3
 8006346:	2600      	movs	r6, #0
 8006348:	341a      	adds	r4, #26
 800634a:	42b5      	cmp	r5, r6
 800634c:	d11a      	bne.n	8006384 <_printf_common+0xc8>
 800634e:	2000      	movs	r0, #0
 8006350:	e008      	b.n	8006364 <_printf_common+0xa8>
 8006352:	2301      	movs	r3, #1
 8006354:	4652      	mov	r2, sl
 8006356:	4641      	mov	r1, r8
 8006358:	4638      	mov	r0, r7
 800635a:	47c8      	blx	r9
 800635c:	3001      	adds	r0, #1
 800635e:	d103      	bne.n	8006368 <_printf_common+0xac>
 8006360:	f04f 30ff 	mov.w	r0, #4294967295
 8006364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006368:	3501      	adds	r5, #1
 800636a:	e7c6      	b.n	80062fa <_printf_common+0x3e>
 800636c:	18e1      	adds	r1, r4, r3
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	2030      	movs	r0, #48	@ 0x30
 8006372:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006376:	4422      	add	r2, r4
 8006378:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800637c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006380:	3302      	adds	r3, #2
 8006382:	e7c7      	b.n	8006314 <_printf_common+0x58>
 8006384:	2301      	movs	r3, #1
 8006386:	4622      	mov	r2, r4
 8006388:	4641      	mov	r1, r8
 800638a:	4638      	mov	r0, r7
 800638c:	47c8      	blx	r9
 800638e:	3001      	adds	r0, #1
 8006390:	d0e6      	beq.n	8006360 <_printf_common+0xa4>
 8006392:	3601      	adds	r6, #1
 8006394:	e7d9      	b.n	800634a <_printf_common+0x8e>
	...

08006398 <_printf_i>:
 8006398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800639c:	7e0f      	ldrb	r7, [r1, #24]
 800639e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063a0:	2f78      	cmp	r7, #120	@ 0x78
 80063a2:	4691      	mov	r9, r2
 80063a4:	4680      	mov	r8, r0
 80063a6:	460c      	mov	r4, r1
 80063a8:	469a      	mov	sl, r3
 80063aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063ae:	d807      	bhi.n	80063c0 <_printf_i+0x28>
 80063b0:	2f62      	cmp	r7, #98	@ 0x62
 80063b2:	d80a      	bhi.n	80063ca <_printf_i+0x32>
 80063b4:	2f00      	cmp	r7, #0
 80063b6:	f000 80d2 	beq.w	800655e <_printf_i+0x1c6>
 80063ba:	2f58      	cmp	r7, #88	@ 0x58
 80063bc:	f000 80b9 	beq.w	8006532 <_printf_i+0x19a>
 80063c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063c8:	e03a      	b.n	8006440 <_printf_i+0xa8>
 80063ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063ce:	2b15      	cmp	r3, #21
 80063d0:	d8f6      	bhi.n	80063c0 <_printf_i+0x28>
 80063d2:	a101      	add	r1, pc, #4	@ (adr r1, 80063d8 <_printf_i+0x40>)
 80063d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063d8:	08006431 	.word	0x08006431
 80063dc:	08006445 	.word	0x08006445
 80063e0:	080063c1 	.word	0x080063c1
 80063e4:	080063c1 	.word	0x080063c1
 80063e8:	080063c1 	.word	0x080063c1
 80063ec:	080063c1 	.word	0x080063c1
 80063f0:	08006445 	.word	0x08006445
 80063f4:	080063c1 	.word	0x080063c1
 80063f8:	080063c1 	.word	0x080063c1
 80063fc:	080063c1 	.word	0x080063c1
 8006400:	080063c1 	.word	0x080063c1
 8006404:	08006545 	.word	0x08006545
 8006408:	0800646f 	.word	0x0800646f
 800640c:	080064ff 	.word	0x080064ff
 8006410:	080063c1 	.word	0x080063c1
 8006414:	080063c1 	.word	0x080063c1
 8006418:	08006567 	.word	0x08006567
 800641c:	080063c1 	.word	0x080063c1
 8006420:	0800646f 	.word	0x0800646f
 8006424:	080063c1 	.word	0x080063c1
 8006428:	080063c1 	.word	0x080063c1
 800642c:	08006507 	.word	0x08006507
 8006430:	6833      	ldr	r3, [r6, #0]
 8006432:	1d1a      	adds	r2, r3, #4
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	6032      	str	r2, [r6, #0]
 8006438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800643c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006440:	2301      	movs	r3, #1
 8006442:	e09d      	b.n	8006580 <_printf_i+0x1e8>
 8006444:	6833      	ldr	r3, [r6, #0]
 8006446:	6820      	ldr	r0, [r4, #0]
 8006448:	1d19      	adds	r1, r3, #4
 800644a:	6031      	str	r1, [r6, #0]
 800644c:	0606      	lsls	r6, r0, #24
 800644e:	d501      	bpl.n	8006454 <_printf_i+0xbc>
 8006450:	681d      	ldr	r5, [r3, #0]
 8006452:	e003      	b.n	800645c <_printf_i+0xc4>
 8006454:	0645      	lsls	r5, r0, #25
 8006456:	d5fb      	bpl.n	8006450 <_printf_i+0xb8>
 8006458:	f9b3 5000 	ldrsh.w	r5, [r3]
 800645c:	2d00      	cmp	r5, #0
 800645e:	da03      	bge.n	8006468 <_printf_i+0xd0>
 8006460:	232d      	movs	r3, #45	@ 0x2d
 8006462:	426d      	negs	r5, r5
 8006464:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006468:	4859      	ldr	r0, [pc, #356]	@ (80065d0 <_printf_i+0x238>)
 800646a:	230a      	movs	r3, #10
 800646c:	e011      	b.n	8006492 <_printf_i+0xfa>
 800646e:	6821      	ldr	r1, [r4, #0]
 8006470:	6833      	ldr	r3, [r6, #0]
 8006472:	0608      	lsls	r0, r1, #24
 8006474:	f853 5b04 	ldr.w	r5, [r3], #4
 8006478:	d402      	bmi.n	8006480 <_printf_i+0xe8>
 800647a:	0649      	lsls	r1, r1, #25
 800647c:	bf48      	it	mi
 800647e:	b2ad      	uxthmi	r5, r5
 8006480:	2f6f      	cmp	r7, #111	@ 0x6f
 8006482:	4853      	ldr	r0, [pc, #332]	@ (80065d0 <_printf_i+0x238>)
 8006484:	6033      	str	r3, [r6, #0]
 8006486:	bf14      	ite	ne
 8006488:	230a      	movne	r3, #10
 800648a:	2308      	moveq	r3, #8
 800648c:	2100      	movs	r1, #0
 800648e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006492:	6866      	ldr	r6, [r4, #4]
 8006494:	60a6      	str	r6, [r4, #8]
 8006496:	2e00      	cmp	r6, #0
 8006498:	bfa2      	ittt	ge
 800649a:	6821      	ldrge	r1, [r4, #0]
 800649c:	f021 0104 	bicge.w	r1, r1, #4
 80064a0:	6021      	strge	r1, [r4, #0]
 80064a2:	b90d      	cbnz	r5, 80064a8 <_printf_i+0x110>
 80064a4:	2e00      	cmp	r6, #0
 80064a6:	d04b      	beq.n	8006540 <_printf_i+0x1a8>
 80064a8:	4616      	mov	r6, r2
 80064aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80064ae:	fb03 5711 	mls	r7, r3, r1, r5
 80064b2:	5dc7      	ldrb	r7, [r0, r7]
 80064b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064b8:	462f      	mov	r7, r5
 80064ba:	42bb      	cmp	r3, r7
 80064bc:	460d      	mov	r5, r1
 80064be:	d9f4      	bls.n	80064aa <_printf_i+0x112>
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d10b      	bne.n	80064dc <_printf_i+0x144>
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	07df      	lsls	r7, r3, #31
 80064c8:	d508      	bpl.n	80064dc <_printf_i+0x144>
 80064ca:	6923      	ldr	r3, [r4, #16]
 80064cc:	6861      	ldr	r1, [r4, #4]
 80064ce:	4299      	cmp	r1, r3
 80064d0:	bfde      	ittt	le
 80064d2:	2330      	movle	r3, #48	@ 0x30
 80064d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064dc:	1b92      	subs	r2, r2, r6
 80064de:	6122      	str	r2, [r4, #16]
 80064e0:	f8cd a000 	str.w	sl, [sp]
 80064e4:	464b      	mov	r3, r9
 80064e6:	aa03      	add	r2, sp, #12
 80064e8:	4621      	mov	r1, r4
 80064ea:	4640      	mov	r0, r8
 80064ec:	f7ff fee6 	bl	80062bc <_printf_common>
 80064f0:	3001      	adds	r0, #1
 80064f2:	d14a      	bne.n	800658a <_printf_i+0x1f2>
 80064f4:	f04f 30ff 	mov.w	r0, #4294967295
 80064f8:	b004      	add	sp, #16
 80064fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	f043 0320 	orr.w	r3, r3, #32
 8006504:	6023      	str	r3, [r4, #0]
 8006506:	4833      	ldr	r0, [pc, #204]	@ (80065d4 <_printf_i+0x23c>)
 8006508:	2778      	movs	r7, #120	@ 0x78
 800650a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	6831      	ldr	r1, [r6, #0]
 8006512:	061f      	lsls	r7, r3, #24
 8006514:	f851 5b04 	ldr.w	r5, [r1], #4
 8006518:	d402      	bmi.n	8006520 <_printf_i+0x188>
 800651a:	065f      	lsls	r7, r3, #25
 800651c:	bf48      	it	mi
 800651e:	b2ad      	uxthmi	r5, r5
 8006520:	6031      	str	r1, [r6, #0]
 8006522:	07d9      	lsls	r1, r3, #31
 8006524:	bf44      	itt	mi
 8006526:	f043 0320 	orrmi.w	r3, r3, #32
 800652a:	6023      	strmi	r3, [r4, #0]
 800652c:	b11d      	cbz	r5, 8006536 <_printf_i+0x19e>
 800652e:	2310      	movs	r3, #16
 8006530:	e7ac      	b.n	800648c <_printf_i+0xf4>
 8006532:	4827      	ldr	r0, [pc, #156]	@ (80065d0 <_printf_i+0x238>)
 8006534:	e7e9      	b.n	800650a <_printf_i+0x172>
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	f023 0320 	bic.w	r3, r3, #32
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	e7f6      	b.n	800652e <_printf_i+0x196>
 8006540:	4616      	mov	r6, r2
 8006542:	e7bd      	b.n	80064c0 <_printf_i+0x128>
 8006544:	6833      	ldr	r3, [r6, #0]
 8006546:	6825      	ldr	r5, [r4, #0]
 8006548:	6961      	ldr	r1, [r4, #20]
 800654a:	1d18      	adds	r0, r3, #4
 800654c:	6030      	str	r0, [r6, #0]
 800654e:	062e      	lsls	r6, r5, #24
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	d501      	bpl.n	8006558 <_printf_i+0x1c0>
 8006554:	6019      	str	r1, [r3, #0]
 8006556:	e002      	b.n	800655e <_printf_i+0x1c6>
 8006558:	0668      	lsls	r0, r5, #25
 800655a:	d5fb      	bpl.n	8006554 <_printf_i+0x1bc>
 800655c:	8019      	strh	r1, [r3, #0]
 800655e:	2300      	movs	r3, #0
 8006560:	6123      	str	r3, [r4, #16]
 8006562:	4616      	mov	r6, r2
 8006564:	e7bc      	b.n	80064e0 <_printf_i+0x148>
 8006566:	6833      	ldr	r3, [r6, #0]
 8006568:	1d1a      	adds	r2, r3, #4
 800656a:	6032      	str	r2, [r6, #0]
 800656c:	681e      	ldr	r6, [r3, #0]
 800656e:	6862      	ldr	r2, [r4, #4]
 8006570:	2100      	movs	r1, #0
 8006572:	4630      	mov	r0, r6
 8006574:	f7f9 fe2c 	bl	80001d0 <memchr>
 8006578:	b108      	cbz	r0, 800657e <_printf_i+0x1e6>
 800657a:	1b80      	subs	r0, r0, r6
 800657c:	6060      	str	r0, [r4, #4]
 800657e:	6863      	ldr	r3, [r4, #4]
 8006580:	6123      	str	r3, [r4, #16]
 8006582:	2300      	movs	r3, #0
 8006584:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006588:	e7aa      	b.n	80064e0 <_printf_i+0x148>
 800658a:	6923      	ldr	r3, [r4, #16]
 800658c:	4632      	mov	r2, r6
 800658e:	4649      	mov	r1, r9
 8006590:	4640      	mov	r0, r8
 8006592:	47d0      	blx	sl
 8006594:	3001      	adds	r0, #1
 8006596:	d0ad      	beq.n	80064f4 <_printf_i+0x15c>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	079b      	lsls	r3, r3, #30
 800659c:	d413      	bmi.n	80065c6 <_printf_i+0x22e>
 800659e:	68e0      	ldr	r0, [r4, #12]
 80065a0:	9b03      	ldr	r3, [sp, #12]
 80065a2:	4298      	cmp	r0, r3
 80065a4:	bfb8      	it	lt
 80065a6:	4618      	movlt	r0, r3
 80065a8:	e7a6      	b.n	80064f8 <_printf_i+0x160>
 80065aa:	2301      	movs	r3, #1
 80065ac:	4632      	mov	r2, r6
 80065ae:	4649      	mov	r1, r9
 80065b0:	4640      	mov	r0, r8
 80065b2:	47d0      	blx	sl
 80065b4:	3001      	adds	r0, #1
 80065b6:	d09d      	beq.n	80064f4 <_printf_i+0x15c>
 80065b8:	3501      	adds	r5, #1
 80065ba:	68e3      	ldr	r3, [r4, #12]
 80065bc:	9903      	ldr	r1, [sp, #12]
 80065be:	1a5b      	subs	r3, r3, r1
 80065c0:	42ab      	cmp	r3, r5
 80065c2:	dcf2      	bgt.n	80065aa <_printf_i+0x212>
 80065c4:	e7eb      	b.n	800659e <_printf_i+0x206>
 80065c6:	2500      	movs	r5, #0
 80065c8:	f104 0619 	add.w	r6, r4, #25
 80065cc:	e7f5      	b.n	80065ba <_printf_i+0x222>
 80065ce:	bf00      	nop
 80065d0:	08006b1d 	.word	0x08006b1d
 80065d4:	08006b2e 	.word	0x08006b2e

080065d8 <__sflush_r>:
 80065d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e0:	0716      	lsls	r6, r2, #28
 80065e2:	4605      	mov	r5, r0
 80065e4:	460c      	mov	r4, r1
 80065e6:	d454      	bmi.n	8006692 <__sflush_r+0xba>
 80065e8:	684b      	ldr	r3, [r1, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	dc02      	bgt.n	80065f4 <__sflush_r+0x1c>
 80065ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	dd48      	ble.n	8006686 <__sflush_r+0xae>
 80065f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065f6:	2e00      	cmp	r6, #0
 80065f8:	d045      	beq.n	8006686 <__sflush_r+0xae>
 80065fa:	2300      	movs	r3, #0
 80065fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006600:	682f      	ldr	r7, [r5, #0]
 8006602:	6a21      	ldr	r1, [r4, #32]
 8006604:	602b      	str	r3, [r5, #0]
 8006606:	d030      	beq.n	800666a <__sflush_r+0x92>
 8006608:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800660a:	89a3      	ldrh	r3, [r4, #12]
 800660c:	0759      	lsls	r1, r3, #29
 800660e:	d505      	bpl.n	800661c <__sflush_r+0x44>
 8006610:	6863      	ldr	r3, [r4, #4]
 8006612:	1ad2      	subs	r2, r2, r3
 8006614:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006616:	b10b      	cbz	r3, 800661c <__sflush_r+0x44>
 8006618:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800661a:	1ad2      	subs	r2, r2, r3
 800661c:	2300      	movs	r3, #0
 800661e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006620:	6a21      	ldr	r1, [r4, #32]
 8006622:	4628      	mov	r0, r5
 8006624:	47b0      	blx	r6
 8006626:	1c43      	adds	r3, r0, #1
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	d106      	bne.n	800663a <__sflush_r+0x62>
 800662c:	6829      	ldr	r1, [r5, #0]
 800662e:	291d      	cmp	r1, #29
 8006630:	d82b      	bhi.n	800668a <__sflush_r+0xb2>
 8006632:	4a2a      	ldr	r2, [pc, #168]	@ (80066dc <__sflush_r+0x104>)
 8006634:	410a      	asrs	r2, r1
 8006636:	07d6      	lsls	r6, r2, #31
 8006638:	d427      	bmi.n	800668a <__sflush_r+0xb2>
 800663a:	2200      	movs	r2, #0
 800663c:	6062      	str	r2, [r4, #4]
 800663e:	04d9      	lsls	r1, r3, #19
 8006640:	6922      	ldr	r2, [r4, #16]
 8006642:	6022      	str	r2, [r4, #0]
 8006644:	d504      	bpl.n	8006650 <__sflush_r+0x78>
 8006646:	1c42      	adds	r2, r0, #1
 8006648:	d101      	bne.n	800664e <__sflush_r+0x76>
 800664a:	682b      	ldr	r3, [r5, #0]
 800664c:	b903      	cbnz	r3, 8006650 <__sflush_r+0x78>
 800664e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006652:	602f      	str	r7, [r5, #0]
 8006654:	b1b9      	cbz	r1, 8006686 <__sflush_r+0xae>
 8006656:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800665a:	4299      	cmp	r1, r3
 800665c:	d002      	beq.n	8006664 <__sflush_r+0x8c>
 800665e:	4628      	mov	r0, r5
 8006660:	f7ff fa9a 	bl	8005b98 <_free_r>
 8006664:	2300      	movs	r3, #0
 8006666:	6363      	str	r3, [r4, #52]	@ 0x34
 8006668:	e00d      	b.n	8006686 <__sflush_r+0xae>
 800666a:	2301      	movs	r3, #1
 800666c:	4628      	mov	r0, r5
 800666e:	47b0      	blx	r6
 8006670:	4602      	mov	r2, r0
 8006672:	1c50      	adds	r0, r2, #1
 8006674:	d1c9      	bne.n	800660a <__sflush_r+0x32>
 8006676:	682b      	ldr	r3, [r5, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0c6      	beq.n	800660a <__sflush_r+0x32>
 800667c:	2b1d      	cmp	r3, #29
 800667e:	d001      	beq.n	8006684 <__sflush_r+0xac>
 8006680:	2b16      	cmp	r3, #22
 8006682:	d11e      	bne.n	80066c2 <__sflush_r+0xea>
 8006684:	602f      	str	r7, [r5, #0]
 8006686:	2000      	movs	r0, #0
 8006688:	e022      	b.n	80066d0 <__sflush_r+0xf8>
 800668a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800668e:	b21b      	sxth	r3, r3
 8006690:	e01b      	b.n	80066ca <__sflush_r+0xf2>
 8006692:	690f      	ldr	r7, [r1, #16]
 8006694:	2f00      	cmp	r7, #0
 8006696:	d0f6      	beq.n	8006686 <__sflush_r+0xae>
 8006698:	0793      	lsls	r3, r2, #30
 800669a:	680e      	ldr	r6, [r1, #0]
 800669c:	bf08      	it	eq
 800669e:	694b      	ldreq	r3, [r1, #20]
 80066a0:	600f      	str	r7, [r1, #0]
 80066a2:	bf18      	it	ne
 80066a4:	2300      	movne	r3, #0
 80066a6:	eba6 0807 	sub.w	r8, r6, r7
 80066aa:	608b      	str	r3, [r1, #8]
 80066ac:	f1b8 0f00 	cmp.w	r8, #0
 80066b0:	dde9      	ble.n	8006686 <__sflush_r+0xae>
 80066b2:	6a21      	ldr	r1, [r4, #32]
 80066b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80066b6:	4643      	mov	r3, r8
 80066b8:	463a      	mov	r2, r7
 80066ba:	4628      	mov	r0, r5
 80066bc:	47b0      	blx	r6
 80066be:	2800      	cmp	r0, #0
 80066c0:	dc08      	bgt.n	80066d4 <__sflush_r+0xfc>
 80066c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066ca:	81a3      	strh	r3, [r4, #12]
 80066cc:	f04f 30ff 	mov.w	r0, #4294967295
 80066d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066d4:	4407      	add	r7, r0
 80066d6:	eba8 0800 	sub.w	r8, r8, r0
 80066da:	e7e7      	b.n	80066ac <__sflush_r+0xd4>
 80066dc:	dfbffffe 	.word	0xdfbffffe

080066e0 <_fflush_r>:
 80066e0:	b538      	push	{r3, r4, r5, lr}
 80066e2:	690b      	ldr	r3, [r1, #16]
 80066e4:	4605      	mov	r5, r0
 80066e6:	460c      	mov	r4, r1
 80066e8:	b913      	cbnz	r3, 80066f0 <_fflush_r+0x10>
 80066ea:	2500      	movs	r5, #0
 80066ec:	4628      	mov	r0, r5
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
 80066f0:	b118      	cbz	r0, 80066fa <_fflush_r+0x1a>
 80066f2:	6a03      	ldr	r3, [r0, #32]
 80066f4:	b90b      	cbnz	r3, 80066fa <_fflush_r+0x1a>
 80066f6:	f7ff f927 	bl	8005948 <__sinit>
 80066fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0f3      	beq.n	80066ea <_fflush_r+0xa>
 8006702:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006704:	07d0      	lsls	r0, r2, #31
 8006706:	d404      	bmi.n	8006712 <_fflush_r+0x32>
 8006708:	0599      	lsls	r1, r3, #22
 800670a:	d402      	bmi.n	8006712 <_fflush_r+0x32>
 800670c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800670e:	f7ff fa40 	bl	8005b92 <__retarget_lock_acquire_recursive>
 8006712:	4628      	mov	r0, r5
 8006714:	4621      	mov	r1, r4
 8006716:	f7ff ff5f 	bl	80065d8 <__sflush_r>
 800671a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800671c:	07da      	lsls	r2, r3, #31
 800671e:	4605      	mov	r5, r0
 8006720:	d4e4      	bmi.n	80066ec <_fflush_r+0xc>
 8006722:	89a3      	ldrh	r3, [r4, #12]
 8006724:	059b      	lsls	r3, r3, #22
 8006726:	d4e1      	bmi.n	80066ec <_fflush_r+0xc>
 8006728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800672a:	f7ff fa33 	bl	8005b94 <__retarget_lock_release_recursive>
 800672e:	e7dd      	b.n	80066ec <_fflush_r+0xc>

08006730 <__swbuf_r>:
 8006730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006732:	460e      	mov	r6, r1
 8006734:	4614      	mov	r4, r2
 8006736:	4605      	mov	r5, r0
 8006738:	b118      	cbz	r0, 8006742 <__swbuf_r+0x12>
 800673a:	6a03      	ldr	r3, [r0, #32]
 800673c:	b90b      	cbnz	r3, 8006742 <__swbuf_r+0x12>
 800673e:	f7ff f903 	bl	8005948 <__sinit>
 8006742:	69a3      	ldr	r3, [r4, #24]
 8006744:	60a3      	str	r3, [r4, #8]
 8006746:	89a3      	ldrh	r3, [r4, #12]
 8006748:	071a      	lsls	r2, r3, #28
 800674a:	d501      	bpl.n	8006750 <__swbuf_r+0x20>
 800674c:	6923      	ldr	r3, [r4, #16]
 800674e:	b943      	cbnz	r3, 8006762 <__swbuf_r+0x32>
 8006750:	4621      	mov	r1, r4
 8006752:	4628      	mov	r0, r5
 8006754:	f000 f82a 	bl	80067ac <__swsetup_r>
 8006758:	b118      	cbz	r0, 8006762 <__swbuf_r+0x32>
 800675a:	f04f 37ff 	mov.w	r7, #4294967295
 800675e:	4638      	mov	r0, r7
 8006760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	6922      	ldr	r2, [r4, #16]
 8006766:	1a98      	subs	r0, r3, r2
 8006768:	6963      	ldr	r3, [r4, #20]
 800676a:	b2f6      	uxtb	r6, r6
 800676c:	4283      	cmp	r3, r0
 800676e:	4637      	mov	r7, r6
 8006770:	dc05      	bgt.n	800677e <__swbuf_r+0x4e>
 8006772:	4621      	mov	r1, r4
 8006774:	4628      	mov	r0, r5
 8006776:	f7ff ffb3 	bl	80066e0 <_fflush_r>
 800677a:	2800      	cmp	r0, #0
 800677c:	d1ed      	bne.n	800675a <__swbuf_r+0x2a>
 800677e:	68a3      	ldr	r3, [r4, #8]
 8006780:	3b01      	subs	r3, #1
 8006782:	60a3      	str	r3, [r4, #8]
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	6022      	str	r2, [r4, #0]
 800678a:	701e      	strb	r6, [r3, #0]
 800678c:	6962      	ldr	r2, [r4, #20]
 800678e:	1c43      	adds	r3, r0, #1
 8006790:	429a      	cmp	r2, r3
 8006792:	d004      	beq.n	800679e <__swbuf_r+0x6e>
 8006794:	89a3      	ldrh	r3, [r4, #12]
 8006796:	07db      	lsls	r3, r3, #31
 8006798:	d5e1      	bpl.n	800675e <__swbuf_r+0x2e>
 800679a:	2e0a      	cmp	r6, #10
 800679c:	d1df      	bne.n	800675e <__swbuf_r+0x2e>
 800679e:	4621      	mov	r1, r4
 80067a0:	4628      	mov	r0, r5
 80067a2:	f7ff ff9d 	bl	80066e0 <_fflush_r>
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d0d9      	beq.n	800675e <__swbuf_r+0x2e>
 80067aa:	e7d6      	b.n	800675a <__swbuf_r+0x2a>

080067ac <__swsetup_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4b29      	ldr	r3, [pc, #164]	@ (8006854 <__swsetup_r+0xa8>)
 80067b0:	4605      	mov	r5, r0
 80067b2:	6818      	ldr	r0, [r3, #0]
 80067b4:	460c      	mov	r4, r1
 80067b6:	b118      	cbz	r0, 80067c0 <__swsetup_r+0x14>
 80067b8:	6a03      	ldr	r3, [r0, #32]
 80067ba:	b90b      	cbnz	r3, 80067c0 <__swsetup_r+0x14>
 80067bc:	f7ff f8c4 	bl	8005948 <__sinit>
 80067c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067c4:	0719      	lsls	r1, r3, #28
 80067c6:	d422      	bmi.n	800680e <__swsetup_r+0x62>
 80067c8:	06da      	lsls	r2, r3, #27
 80067ca:	d407      	bmi.n	80067dc <__swsetup_r+0x30>
 80067cc:	2209      	movs	r2, #9
 80067ce:	602a      	str	r2, [r5, #0]
 80067d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067d4:	81a3      	strh	r3, [r4, #12]
 80067d6:	f04f 30ff 	mov.w	r0, #4294967295
 80067da:	e033      	b.n	8006844 <__swsetup_r+0x98>
 80067dc:	0758      	lsls	r0, r3, #29
 80067de:	d512      	bpl.n	8006806 <__swsetup_r+0x5a>
 80067e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067e2:	b141      	cbz	r1, 80067f6 <__swsetup_r+0x4a>
 80067e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067e8:	4299      	cmp	r1, r3
 80067ea:	d002      	beq.n	80067f2 <__swsetup_r+0x46>
 80067ec:	4628      	mov	r0, r5
 80067ee:	f7ff f9d3 	bl	8005b98 <_free_r>
 80067f2:	2300      	movs	r3, #0
 80067f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80067f6:	89a3      	ldrh	r3, [r4, #12]
 80067f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80067fc:	81a3      	strh	r3, [r4, #12]
 80067fe:	2300      	movs	r3, #0
 8006800:	6063      	str	r3, [r4, #4]
 8006802:	6923      	ldr	r3, [r4, #16]
 8006804:	6023      	str	r3, [r4, #0]
 8006806:	89a3      	ldrh	r3, [r4, #12]
 8006808:	f043 0308 	orr.w	r3, r3, #8
 800680c:	81a3      	strh	r3, [r4, #12]
 800680e:	6923      	ldr	r3, [r4, #16]
 8006810:	b94b      	cbnz	r3, 8006826 <__swsetup_r+0x7a>
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800681c:	d003      	beq.n	8006826 <__swsetup_r+0x7a>
 800681e:	4621      	mov	r1, r4
 8006820:	4628      	mov	r0, r5
 8006822:	f000 f8a5 	bl	8006970 <__smakebuf_r>
 8006826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800682a:	f013 0201 	ands.w	r2, r3, #1
 800682e:	d00a      	beq.n	8006846 <__swsetup_r+0x9a>
 8006830:	2200      	movs	r2, #0
 8006832:	60a2      	str	r2, [r4, #8]
 8006834:	6962      	ldr	r2, [r4, #20]
 8006836:	4252      	negs	r2, r2
 8006838:	61a2      	str	r2, [r4, #24]
 800683a:	6922      	ldr	r2, [r4, #16]
 800683c:	b942      	cbnz	r2, 8006850 <__swsetup_r+0xa4>
 800683e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006842:	d1c5      	bne.n	80067d0 <__swsetup_r+0x24>
 8006844:	bd38      	pop	{r3, r4, r5, pc}
 8006846:	0799      	lsls	r1, r3, #30
 8006848:	bf58      	it	pl
 800684a:	6962      	ldrpl	r2, [r4, #20]
 800684c:	60a2      	str	r2, [r4, #8]
 800684e:	e7f4      	b.n	800683a <__swsetup_r+0x8e>
 8006850:	2000      	movs	r0, #0
 8006852:	e7f7      	b.n	8006844 <__swsetup_r+0x98>
 8006854:	20000024 	.word	0x20000024

08006858 <memmove>:
 8006858:	4288      	cmp	r0, r1
 800685a:	b510      	push	{r4, lr}
 800685c:	eb01 0402 	add.w	r4, r1, r2
 8006860:	d902      	bls.n	8006868 <memmove+0x10>
 8006862:	4284      	cmp	r4, r0
 8006864:	4623      	mov	r3, r4
 8006866:	d807      	bhi.n	8006878 <memmove+0x20>
 8006868:	1e43      	subs	r3, r0, #1
 800686a:	42a1      	cmp	r1, r4
 800686c:	d008      	beq.n	8006880 <memmove+0x28>
 800686e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006872:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006876:	e7f8      	b.n	800686a <memmove+0x12>
 8006878:	4402      	add	r2, r0
 800687a:	4601      	mov	r1, r0
 800687c:	428a      	cmp	r2, r1
 800687e:	d100      	bne.n	8006882 <memmove+0x2a>
 8006880:	bd10      	pop	{r4, pc}
 8006882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800688a:	e7f7      	b.n	800687c <memmove+0x24>

0800688c <_sbrk_r>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	4d06      	ldr	r5, [pc, #24]	@ (80068a8 <_sbrk_r+0x1c>)
 8006890:	2300      	movs	r3, #0
 8006892:	4604      	mov	r4, r0
 8006894:	4608      	mov	r0, r1
 8006896:	602b      	str	r3, [r5, #0]
 8006898:	f7fa fca4 	bl	80011e4 <_sbrk>
 800689c:	1c43      	adds	r3, r0, #1
 800689e:	d102      	bne.n	80068a6 <_sbrk_r+0x1a>
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	b103      	cbz	r3, 80068a6 <_sbrk_r+0x1a>
 80068a4:	6023      	str	r3, [r4, #0]
 80068a6:	bd38      	pop	{r3, r4, r5, pc}
 80068a8:	20000318 	.word	0x20000318

080068ac <memcpy>:
 80068ac:	440a      	add	r2, r1
 80068ae:	4291      	cmp	r1, r2
 80068b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80068b4:	d100      	bne.n	80068b8 <memcpy+0xc>
 80068b6:	4770      	bx	lr
 80068b8:	b510      	push	{r4, lr}
 80068ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068c2:	4291      	cmp	r1, r2
 80068c4:	d1f9      	bne.n	80068ba <memcpy+0xe>
 80068c6:	bd10      	pop	{r4, pc}

080068c8 <_realloc_r>:
 80068c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068cc:	4680      	mov	r8, r0
 80068ce:	4615      	mov	r5, r2
 80068d0:	460c      	mov	r4, r1
 80068d2:	b921      	cbnz	r1, 80068de <_realloc_r+0x16>
 80068d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068d8:	4611      	mov	r1, r2
 80068da:	f7ff b9c9 	b.w	8005c70 <_malloc_r>
 80068de:	b92a      	cbnz	r2, 80068ec <_realloc_r+0x24>
 80068e0:	f7ff f95a 	bl	8005b98 <_free_r>
 80068e4:	2400      	movs	r4, #0
 80068e6:	4620      	mov	r0, r4
 80068e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068ec:	f000 f89e 	bl	8006a2c <_malloc_usable_size_r>
 80068f0:	4285      	cmp	r5, r0
 80068f2:	4606      	mov	r6, r0
 80068f4:	d802      	bhi.n	80068fc <_realloc_r+0x34>
 80068f6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80068fa:	d8f4      	bhi.n	80068e6 <_realloc_r+0x1e>
 80068fc:	4629      	mov	r1, r5
 80068fe:	4640      	mov	r0, r8
 8006900:	f7ff f9b6 	bl	8005c70 <_malloc_r>
 8006904:	4607      	mov	r7, r0
 8006906:	2800      	cmp	r0, #0
 8006908:	d0ec      	beq.n	80068e4 <_realloc_r+0x1c>
 800690a:	42b5      	cmp	r5, r6
 800690c:	462a      	mov	r2, r5
 800690e:	4621      	mov	r1, r4
 8006910:	bf28      	it	cs
 8006912:	4632      	movcs	r2, r6
 8006914:	f7ff ffca 	bl	80068ac <memcpy>
 8006918:	4621      	mov	r1, r4
 800691a:	4640      	mov	r0, r8
 800691c:	f7ff f93c 	bl	8005b98 <_free_r>
 8006920:	463c      	mov	r4, r7
 8006922:	e7e0      	b.n	80068e6 <_realloc_r+0x1e>

08006924 <__swhatbuf_r>:
 8006924:	b570      	push	{r4, r5, r6, lr}
 8006926:	460c      	mov	r4, r1
 8006928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800692c:	2900      	cmp	r1, #0
 800692e:	b096      	sub	sp, #88	@ 0x58
 8006930:	4615      	mov	r5, r2
 8006932:	461e      	mov	r6, r3
 8006934:	da0d      	bge.n	8006952 <__swhatbuf_r+0x2e>
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800693c:	f04f 0100 	mov.w	r1, #0
 8006940:	bf14      	ite	ne
 8006942:	2340      	movne	r3, #64	@ 0x40
 8006944:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006948:	2000      	movs	r0, #0
 800694a:	6031      	str	r1, [r6, #0]
 800694c:	602b      	str	r3, [r5, #0]
 800694e:	b016      	add	sp, #88	@ 0x58
 8006950:	bd70      	pop	{r4, r5, r6, pc}
 8006952:	466a      	mov	r2, sp
 8006954:	f000 f848 	bl	80069e8 <_fstat_r>
 8006958:	2800      	cmp	r0, #0
 800695a:	dbec      	blt.n	8006936 <__swhatbuf_r+0x12>
 800695c:	9901      	ldr	r1, [sp, #4]
 800695e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006962:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006966:	4259      	negs	r1, r3
 8006968:	4159      	adcs	r1, r3
 800696a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800696e:	e7eb      	b.n	8006948 <__swhatbuf_r+0x24>

08006970 <__smakebuf_r>:
 8006970:	898b      	ldrh	r3, [r1, #12]
 8006972:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006974:	079d      	lsls	r5, r3, #30
 8006976:	4606      	mov	r6, r0
 8006978:	460c      	mov	r4, r1
 800697a:	d507      	bpl.n	800698c <__smakebuf_r+0x1c>
 800697c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006980:	6023      	str	r3, [r4, #0]
 8006982:	6123      	str	r3, [r4, #16]
 8006984:	2301      	movs	r3, #1
 8006986:	6163      	str	r3, [r4, #20]
 8006988:	b003      	add	sp, #12
 800698a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800698c:	ab01      	add	r3, sp, #4
 800698e:	466a      	mov	r2, sp
 8006990:	f7ff ffc8 	bl	8006924 <__swhatbuf_r>
 8006994:	9f00      	ldr	r7, [sp, #0]
 8006996:	4605      	mov	r5, r0
 8006998:	4639      	mov	r1, r7
 800699a:	4630      	mov	r0, r6
 800699c:	f7ff f968 	bl	8005c70 <_malloc_r>
 80069a0:	b948      	cbnz	r0, 80069b6 <__smakebuf_r+0x46>
 80069a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069a6:	059a      	lsls	r2, r3, #22
 80069a8:	d4ee      	bmi.n	8006988 <__smakebuf_r+0x18>
 80069aa:	f023 0303 	bic.w	r3, r3, #3
 80069ae:	f043 0302 	orr.w	r3, r3, #2
 80069b2:	81a3      	strh	r3, [r4, #12]
 80069b4:	e7e2      	b.n	800697c <__smakebuf_r+0xc>
 80069b6:	89a3      	ldrh	r3, [r4, #12]
 80069b8:	6020      	str	r0, [r4, #0]
 80069ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069be:	81a3      	strh	r3, [r4, #12]
 80069c0:	9b01      	ldr	r3, [sp, #4]
 80069c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80069c6:	b15b      	cbz	r3, 80069e0 <__smakebuf_r+0x70>
 80069c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069cc:	4630      	mov	r0, r6
 80069ce:	f000 f81d 	bl	8006a0c <_isatty_r>
 80069d2:	b128      	cbz	r0, 80069e0 <__smakebuf_r+0x70>
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	f023 0303 	bic.w	r3, r3, #3
 80069da:	f043 0301 	orr.w	r3, r3, #1
 80069de:	81a3      	strh	r3, [r4, #12]
 80069e0:	89a3      	ldrh	r3, [r4, #12]
 80069e2:	431d      	orrs	r5, r3
 80069e4:	81a5      	strh	r5, [r4, #12]
 80069e6:	e7cf      	b.n	8006988 <__smakebuf_r+0x18>

080069e8 <_fstat_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	4d07      	ldr	r5, [pc, #28]	@ (8006a08 <_fstat_r+0x20>)
 80069ec:	2300      	movs	r3, #0
 80069ee:	4604      	mov	r4, r0
 80069f0:	4608      	mov	r0, r1
 80069f2:	4611      	mov	r1, r2
 80069f4:	602b      	str	r3, [r5, #0]
 80069f6:	f7fa fbcc 	bl	8001192 <_fstat>
 80069fa:	1c43      	adds	r3, r0, #1
 80069fc:	d102      	bne.n	8006a04 <_fstat_r+0x1c>
 80069fe:	682b      	ldr	r3, [r5, #0]
 8006a00:	b103      	cbz	r3, 8006a04 <_fstat_r+0x1c>
 8006a02:	6023      	str	r3, [r4, #0]
 8006a04:	bd38      	pop	{r3, r4, r5, pc}
 8006a06:	bf00      	nop
 8006a08:	20000318 	.word	0x20000318

08006a0c <_isatty_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4d06      	ldr	r5, [pc, #24]	@ (8006a28 <_isatty_r+0x1c>)
 8006a10:	2300      	movs	r3, #0
 8006a12:	4604      	mov	r4, r0
 8006a14:	4608      	mov	r0, r1
 8006a16:	602b      	str	r3, [r5, #0]
 8006a18:	f7fa fbcb 	bl	80011b2 <_isatty>
 8006a1c:	1c43      	adds	r3, r0, #1
 8006a1e:	d102      	bne.n	8006a26 <_isatty_r+0x1a>
 8006a20:	682b      	ldr	r3, [r5, #0]
 8006a22:	b103      	cbz	r3, 8006a26 <_isatty_r+0x1a>
 8006a24:	6023      	str	r3, [r4, #0]
 8006a26:	bd38      	pop	{r3, r4, r5, pc}
 8006a28:	20000318 	.word	0x20000318

08006a2c <_malloc_usable_size_r>:
 8006a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a30:	1f18      	subs	r0, r3, #4
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	bfbc      	itt	lt
 8006a36:	580b      	ldrlt	r3, [r1, r0]
 8006a38:	18c0      	addlt	r0, r0, r3
 8006a3a:	4770      	bx	lr

08006a3c <_init>:
 8006a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3e:	bf00      	nop
 8006a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a42:	bc08      	pop	{r3}
 8006a44:	469e      	mov	lr, r3
 8006a46:	4770      	bx	lr

08006a48 <_fini>:
 8006a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4a:	bf00      	nop
 8006a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a4e:	bc08      	pop	{r3}
 8006a50:	469e      	mov	lr, r3
 8006a52:	4770      	bx	lr
